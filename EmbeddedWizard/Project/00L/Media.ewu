$version 10.00

$rect <30,20,270,60>
$output false
class MED01_MediaUI : Components::BaseMainBG
{
  $rect <540,200,740,240>
  inherited method Init()
  {
    DeviceInterface::MediaManagerDevice.IsInit = true;
    DeviceInterface::MediaManagerDevice.GetPlayerInfo();
    DeviceInterface::MediaManagerDevice.GetPlaybackInfo();
    DeviceInterface::MediaManagerDevice.GetTrackInfo();
    DeviceInterface::MediaManagerDevice.IsInit = false;
    if( "" != DeviceInterface::MediaManagerDevice.Title &&
        Strings::GEN_three_hyphens != DeviceInterface::MediaManagerDevice.Title )
    {
      // Received music previously, update elapsed time & remain time.
      signal OnPlaybackTimeUpdateSlot;
    }
  }

  $rect <540,40,740,80>
  inherited property Bounds = <0,0,480,272>;

  $rect <980,260,1210,300>
  inherited method OnShortEnterKeyActivated()
  {
    StartHighlight( PlayPauseBG );
    postsignal OnPlayPauseSlot;
  }

  $rect <1210,260,1440,300>
  inherited method OnShortHomeKeyActivated()
  {
    Owner.DismissDialog( this, null, null, null, null, null, false );
  }

  $rect <960,40,1160,80>
  inherited property UpKeyTriggerMode = Enum::KeyTriggerMode.OFF;

  $rect <1170,40,1370,80>
  inherited property DownKeyTriggerMode = Enum::KeyTriggerMode.OFF;

  $rect <750,260,980,300>
  inherited method OnLongDownKeyActivated()
  {
    StartHighlight( ControlDownBG );
    postsignal OnPrevTrackSlot;
  }

  $rect <540,260,750,300>
  inherited method OnLongUpKeyActivated()
  {
    StartHighlight( ControlUpBG );
    postsignal OnNextTrackSlot;
  }

  $rect <20,20,160,60>
  object Views::Text Title
  {
    preset Bounds = <127,69,457,103>;
    preset Ellipsis = true;
    preset Alignment = Views::TextAlignment[AlignHorzLeft, AlignVertCenter];
    preset String = "";
    preset Font = Fonts::NotoSansCjkJpMedium28pt;
    preset Visible = true;
  }

  $rect <20,20,160,60>
  object Views::Text Artist
  {
    preset Bounds = <127,114,457,148>;
    preset Ellipsis = true;
    preset Alignment = Views::TextAlignment[AlignHorzLeft, AlignVertCenter];
    preset String = "";
    preset Font = Fonts::NotoSansCjkJpMedium28pt;
    preset Visible = true;
  }

  $rect <20,20,160,60>
  object Views::Text Album
  {
    preset Bounds = <127,153,457,187>;
    preset Ellipsis = true;
    preset Alignment = Views::TextAlignment[AlignHorzLeft, AlignVertCenter];
    preset String = "";
    preset Font = Fonts::NotoSansCjkJpMedium28pt;
    preset Visible = true;
  }

  $rect <540,320,740,360>
  slot OnPlayPauseSlot
  {
    if( 0 == Track.PlaybackState )
    {
      DeviceInterface::MediaManagerDevice.SendRemoteCommand( Enum::CommandType.Play );
    }
    else
    {
      DeviceInterface::MediaManagerDevice.SendRemoteCommand( Enum::CommandType.Pause );
    }
  }

  $rect <750,320,950,360>
  slot OnPrevTrackSlot
  {
    ChangeTrack();
    DeviceInterface::MediaManagerDevice.SendRemoteCommand( Enum::CommandType.PrevTrack );
  }

  $rect <960,320,1160,360>
  slot OnNextTrackSlot
  {
    ChangeTrack();
    DeviceInterface::MediaManagerDevice.SendRemoteCommand( Enum::CommandType.NextTrack );
  }

  $rect <20,20,160,60>
  object Views::Text ElapsedTimeSec
  {
    preset Bounds = <127,226,204,256>;
    preset Alignment = Views::TextAlignment[AlignHorzLeft, AlignVertCenter];
    preset String = "";
    preset Font = Fonts::NotoSansCjkJpMedium22pt;
    preset Visible = false;
  }

  $rect <20,20,160,60>
  object Views::Text RemainTimeSec
  {
    preset Bounds = <364,226,441,256>;
    preset Alignment = Views::TextAlignment[AlignHorzRight, AlignVertCenter];
    preset String = "";
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
    preset Visible = false;
  }

  $rect <20,20,160,60>
  object Media::Track Track
  {
    preset Visible = false;
    preset Artist;
    preset Title;
    preset Album;
    preset OnTrackInfoUpdate = SetTrackInfo;
    preset RemainTimeSec;
    preset ElapsedTimeSec;
  }

  $rect <1170,320,1370,360>
  slot SetTrackInfo
  {
    Title.String = Track.Title;
    Artist.String = Track.Artist;
    Album.String = Track.Album;
  }

  $rect <750,200,950,240>
  method void ChangeTrack()
  {
    // Reset if next/previous track command is issued.
    Track.ResetTrackInfo();
    Track.IsTrackInfoReset = false;
    DeviceInterface::MediaManagerDevice.IsTitleReceived = false;
    DeviceInterface::MediaManagerDevice.IsArtistReceived = false;
    DeviceInterface::MediaManagerDevice.IsAlbumReceived = false;
  }

  $rect <540,460,780,500>
  object Core::SystemEventHandler PlaybackTimeEventHandler
  {
    preset OnEvent = OnPlaybackTimeUpdateSlot;
    preset Event = DeviceInterface::MediaManagerDevice.NotifyPlayBackTimeChangedSystemEvent;
  }

  // This slot method is executed when the associated system event handler 'SystemEventHandler' \
  // receives an event.
  $rect <800,460,1070,500>
  slot OnPlaybackTimeUpdateSlot
  {
    if( !ElapsedTimeSec.Visible )
    {
      ElapsedTimeSec.Visible = true;
    }
    ElapsedTimeSec.String = FormatTimeText( DeviceInterface::MediaManagerDevice.ElapsedTimeSec );

    if( !RemainTimeSec.Visible )
    {
      RemainTimeSec.Visible = true;
    }
    RemainTimeSec.String = FormatTimeText( DeviceInterface::MediaManagerDevice.RemainTimeSec );

    if( 0 != DeviceInterface::MediaManagerDevice.DurationTimeSec )
    {
      if( !SeekBar.Visible )
      {
        SeekBar.Visible = true;
      }
      SeekBar.CurrentValue = ( DeviceInterface::MediaManagerDevice.ElapsedTimeSec * 100 ) / DeviceInterface::MediaManagerDevice.DurationTimeSec;
    }


  }

  $rect <960,200,1160,240>
  method string FormatTimeText( arg int32 TimeSec )
  {
    var int32 Hour = TimeSec / 3600;
    var int32 Minute = ( TimeSec / 60 ) % 60;
    var int32 Second = TimeSec % 60;
    var string TimeText = "";

    if( Hour > 0)
    {
      TimeText = string( Hour ) + ":";
      if( Minute < 10 )
      {
        TimeText = TimeText + "0";
      }
    }
    TimeText = TimeText + string( Minute ) + ":";
    if( Second < 10 )
    {
      TimeText = TimeText + "0";
    }
    TimeText = TimeText + string( Second );
    return TimeText;
  }

  $rect <20,20,160,60>
  object Views::Image PlayPauseBG
  {
    preset Bounds = <0,114,94,189>;
    preset FrameNumber = 0;
    preset Bitmap = Resource::ControlKeyBackground;
  }

  $rect <20,20,160,60>
  object Views::Image PlayPauseButton
  {
    preset Bounds = <0,114,94,189>;
    preset Bitmap = Resource::IconMediaPlayPause;
  }

  $rect <20,20,160,60>
  object Views::Image ControlDownBG
  {
    preset Bounds = <0,189,94,264>;
    preset Bitmap = Resource::ControlKeyBackground;
  }

  $rect <20,20,160,60>
  object Views::Image PreviousTrackButton
  {
    preset Bounds = <0,189,94,264>;
    preset Bitmap = Resource::IconMediaPrevious;
  }

  $rect <20,20,160,60>
  object Views::Image VolumeDownButton
  {
    preset Bounds = <0,189,94,264>;
    preset Bitmap = Resource::IconVolumeDown;
  }

  $rect <20,20,160,60>
  object Views::Image ControlUpBG
  {
    preset Bounds = <0,39,94,114>;
    preset Bitmap = Resource::ControlKeyBackground;
  }

  $rect <20,20,160,60>
  object Views::Image NextTrackButton
  {
    preset Bounds = <0,39,94,114>;
    preset Bitmap = Resource::IconMediaNext;
  }

  $rect <20,20,160,60>
  object Views::Image VolumeUpButton
  {
    preset Bounds = <0,39,94,114>;
    preset Bitmap = Resource::IconVolumeUp;
  }

  $rect <20,20,160,60>
  object WidgetSet::HorizontalSlider SeekBar
  {
    preset Bounds = <111,188,455,231>;
    preset Visible = false;
    preset CurrentValue = 0;
    preset Appearance = UIConfig::HorizontalSliderConfig;
  }

  $rect <540,510,730,550>
  object Core::Timer HighlightTimer
  {
    preset OnTrigger = OnHighlightEndSlot;
    preset Period = 100;
    preset Enabled = false;
  }

  $rect <740,510,1000,550>
  slot OnHighlightEndSlot
  {
    HighlightTimer.Enabled = false;
    HighlightBG.FrameNumber = 0;
  }

  $rect <1170,200,1370,240>
  method void StartHighlight( arg Views::Image aBackground )
  {
    aBackground.FrameNumber = 1;
    HighlightBG = aBackground;
    HighlightTimer.Enabled = true;
  }

  $rect <750,40,950,80>
  property Views::Image HighlightBG;

  // Variables
  note group Note9
  {
    attr Bounds = <520,0,1470,150>;
  }

  // Methods/Slots
  note group Note10
  {
    attr Bounds = <520,160,1460,390>;
  }

  // SystemEvents/Others
  note group Note11
  {
    attr Bounds = <520,420,1470,570>;
  }

  // TODO:
  // 1. Handle long pressing Home button.
  // 2. Reception error/success (BLE connected/disconnected).
  // 3. Volume control.
  note group Note12
  {
    attr Bounds = <20,290,480,450>;
  }
}

$rect <320,20,520,60>
$output false
class Track : Core::Group
{
  $rect <10,230,210,270>
  inherited property Bounds = <0,0,300,200>;

  $rect <370,10,570,50>
  property string Artist;

  $rect <370,50,570,90>
  property string Title;

  $rect <370,90,570,130>
  property string Album;

  $rect <590,10,820,50>
  property slot OnTrackInfoUpdate;

  $rect <10,310,210,350>
  method void ResetTrackInfo()
  {
    IsTrackInfoReset = true;
  }

  $rect <10,270,210,310>
  var bool IsTrackInfoReset = false;

  $rect <890,10,1090,50>
  object Core::PropertyObserver TitleObserver
  {
    preset OnEvent = OnTrackInfoUpdateSlot;
    preset Outlet = ^DeviceInterface::MediaManagerDevice.Title;
  }

  // This slot method is executed when the associated property observer 'PropertyObserver' \
  // is notified.
  $rect <1130,90,1450,130>
  slot OnTrackInfoUpdateSlot
  {
    if( !IsTrackInfoReset )
    {
      if( sender == TitleObserver )
      {
        Title = DeviceInterface::MediaManagerDevice.Title;
      }
      else if( sender == AlbumObserver)
      {
        Album = DeviceInterface::MediaManagerDevice.Album;
      }
      else if( sender == ArtistObserver )
      {
        Artist = DeviceInterface::MediaManagerDevice.Artist;
      }
      else if( sender == PlayStateObserver)
      {
        PlaybackState = DeviceInterface::MediaManagerDevice.PlaybackState;
      }
      postsignal OnTrackInfoUpdate;
    }
  }

  $rect <890,50,1090,90>
  object Core::PropertyObserver AlbumObserver
  {
    preset OnEvent = OnTrackInfoUpdateSlot;
    preset Outlet = ^DeviceInterface::MediaManagerDevice.Album;
  }

  $rect <890,90,1090,130>
  object Core::PropertyObserver ArtistObserver
  {
    preset OnEvent = OnTrackInfoUpdateSlot;
    preset Outlet = ^DeviceInterface::MediaManagerDevice.Artist;
  }

  $rect <370,240,570,280>
  property int32 RemainTimeSec = 0;

  $rect <370,200,570,240>
  property int32 ElapsedTimeSec;

  $rect <370,360,570,400>
  property int32 PlaybackState = 0;

  $rect <370,400,570,440>
  onset PlaybackState
  {
    // Remember the property's new value.
    pure PlaybackState = value;
  }

  $rect <890,130,1090,170>
  object Core::PropertyObserver PlayStateObserver
  {
    preset OnEvent = OnTrackInfoUpdateSlot;
    preset Outlet = ^DeviceInterface::MediaManagerDevice.PlaybackState;
  }
}
