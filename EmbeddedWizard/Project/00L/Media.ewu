$version 10.00

$rect <30,20,270,60>
$output false
class MED01_MediaUI : Components::BaseMainBG
{
  $rect <540,220,740,260>
  inherited method Init()
  {
    DeviceInterface::MediaManagerDevice.IsInit = true;
    DeviceInterface::MediaManagerDevice.GetPlaybackInfo();
    DeviceInterface::MediaManagerDevice.GetTrackInfo();
    DeviceInterface::MediaManagerDevice.IsInit = false;

    if( "" != DeviceInterface::MediaManagerDevice.Title &&
        Strings::GEN_THREE_HYPHENS != DeviceInterface::MediaManagerDevice.Title )
    {
      // Received music previously, update elapsed time & remain time.
      signal OnPlaybackTimeUpdateSlot;
    }
  }

  $rect <540,40,740,80>
  inherited property Bounds = <0,0,480,272>;

  $rect <1210,340,1410,380>
  inherited method OnShortDownKeyActivated()
  {
    if( Volume > Media::MIN_VOLUME_LEVEL )
    {
      StartHighlight( ControlDownBG );
      DeviceInterface::MediaManagerDevice.SendRemoteCommand( Enum::MusicControlType.VolumeDown );
    }
  }

  $rect <1230,280,1430,320>
  inherited method OnShortUpKeyActivated()
  {
    if( Volume < Media::MAX_VOLUME_LEVEL )
    {
      StartHighlight( ControlUpBG );
      DeviceInterface::MediaManagerDevice.SendRemoteCommand( Enum::MusicControlType.VolumeUp );
    }
  }

  $rect <980,280,1210,320>
  inherited method OnShortEnterKeyActivated()
  {
    StartHighlight( PlayPauseBG );
    postsignal OnPlayPauseSlot;
  }

  $rect <960,40,1160,80>
  inherited property UpKeyTriggerMode = Enum::KeyTriggerMode.OFF;

  $rect <1170,40,1370,80>
  inherited property DownKeyTriggerMode = Enum::KeyTriggerMode.OFF;

  $rect <750,280,980,320>
  inherited method OnLongDownKeyActivated()
  {
    StartHighlight( ControlDownBG );
    postsignal OnPrevTrackSlot;
  }

  $rect <540,280,750,320>
  inherited method OnLongUpKeyActivated()
  {
    StartHighlight( ControlUpBG );
    postsignal OnNextTrackSlot;
  }

  $rect <20,20,160,60>
  object Views::Text Title
  {
    preset Bounds = <127,65,457,103>;
    preset Ellipsis = true;
    preset Alignment = Views::TextAlignment[AlignHorzLeft, AlignVertCenter];
    preset String = "";
    preset Font = Fonts::NotoSansCjkJpMedium28pt;
    preset Visible = true;
  }

  $rect <20,20,160,60>
  object Views::Text Artist
  {
    preset Bounds = <127,110,457,148>;
    preset Ellipsis = true;
    preset Alignment = Views::TextAlignment[AlignHorzLeft, AlignVertCenter];
    preset String = "";
    preset Font = Fonts::NotoSansCjkJpMedium28pt;
    preset Visible = true;
  }

  $rect <20,20,160,60>
  object Views::Text Album
  {
    preset Bounds = <127,149,457,187>;
    preset Ellipsis = true;
    preset Alignment = Views::TextAlignment[AlignHorzLeft, AlignVertCenter];
    preset String = "";
    preset Font = Fonts::NotoSansCjkJpMedium28pt;
    preset Visible = false;
  }

  $rect <540,340,740,380>
  slot OnPlayPauseSlot
  {
    if( 0 == DeviceInterface::MediaManagerDevice.GetPlayBackStateInfo() )
    {
      DeviceInterface::MediaManagerDevice.SendRemoteCommand( Enum::MusicControlType.Play );
    }
    else
    {
      DeviceInterface::MediaManagerDevice.SendRemoteCommand( Enum::MusicControlType.Pause );
    }
  }

  $rect <750,340,950,380>
  slot OnPrevTrackSlot
  {
    ChangeTrack();
    DeviceInterface::MediaManagerDevice.SendRemoteCommand( Enum::MusicControlType.PrevTrack );
  }

  $rect <960,340,1160,380>
  slot OnNextTrackSlot
  {
    ChangeTrack();
    DeviceInterface::MediaManagerDevice.SendRemoteCommand( Enum::MusicControlType.NextTrack );
  }

  $rect <20,20,160,60>
  object Views::Text ElapsedTimeSec
  {
    preset Bounds = <127,225,204,255>;
    preset Alignment = Views::TextAlignment[AlignHorzLeft, AlignVertCenter];
    preset String = "";
    preset Font = Fonts::NotoSansMedium22pt;
    preset Visible = false;
  }

  $rect <20,20,160,60>
  object Views::Text TotalTimeSec
  {
    preset Bounds = <365,225,442,255>;
    preset Alignment = Views::TextAlignment[AlignHorzRight, AlignVertCenter];
    preset String = "";
    preset Font = Fonts::NotoSansMedium22pt;
    preset Visible = false;
  }

  $rect <750,220,950,260>
  method void ChangeTrack()
  {
    // Reset if next/previous track command is issued.
    DeviceInterface::MediaManagerDevice.IsTitleReceived = false;
    DeviceInterface::MediaManagerDevice.IsArtistReceived = false;
    DeviceInterface::MediaManagerDevice.IsAlbumReceived = false;
  }

  $rect <540,460,780,500>
  object Core::SystemEventHandler PlaybackTimeEventHandler
  {
    preset OnEvent = OnPlaybackTimeUpdateSlot;
    preset Event = DeviceInterface::MediaManagerDevice.NotifyPlayBackTimeChangedSystemEvent;
  }

  // This slot method is executed when the associated system event handler 'SystemEventHandler' \
  // receives an event.
  $rect <790,460,1060,500>
  slot OnPlaybackTimeUpdateSlot
  {
    if( !ElapsedTimeSec.Visible )
    {
      ElapsedTimeSec.Visible = true;
    }
    ElapsedTimeSec.String = FormatTimeText( DeviceInterface::MediaManagerDevice.ElapsedTimeSec );

    if( !TotalTimeSec.Visible )
    {
      TotalTimeSec.Visible = true;
    }
    TotalTimeSec.String = FormatTimeText( DeviceInterface::MediaManagerDevice.DurationTimeSec );

    if( 0 != DeviceInterface::MediaManagerDevice.DurationTimeSec )
    {
      if( !SeekBar.Visible )
      {
        SeekBar.Visible = true;
      }
      SeekBar.CurrentValue = ( DeviceInterface::MediaManagerDevice.ElapsedTimeSec * 100 ) / DeviceInterface::MediaManagerDevice.DurationTimeSec;
    }
  }

  $rect <960,220,1160,260>
  method string FormatTimeText( arg int32 TimeSec )
  {
    var int32 Hour = TimeSec / 3600;
    var int32 Minute = ( TimeSec / 60 ) % 60;
    var int32 Second = TimeSec % 60;
    var string TimeText = "";

    if( Hour > 0)
    {
      TimeText = string( Hour ) + ":";
      if( Minute < 10 )
      {
        TimeText = TimeText + "0";
      }
    }
    TimeText = TimeText + string( Minute ) + ":";
    if( Second < 10 )
    {
      TimeText = TimeText + "0";
    }
    TimeText = TimeText + string( Second );
    return TimeText;
  }

  $rect <20,20,160,60>
  object Views::Image PlayPauseBG
  {
    preset Bounds = <0,114,94,189>;
    preset FrameNumber = 0;
    preset Bitmap = Resource::ControlKeyBackground;
  }

  $rect <20,20,160,60>
  object Views::Image PlayPauseButton
  {
    preset Bounds = <0,114,94,189>;
    preset Bitmap = Resource::IconMediaPlayPause;
  }

  $rect <20,20,160,60>
  object Views::Image ControlDownBG
  {
    preset Bounds = <0,189,94,264>;
    preset Bitmap = Resource::ControlKeyBackground;
  }

  $rect <20,20,160,60>
  object Views::Image PreviousTrackButton
  {
    preset Bounds = <0,189,94,264>;
    preset Bitmap = Resource::IconMediaPrevious;
  }

  $rect <20,20,160,60>
  object Views::Image VolumeDownButton
  {
    preset Bounds = <0,189,94,264>;
    preset Bitmap = Resource::IconVolumeDown;
  }

  $rect <20,20,160,60>
  object Views::Image ControlUpBG
  {
    preset Bounds = <0,39,94,114>;
    preset Bitmap = Resource::ControlKeyBackground;
  }

  $rect <20,20,160,60>
  object Views::Image NextTrackButton
  {
    preset Bounds = <0,39,94,114>;
    preset Bitmap = Resource::IconMediaNext;
  }

  $rect <20,20,160,60>
  object Views::Image VolumeUpButton
  {
    preset Bounds = <0,39,94,114>;
    preset Bitmap = Resource::IconVolumeUp;
  }

  $rect <540,510,730,550>
  object Core::Timer HighlightTimer
  {
    preset OnTrigger = OnHighlightEndSlot;
    preset Period = 100;
    preset Enabled = false;
  }

  $rect <780,510,1040,550>
  slot OnHighlightEndSlot
  {
    HighlightTimer.Enabled = false;
    HighlightBG.FrameNumber = 0;
  }

  $rect <1170,220,1370,260>
  method void StartHighlight( arg Views::Image aBackground )
  {
    aBackground.FrameNumber = 1;
    HighlightBG = aBackground;
    HighlightTimer.Enabled = true;
  }

  $rect <750,40,950,80>
  property Views::Image HighlightBG;

  // Variables
  note group Note9
  {
    attr Bounds = <520,0,1470,170>;
  }

  // Methods/Slots
  note group Note10
  {
    attr Bounds = <520,180,1460,410>;
  }

  // SystemEvents/Others
  note group Note11
  {
    attr Bounds = <520,420,1460,1000>;
  }

  // TODO:
  // 1. Volume control.
  note group Note12
  {
    attr Bounds = <20,290,480,370>;
  }

  $rect <540,560,740,600>
  object Core::PropertyObserver TitleObserver
  {
    preset OnEvent = OnTrackInfoUpdateSlot;
    preset Outlet = ^DeviceInterface::MediaManagerDevice.Title;
  }

  // This slot method is executed when the associated property observer 'PropertyObserver' \
  // is notified.
  $rect <770,560,1020,600>
  slot OnTrackInfoUpdateSlot
  {
    // Music info could be varied, some songs only have title, but have no album & artist name.
    // Moreover, we found a possibility that not all observers will be triggered (for example, only receive song title).
    // Therefore, we have to update title, album and artist together when one of observers is triggered in order to assign
    // "---" to album and artist text view when there is no album and artist information.
    if( !Title.Visible )
    {
      Title.Visible = true;
    }
    Title.String = DeviceInterface::MediaManagerDevice.Title;

    // If music data doesn't have song title information, LC shall display "---".
    if( Title.String == "" )
    {
      Title.String = Strings::GEN_THREE_HYPHENS;
    }

    if( !Album.Visible )
    {
      Album.Visible = true;
    }
    Album.String = DeviceInterface::MediaManagerDevice.Album;

    // If music data doesn't have album information, LC shall display "---".
    if( Album.String  == "" )
    {
      Album.String = Strings::GEN_THREE_HYPHENS;
    }

    if( !Artist.Visible )
    {
      Artist.Visible = true;
    }
    Artist.String = DeviceInterface::MediaManagerDevice.Artist;

    // If music data doesn't have artist information, LC shall display "---".
    if( Artist.String == "" )
    {
      Artist.String = Strings::GEN_THREE_HYPHENS;
    }

    if( Title.String == Strings::GEN_THREE_HYPHENS &&
        Album.String == Strings::GEN_THREE_HYPHENS &&
        Artist.String == Strings::GEN_THREE_HYPHENS )
    {
      // Detect music data is failed
      UpdateMediaInfoItem( Enum::ReceptionStatus.ERROR );
    }
    else
    {
      if( ErrorMessage.Visible )
      {
        ErrorMessage.Visible = false;
      }
    }
  }

  $rect <540,600,740,640>
  object Core::PropertyObserver AlbumObserver
  {
    preset OnEvent = OnTrackInfoUpdateSlot;
    preset Outlet = ^DeviceInterface::MediaManagerDevice.Album;
  }

  $rect <540,640,740,680>
  object Core::PropertyObserver ArtistObserver
  {
    preset OnEvent = OnTrackInfoUpdateSlot;
    preset Outlet = ^DeviceInterface::MediaManagerDevice.Artist;
  }

  $rect <20,20,160,60>
  object WidgetSet::HorizontalSlider SeekBar
  {
    preset Bounds = <111,188,455,231>;
    preset Visible = false;
    preset CurrentValue = 0;
    preset Appearance = UIConfig::HorizontalSliderConfig;
  }

  $rect <540,690,740,730>
  object Core::SystemEventHandler MotoConMusicInfoEventHandler
  {
    preset OnEvent = OnMotoConMusicInfoUpdateSlot;
    preset Event = DeviceInterface::MediaManagerDevice.NotifyMotoConMusicUpdatedSystemEvent;
  }

  // This slot method is executed when the associated system event handler 'SystemEventHandler' \
  // receives an event.
  $rect <750,690,990,730>
  slot OnMotoConMusicInfoUpdateSlot
  {
    DeviceInterface::MediaManagerDevice.GetPlaybackInfo();
    DeviceInterface::MediaManagerDevice.GetTrackInfo();

    if( "" != DeviceInterface::MediaManagerDevice.Title &&
        Strings::GEN_THREE_HYPHENS != DeviceInterface::MediaManagerDevice.Title )
    {
      // Received music previously, update elapsed time & remain time.
      signal OnPlaybackTimeUpdateSlot;
    }

  }

  $rect <20,20,160,60>
  object Views::Text ErrorMessage
  {
    preset Bounds = <117,105,447,173>;
    preset String = Strings::MED02_DEV_UNAVAILABLE;
    preset Font = Fonts::NotoSansCjkJpMedium28pt;
    preset Visible = false;
  }

  $rect <540,740,730,780>
  object Core::SystemEventHandler MotoConEventHandler
  {
    preset OnEvent = OnMotoConEventReceived;
    preset Event = DeviceInterface::BluetoothDevice.MotoConSystemEvent;
  }

  // This slot method is executed when the associated system event handler 'SystemEventHandler' \
  // receives an event.
  $rect <750,740,990,780>
  slot OnMotoConEventReceived
  {
    var DeviceInterface::MotoConContext MotoConContext = ( DeviceInterface::MotoConContext )MotoConEventHandler.Context;
    if( Enum::MotoConRxEvent.CONNECTION_STATUS == MotoConContext.RxEvent )
    {
      if( !DeviceInterface::BluetoothDevice.IsMotoconConnected() )
      {
        UpdateMediaInfoItem( Enum::ReceptionStatus.ERROR );
      }
      else
      {
        BleConnectionRecoveryTimer.Enabled = true;
      }
    }
  }

  $rect <540,860,730,900>
  object Core::Timer BleConnectionRecoveryTimer
  {
    preset OnTrigger = OnBleConnectionRecoverSlot;
    preset Period = 5000;
  }

  $rect <750,860,950,900>
  slot OnBleConnectionRecoverSlot
  {
    BleConnectionRecoveryTimer.Enabled = false;
    UpdateMediaInfoItem( Enum::ReceptionStatus.SUCCESS );
  }

  $rect <540,800,740,840>
  object Core::SystemEventHandler AmsBleConnectionEventHandler
  {
    preset OnEvent = OnAmsBleConnectedStatusUpdateSlot;
    preset Event = DeviceInterface::MediaManagerDevice.NotifyAmsBleConnectedStatusSystemEvent;
  }

  // This slot method is executed when the associated system event handler 'SystemEventHandler' \
  // receives an event.
  $rect <750,800,980,840>
  slot OnAmsBleConnectedStatusUpdateSlot
  {
    if( !DeviceInterface::MediaManagerDevice.IsAmsConnected() )
    {
      UpdateMediaInfoItem( Enum::ReceptionStatus.ERROR );
    }
    else
    {
      // Reception success, wait for 5 seconds and then present music info.
      BleConnectionRecoveryTimer.Enabled = true; 
    }
  }

  $rect <1010,740,1210,780>
  method void UpdateMediaInfoItem( arg Enum::ReceptionStatus aNewStatus )
  {
    switch( aNewStatus )
    {
      case Enum::ReceptionStatus.SUCCESS:
      {
        // Reception success, present music info and hide error message.
        Title.Visible = true;
        Album.Visible = true;
        Artist.Visible = true;
        ElapsedTimeSec.Visible = true;
        TotalTimeSec.Visible = true;
        SeekBar.Visible = true;
        ErrorMessage.Visible = false;
      }
      case Enum::ReceptionStatus.ERROR:
      {
        // Reception error, hide music info and display error message.
        Title.Visible = false;
        Album.Visible = false;
        Artist.Visible = false;
        ElapsedTimeSec.Visible = false;
        TotalTimeSec.Visible = false;
        SeekBar.Visible = false;
        ErrorMessage.Visible = true;
      }
      default:;
    }
  }

  $rect <540,90,740,130>
  property float Volume;

  $rect <540,130,740,170>
  onset Volume
  {
    pure Volume = value;

    if( Volume >= Media::MAX_VOLUME_LEVEL )
    {
      VolumeUpButton.FrameNumber = 1;
    }
    else if( Volume <= Media::MIN_VOLUME_LEVEL )
    {
      VolumeDownButton.FrameNumber = 1;
    }
    else
    {
      VolumeUpButton.FrameNumber = 0;
      VolumeDownButton.FrameNumber = 0;
    }

  }

  $rect <540,910,740,950>
  object Core::SystemEventHandler MediaVolumeUpdateEventHandler
  {
    preset OnEvent = OnVolumeUpdateSlot;
    preset Event = DeviceInterface::MediaManagerDevice.NotifyMediaVolumeUpdateSystemEvent;
  }

  // This slot method is executed when the associated system event handler 'SystemEventHandler' \
  // receives an event.
  $rect <740,910,940,950>
  slot OnVolumeUpdateSlot
  {
    Volume = DeviceInterface::MediaManagerDevice.GetVolume();
  }
}

$rect <30,80,230,120>
$output false
const float MAX_VOLUME_LEVEL = 1.0;

$rect <30,130,230,170>
$output false
const float MIN_VOLUME_LEVEL = 0.0;
