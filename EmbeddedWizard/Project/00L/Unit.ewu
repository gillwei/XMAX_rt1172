$version 10.00

$rect <50,30,250,70>
$output false
class UNT01_UnitSettingMenu : Menu::BaseMenuView
{
  $rect <240,290,440,330>
  inherited method Init()
  {
    var int32 NoOfItems = 3;
    var int32 ItemIdx = 2;
    var int32 i;

    if( PressureEnabled )
    {
      NoOfItems++;
      PressureMenu = new Unit::UNT04_PressureSettingMenu;
    }

    if( NoOfItems < ItemTitleArray.size )
    {
      ItemVehicleRxTypeArray[ItemIdx] = ItemVehicleRxTypeArray[( int32 )Enum::UnitSettingItem.TEMPERATURE];
    }

    Menu.NoOfItems = NoOfItems;

    var DeviceInterface::VehicleDataClass VehicleData;
    UnitItemValue = new Unit::UnitValueClass;
    MileageMenu = new Unit::UNT02_MileageSettingMenu;
    FuelMenu = new Unit::UNT03_FuelSettingMenu;
    TempMenu = new Unit::UNT05_TemperatureSettingMenu;

    for( i = 0; i < NoOfItems; i++ )
    {
      VehicleData = DeviceInterface::VehicleDevice.GetData( ItemVehicleRxTypeArray[i] );
      switch( ItemVehicleRxTypeArray[i] )
      {
        case Enum::VehicleRxType.MILEAGE_UNIT:
        {
          if( UnitItemValue.ItemMileageUnitArray.size > ( int32 )VehicleData.DataUInt32 )
          {
            IsFuelEnabled = true;
            if( ( int32 )VehicleData.DataUInt32 == ( int32 )Enum::MileageSettingItem.MILE )
            {
              IsFuelEnabled = false;
            }

            ItemValueArray[i] = UnitItemValue.ItemMileageUnitArray[( int32 )VehicleData.DataUInt32];
            MileageMenu.ItemCheckedArray[( int32 )VehicleData.DataUInt32] = true;
          }
        }
        case Enum::VehicleRxType.FUEL_CONSUMPTION_UNIT:
        {
          if( !IsFuelEnabled )
          {
            ItemValueArray[i] = UnitItemValue.ItemFuelUnitArray[( int32 )Enum::FuelSettingItem.MPG];
            FuelMenu.ItemCheckedArray[( int32 )Enum::FuelSettingItem.MPG] = true;
          }
          else
          {
            switch( VehicleData.DataUInt32 )
            {
              case 0:
              {
                ItemValueArray[i] = UnitItemValue.ItemFuelUnitArray[( int32 )Enum::FuelSettingItem.KM_L];
                FuelMenu.ItemCheckedArray[( int32 )Enum::FuelSettingItem.KM_L] = true;
                FuelMenu.FuelItemIdx = ( int32 )Enum::FuelSettingItem.KM_L;
              }
              case 1:
              {
                ItemValueArray[i] = UnitItemValue.ItemFuelUnitArray[( int32 )Enum::FuelSettingItem.MPG];
                FuelMenu.ItemCheckedArray[( int32 )Enum::FuelSettingItem.MPG] = true;
                FuelMenu.FuelItemIdx = ( int32 )Enum::FuelSettingItem.MPG;
              }
              case 2:
              {
                ItemValueArray[i] = UnitItemValue.ItemFuelUnitArray[( int32 )Enum::FuelSettingItem.MPG];
                FuelMenu.ItemCheckedArray[( int32 )Enum::FuelSettingItem.MPG] = true;
                FuelMenu.FuelItemIdx = ( int32 )Enum::FuelSettingItem.MPG;
              }
              case 3:
              {
                ItemValueArray[i] = UnitItemValue.ItemFuelUnitArray[( int32 )Enum::FuelSettingItem.L_PER_HUNDRED_KM];
                FuelMenu.ItemCheckedArray[( int32 )Enum::FuelSettingItem.L_PER_HUNDRED_KM] = true;
                FuelMenu.FuelItemIdx = ( int32 )Enum::FuelSettingItem.L_PER_HUNDRED_KM;
              }
              default:;
            }
          }
        }
        case Enum::VehicleRxType.PRESSURE_UNIT:
        {
          if( UnitItemValue.ItemPressureUnitArray.size > ( int32 )VehicleData.DataUInt32 )
          {
            ItemValueArray[i] = UnitItemValue.ItemPressureUnitArray[( int32 )VehicleData.DataUInt32];
            PressureMenu.ItemCheckedArray[( int32 )VehicleData.DataUInt32] = true;
          }
        }
        case Enum::VehicleRxType.TEMPERATURE_UNIT:
        {
          if( UnitItemValue.ItemTemperatureUnitArray.size > ( int32 )VehicleData.DataUInt32 )
          {
            ItemValueArray[i] = UnitItemValue.ItemTemperatureUnitArray[( int32 )VehicleData.DataUInt32];
            TempMenu.ItemCheckedArray[( int32 )VehicleData.DataUInt32] = true;
          }
        }
        default:;
      }
    }
  }

  $rect <10,290,210,330>
  inherited property Bounds = <0,0,480,272>;

  $rect <220,450,420,490>
  inherited property DDModeEnabled = true;

  $rect <220,350,420,390>
  inherited var SlideOutEffectEnabled = true;

  $rect <520,30,720,70>
  inherited method LoadItemClass()
  {
    // suppress warning
    if( aItemNo )
    {
      // empty body
    }
    return Menu::ItemUnitValue;
  }

  $rect <520,80,720,120>
  inherited method LoadItemTitle()
  {
    var string title = "";
    switch( ItemVehicleRxTypeArray[aItemNo] )
    {
      case Enum::VehicleRxType.MILEAGE_UNIT: title = Strings::UNT01_unit_mileage;
      case Enum::VehicleRxType.FUEL_CONSUMPTION_UNIT: title = Strings::UNT01_unit_fuel;
      case Enum::VehicleRxType.PRESSURE_UNIT: title = Strings::UNT01_unit_pressure;
      case Enum::VehicleRxType.TEMPERATURE_UNIT: title = Strings::UNT01_unit_temperature;
      default:;
    }
    return title;
  }

  $rect <520,270,720,310>
  inherited method OnItemActivate()
  {
    if( null == aMenuItem )
    {
      // empty body to suppress warning
    }

    switch( ItemVehicleRxTypeArray[aItemNo] )
    {
      case Enum::VehicleRxType.MILEAGE_UNIT:
      {
        if( null != MileageMenu )
        {
          MileageMenu.MileageUpdateSignal = OnUnitValueUpdateSlot;
          SlideInDialog( MileageMenu );
        }
      }
      case Enum::VehicleRxType.FUEL_CONSUMPTION_UNIT:
      {
        if( null != FuelMenu )
        {
          FuelMenu.FuelUpdateSignal = OnUnitValueUpdateSlot;
          if( MileageMenu.MileageItemIdx == ( int32 )Enum::MileageSettingItem.KM )
          {
            FuelMenu.ItemEnabledArray[( int32 )Enum::FuelSettingItem.KM_L] = true;
            FuelMenu.ItemEnabledArray[( int32 )Enum::FuelSettingItem.MPG] = false;
            FuelMenu.ItemEnabledArray[( int32 )Enum::FuelSettingItem.L_PER_HUNDRED_KM] = true;
          }
          else
          {
            FuelMenu.ItemEnabledArray[( int32 )Enum::FuelSettingItem.KM_L] = false;
            FuelMenu.ItemEnabledArray[( int32 )Enum::FuelSettingItem.MPG] = true;
            FuelMenu.ItemEnabledArray[( int32 )Enum::FuelSettingItem.L_PER_HUNDRED_KM] = false;
          }

          FuelMenu.Menu.InvalidateItems( ( int32 )Enum::FuelSettingItem.KM_L, ( int32 )Enum::FuelSettingItem.L_PER_HUNDRED_KM );
          SlideInDialog( FuelMenu );
        }
      }
      case Enum::VehicleRxType.PRESSURE_UNIT:
      {
        if( null != PressureMenu )
        {
          PressureMenu.PressureUpdateSignal = OnUnitValueUpdateSlot;
          SlideInDialog( PressureMenu );
        }
      }
      case Enum::VehicleRxType.TEMPERATURE_UNIT:
      {
        if( null != TempMenu )
        {
          TempMenu.TempUpdateSignal = OnUnitValueUpdateSlot;
          SlideInDialog( TempMenu );
        }
      }
      default :;
    }
  }

  $rect <520,210,720,250>
  inherited method LoadItemEnabled()
  {
    var bool ItemEnabled = true;
    if( aItemNo == ( int32 )Enum::UnitSettingItem.FUEL )
    {
      ItemEnabled = IsFuelEnabled;
    }
    return ItemEnabled;
  }

  $rect <20,20,160,60>
  inherited object Menu
  {
    preset NoOfItems = 4;
    preset ItemHeight = Menu::ItemHeightSmall;
    preset ItemNumPerPage = 4;
  }

  $rect <520,140,720,180>
  inherited method LoadItemUnitValue()
  {
    var string val = "";
    if( aItemNo < ItemValueArray.size )
    {
      val = ItemValueArray[aItemNo];
    }
    return val;
  }

  $rect <760,30,960,70>
  array string ItemTitleArray[ 4 ] =
  (
    Default[0] = Strings::UNT01_unit_mileage;
    Default[1] = Strings::UNT01_unit_fuel;
    Default[2] = Strings::UNT01_unit_pressure;
    Default[3] = Strings::UNT01_unit_temperature;
  );

  $rect <760,80,960,120>
  array Enum::VehicleRxType ItemVehicleRxTypeArray[ 4 ] =
  (
    Default[0] = Enum::VehicleRxType.MILEAGE_UNIT;
    Default[1] = Enum::VehicleRxType.FUEL_CONSUMPTION_UNIT;
    Default[2] = Enum::VehicleRxType.PRESSURE_UNIT;
    Default[3] = Enum::VehicleRxType.TEMPERATURE_UNIT;
  );

  $rect <760,130,960,170>
  array string ItemValueArray[ 4 ];

  $rect <10,350,210,390>
  var Unit::UnitValueClass UnitItemValue;

  $rect <520,330,720,370>
  slot OnUnitValueUpdateSlot
  {
    if( sender == MileageMenu )
    {
      IsFuelEnabled = true;
      ItemValueArray[( int32 )Enum::UnitSettingItem.MILEAGE] = UnitItemValue.ItemMileageUnitArray[MileageMenu.MileageItemIdx];
      DeviceInterface::VehicleDevice.SetData( Enum::VehicleTxType.MILEAGE_UNIT, ( uint32 )MileageMenu.MileageItemIdx );
      if( MileageMenu.MileageItemIdx == ( int32 )Enum::MileageSettingItem.MILE )
      {
        ItemValueArray[( int32 )Enum::UnitSettingItem.FUEL] = UnitItemValue.ItemFuelUnitArray[( int32 )Enum::FuelSettingItem.MPG];
        IsFuelEnabled = false;
      }
      else
      {
        ItemValueArray[( int32 )Enum::UnitSettingItem.FUEL] = UnitItemValue.ItemFuelUnitArray[FuelMenu.FuelItemIdx];
      }
    }
    else if( sender == FuelMenu )
    {
      ItemValueArray[( int32 )Enum::UnitSettingItem.FUEL] = UnitItemValue.ItemFuelUnitArray[FuelMenu.FuelItemIdx];
      DeviceInterface::VehicleDevice.SetData( Enum::VehicleTxType.FUEL_CONSUMPTION_UNIT, ( uint32 )FuelMenu.FuelItemIdx );
    }
    else if( sender == PressureMenu )
    {
      ItemValueArray[( int32 )Enum::UnitSettingItem.PRESSURE] = UnitItemValue.ItemPressureUnitArray[PressureMenu.PressureItemIdx];
      DeviceInterface::VehicleDevice.SetData( Enum::VehicleTxType.PRESSURE_UNIT, ( uint32 )PressureMenu.PressureItemIdx );
    }
    else if( sender == TempMenu )
    {
      if( PressureEnabled )
      {
        ItemValueArray[( int32 )Enum::UnitSettingItem.TEMPERATURE] = UnitItemValue.ItemTemperatureUnitArray[TempMenu.TempItemIdx];
      }
      else
      {
        // If vehicle doesn't support pressure function, the pressure option is hidden and temperature option is moved up to
        // the position of pressure option. Therefore, minus 1 to match the correct index of temperature option.
        ItemValueArray[( int32 )Enum::UnitSettingItem.TEMPERATURE - 1] = UnitItemValue.ItemTemperatureUnitArray[TempMenu.TempItemIdx];
      }

      DeviceInterface::VehicleDevice.SetData( Enum::VehicleTxType.TEMPERATURE_UNIT, ( uint32 )TempMenu.TempItemIdx );
    }

    if( PressureEnabled )
    {
      Menu.InvalidateItems( ( int32 )Enum::UnitSettingItem.MILEAGE, ( int32 )Enum::UnitSettingItem.TEMPERATURE );
    }
    else
    {
      Menu.InvalidateItems( ( int32 )Enum::UnitSettingItem.MILEAGE, ( int32 )Enum::UnitSettingItem.TEMPERATURE - 1 );
    }
  }

  $rect <10,400,210,440>
  var Unit::UNT02_MileageSettingMenu MileageMenu;

  $rect <10,450,210,490>
  var Unit::UNT03_FuelSettingMenu FuelMenu;

  $rect <10,500,210,540>
  var Unit::UNT04_PressureSettingMenu PressureMenu;

  $rect <220,400,420,440>
  var Unit::UNT05_TemperatureSettingMenu TempMenu;

  $rect <760,190,960,230>
  var bool IsFuelEnabled = true;

  $rect <760,280,960,320>
  property bool PressureEnabled;

  $rect <760,320,960,360>
  onget PressureEnabled
  {
    return DeviceInterface::VehicleDevice.IsVehicleFunctionSupported( Enum::VehicleSupportedFunction.TIRE_FRONT ) ||
           DeviceInterface::VehicleDevice.IsVehicleFunctionSupported( Enum::VehicleSupportedFunction.TIRE_FRONT_LEFT ) ||
           DeviceInterface::VehicleDevice.IsVehicleFunctionSupported( Enum::VehicleSupportedFunction.TIRE_FRONT_RIGHT ) ||
           DeviceInterface::VehicleDevice.IsVehicleFunctionSupported( Enum::VehicleSupportedFunction.TIRE_REAR );
  }
}

$rect <270,30,470,70>
$output false
class UNT02_MileageSettingMenu : Menu::BaseMenuView
{
  $rect <0,300,200,340>
  inherited property Bounds = <0,0,480,272>;

  $rect <0,370,200,410>
  inherited property DDModeEnabled = true;

  $rect <230,370,430,410>
  inherited var SlideOutEffectEnabled = true;

  $rect <520,40,720,80>
  inherited method LoadItemClass()
  {
    var class ItemClass = null;
    if( aItemNo >= 0 )
    {
      ItemClass = Menu::ItemCheckMark;
    }
    return ItemClass;
  }

  $rect <520,90,720,130>
  inherited method LoadItemTitle()
  {
    var string title = "";
    if( aItemNo < ItemTitleArray.size )
      {
      title = ItemTitleArray[aItemNo];
      }
    return title;
  }

  $rect <520,250,720,290>
  inherited method OnItemActivate()
  {
    if( null == aMenuItem )
    {
      // empty body to suppress warning
    }

    MileageItemIdx = aItemNo;
    if( ItemCheckedArray[aItemNo] )
    {
      signal OnCheckMarkUpdateSlot;
    }
    else
    {
      var int32 i = 0;
      for( i = 0; i < ItemCheckedArray.size; i++ )
      {
        if( i == aItemNo )
        {
          ItemCheckedArray[i] = true;
        }
        else
        {
          ItemCheckedArray[i] = false;
        }
      }

      Menu.InvalidateItems( ( int32 )Enum::MileageSettingItem.KM, ( int32 )Enum::MileageSettingItem.MILE );
      CheckMarkUpdateTimer.Enabled = true;
    }
  }

  $rect <520,140,720,180>
  inherited method LoadItemChecked()
  {
    var bool IsChecked = false;
    if( aItemNo < ItemCheckedArray.size )
    {
      IsChecked = ItemCheckedArray[aItemNo];
    }
    return IsChecked;
  }

  $rect <20,20,160,60>
  inherited object Menu
  {
    preset NoOfItems = 2;
    preset ItemNumPerPage = 2;
  }

  $rect <780,50,980,90>
  array string ItemTitleArray[ 2 ] =
  (
    Default[0] = Strings::UNT02_unit_mileage_kilometer;
    Default[1] = Strings::UNT02_unit_mileage_mile;
  );

  $rect <780,110,980,150>
  array bool ItemCheckedArray[ 2 ] =
  (
    Default[0] = ;
    Default[1] = ;
  );

  $rect <770,200,1000,240>
  object Core::Timer CheckMarkUpdateTimer
  {
    preset OnTrigger = OnCheckMarkUpdateSlot;
    preset Period = 450;
  }

  $rect <770,240,1000,280>
  slot OnCheckMarkUpdateSlot
  {
    CheckMarkUpdateTimer.Enabled = false;
    signal MileageUpdateSignal;
    Menu.MenuList.SelectedItem = 0;
    Menu.MoveFocusFrame();
    OnShortHomeKeyActivated();
  }

  $rect <1000,50,1200,90>
  var int32 MileageItemIdx;

  $rect <230,300,430,340>
  property slot MileageUpdateSignal;
}

$rect <50,80,250,120>
$output false
class UnitValueClass
{
  $rect <200,30,400,70>
  array string ItemMileageUnitArray[ 2 ] =
  (
    Default[0] = Strings::UNT02_unit_mileage_kilometer;
    Default[1] = Strings::UNT02_unit_mileage_mile;
  );

  $rect <200,80,400,120>
  array string ItemFuelUnitArray[ 3 ] =
  (
    Default[0] = Strings::UNT03_unit_fuel_km_per_liter;
    Default[1] = Strings::UNT03_unit_fuel_mile_per_gallon;
    Default[2] = Strings::UNT03_unit_fuel_liter_per_hundred_km;
  );

  $rect <200,130,400,170>
  array string ItemPressureUnitArray[ 3 ] =
  (
    Default[0] = Strings::UNT04_unit_pressure_psi;
    Default[1] = Strings::UNT04_unit_pressure_kpa;
    Default[2] = Strings::UNT04_unit_pressure_kgf;
  );

  $rect <200,180,400,220>
  array string ItemTemperatureUnitArray[ 2 ] =
  (
    Default[0] = Strings::UNT05_unit_temperature_c;
    Default[1] = Strings::UNT05_unit_temperature_f;
  );
}

$rect <490,30,690,70>
$output false
class UNT03_FuelSettingMenu : Menu::BaseMenuView
{
  $rect <10,280,210,320>
  inherited property Bounds = <0,0,480,272>;

  $rect <10,350,210,390>
  inherited property DDModeEnabled = true;

  $rect <240,350,440,390>
  inherited var SlideOutEffectEnabled = true;

  $rect <520,20,720,60>
  inherited method LoadItemClass()
  {
    var class ItemClass = null;
    if( aItemNo >= 0 )
    {
      ItemClass = Menu::ItemCheckMark;
    }
    return ItemClass;
  }

  $rect <520,70,720,110>
  inherited method LoadItemTitle()
  {
    var string title = "";
    if( aItemNo < ItemTitleArray.size )
      {
      title = ItemTitleArray[aItemNo];
      }
    return title;
  }

  $rect <520,220,720,260>
  inherited method OnItemActivate()
  {
    if( null == aMenuItem )
    {
      // empty body to suppress warning
    }

    switch( aItemNo )
    {
     case 0: FuelItemIdx = ( int32 ) Enum::FuelSettingItem.KM_L;
     case 1: FuelItemIdx = ( int32 ) Enum::FuelSettingItem.L_PER_HUNDRED_KM;
     case 2: FuelItemIdx = ( int32 ) Enum::FuelSettingItem.MPG;
     default:;
    }

    if( ItemCheckedArray[FuelItemIdx] )
    {
      signal OnCheckMarkUpdateSlot;
    }
    else
    {
      var int32 i = 0;
      for( i = 0; i < ItemCheckedArray.size; i++ )
      {
        if( i == FuelItemIdx )
        {
          ItemCheckedArray[i] = true;
        }
        else
        {
          ItemCheckedArray[i] = false;
        }
      }

      Menu.InvalidateItems( ( int32 )Enum::FuelSettingItem.KM_L, ( int32 )Enum::FuelSettingItem.L_PER_HUNDRED_KM );
      CheckMarkUpdateTimer.Enabled = true;
    }
  }

  $rect <520,120,720,160>
  inherited method LoadItemChecked()
  {
    var bool IsChecked = false;
    switch( aItemNo )
    {
     case 0: IsChecked = ItemCheckedArray[( int32 ) Enum::FuelSettingItem.KM_L];
     case 1: IsChecked = ItemCheckedArray[( int32 ) Enum::FuelSettingItem.L_PER_HUNDRED_KM];
     case 2: IsChecked = ItemCheckedArray[( int32 ) Enum::FuelSettingItem.MPG];
     default:;
    }
    return IsChecked;
  }

  $rect <520,170,720,210>
  inherited method LoadItemEnabled()
  {
    var bool ItemEnabled = true;
    switch( aItemNo )
    {
      case 0: ItemEnabled = ItemEnabledArray[( int32 )Enum::FuelSettingItem.KM_L];
      case 1: ItemEnabled = ItemEnabledArray[( int32 )Enum::FuelSettingItem.L_PER_HUNDRED_KM];
      case 2: ItemEnabled = ItemEnabledArray[( int32 )Enum::FuelSettingItem.MPG];
      default:;
    }
    return ItemEnabled;
  }

  $rect <20,20,160,60>
  inherited object Menu
  {
    preset NoOfItems = 3;
  }

  $rect <750,70,950,110>
  array bool ItemCheckedArray[ 3 ] =
  (
    Default[0] = ;
    Default[1] = ;
    Default[2] = ;
  );

  $rect <750,20,950,60>
  array string ItemTitleArray[ 3 ] =
  (
    Default[0] = Strings::UNT03_unit_fuel_km_per_liter;
    Default[1] = Strings::UNT03_unit_fuel_liter_per_hundred_km;
    Default[2] = Strings::UNT03_unit_fuel_mile_per_gallon;
  );

  $rect <970,20,1170,60>
  var int32 FuelItemIdx;

  $rect <770,200,1000,240>
  object Core::Timer CheckMarkUpdateTimer
  {
    preset OnTrigger = OnCheckMarkUpdateSlot;
    preset Period = 450;
  }

  $rect <770,240,1000,280>
  slot OnCheckMarkUpdateSlot
  {
    CheckMarkUpdateTimer.Enabled = false;
    signal FuelUpdateSignal;
    Menu.MenuList.SelectedItem = 0;
    Menu.MoveFocusFrame();
    OnShortHomeKeyActivated();
  }

  $rect <240,290,440,330>
  property slot FuelUpdateSignal;

  $rect <750,130,950,170>
  array bool ItemEnabledArray[ 3 ];
}

$rect <270,80,470,120>
$output false
class UNT04_PressureSettingMenu : Menu::BaseMenuView
{
  $rect <0,280,200,320>
  inherited property Bounds = <0,0,480,272>;

  $rect <10,350,210,390>
  inherited property DDModeEnabled = true;

  $rect <230,350,430,390>
  inherited var SlideOutEffectEnabled = true;

  $rect <520,150,720,190>
  inherited method LoadItemClass()
  {
    var class ItemClass = null;
    if( aItemNo >= 0 )
    {
      ItemClass = Menu::ItemCheckMark;
    }
    return ItemClass;
  }

  $rect <520,50,720,90>
  inherited method LoadItemTitle()
  {
    var string title = "";
    if( aItemNo < ItemTitleArray.size )
      {
      title = ItemTitleArray[aItemNo];
      }
    return title;
  }

  $rect <520,200,720,240>
  inherited method OnItemActivate()
  {
    if( null == aMenuItem )
    {
      // empty body to suppress warning
    }

    switch( aItemNo )
    {
     case 0: PressureItemIdx = ( int32 ) Enum::PressureSettingItem.KPA;
     case 1: PressureItemIdx = ( int32 ) Enum::PressureSettingItem.PSI;
     case 2: PressureItemIdx = ( int32 ) Enum::PressureSettingItem.KGF;
     default:;
    }

    if( ItemCheckedArray[PressureItemIdx] )
    {
      signal OnCheckMarkUpdateSlot;
    }
    else
    {
      var int32 i = 0;
      for( i = 0; i < ItemCheckedArray.size; i++ )
      {
        if( i == PressureItemIdx )
        {
          ItemCheckedArray[i] = true;
        }
        else
        {
          ItemCheckedArray[i] = false;
        }
      }

      Menu.InvalidateItems( ( int32 )Enum::PressureSettingItem.PSI, ( int32 )Enum::PressureSettingItem.KGF );
      CheckMarkUpdateTimer.Enabled = true;
    }
  }

  $rect <520,100,720,140>
  inherited method LoadItemChecked()
  {
    var bool IsChecked = false;
    switch( aItemNo )
    {
     case 0: IsChecked = ItemCheckedArray[( int32 ) Enum::PressureSettingItem.KPA];
     case 1: IsChecked = ItemCheckedArray[( int32 ) Enum::PressureSettingItem.PSI];
     case 2: IsChecked = ItemCheckedArray[( int32 ) Enum::PressureSettingItem.KGF];
     default:;
    }
    return IsChecked;
  }

  $rect <20,20,160,60>
  inherited object Menu
  {
    preset NoOfItems = 3;
  }

  $rect <750,100,950,140>
  array bool ItemCheckedArray[ 3 ] =
  (
    Default[0] = ;
    Default[1] = ;
    Default[2] = ;
  );

  $rect <750,50,950,90>
  array string ItemTitleArray[ 3 ] =
  (
    Default[0] = Strings::UNT04_unit_pressure_kpa;
    Default[1] = Strings::UNT04_unit_pressure_psi;
    Default[2] = Strings::UNT04_unit_pressure_kgf;
  );

  $rect <970,50,1170,90>
  var int32 PressureItemIdx;

  $rect <230,290,430,330>
  property slot PressureUpdateSignal;

  $rect <770,200,1000,240>
  object Core::Timer CheckMarkUpdateTimer
  {
    preset OnTrigger = OnCheckMarkUpdateSlot;
    preset Period = 450;
  }

  $rect <770,240,1000,280>
  slot OnCheckMarkUpdateSlot
  {
    CheckMarkUpdateTimer.Enabled = false;
    signal PressureUpdateSignal;
    Menu.MenuList.SelectedItem = 0;
    Menu.MoveFocusFrame();
    OnShortHomeKeyActivated();
  }
}

$rect <490,80,690,120>
$output false
class UNT05_TemperatureSettingMenu : Menu::BaseMenuView
{
  $rect <10,290,210,330>
  inherited property Bounds = <0,0,480,272>;

  $rect <10,350,210,390>
  inherited property DDModeEnabled = true;

  $rect <230,350,430,390>
  inherited var SlideOutEffectEnabled = true;

  $rect <530,120,730,160>
  inherited method LoadItemClass()
  {
    var class ItemClass = null;
    if( aItemNo >= 0 )
    {
      ItemClass = Menu::ItemCheckMark;
    }
    return ItemClass;
  }

  $rect <530,70,730,110>
  inherited method LoadItemTitle()
  {
    var string title = "";
    if( aItemNo < ItemTitleArray.size )
      {
      title = ItemTitleArray[aItemNo];
      }
    return title;
  }

  $rect <530,170,730,210>
  inherited method OnItemActivate()
  {
    if( null == aMenuItem )
    {
      // empty body to suppress warning
    }

    TempItemIdx = aItemNo;
    if( ItemCheckedArray[aItemNo] )
    {
      signal OnCheckMarkUpdateSlot;
    }
    else
    {
      var int32 i = 0;
      for( i = 0; i < ItemCheckedArray.size; i++ )
      {
        if( i == aItemNo )
        {
          ItemCheckedArray[i] = true;
        }
        else
        {
          ItemCheckedArray[i] = false;
        }
      }

      Menu.InvalidateItems( ( int32 )Enum::TemperatureSettingItem.TEMP_C, ( int32 )Enum::TemperatureSettingItem.TEMP_F );
      CheckMarkUpdateTimer.Enabled = true;
    }
  }

  $rect <530,20,730,60>
  inherited method LoadItemChecked()
  {
    var bool IsChecked = false;
    if( aItemNo < ItemCheckedArray.size )
    {
      IsChecked = ItemCheckedArray[aItemNo];
    }
    return IsChecked;
  }

  $rect <20,20,160,60>
  inherited object Menu
  {
    preset NoOfItems = 2;
    preset ItemNumPerPage = 2;
  }

  $rect <750,70,950,110>
  array bool ItemCheckedArray[ 2 ] =
  (
    Default[0] = ;
    Default[1] = ;
  );

  $rect <750,20,950,60>
  array string ItemTitleArray[ 2 ] =
  (
    Default[0] = Strings::UNT05_unit_temperature_c;
    Default[1] = Strings::UNT05_unit_temperature_f;
  );

  $rect <950,20,1150,60>
  var int32 TempItemIdx;

  $rect <750,140,980,180>
  object Core::Timer CheckMarkUpdateTimer
  {
    preset OnTrigger = OnCheckMarkUpdateSlot;
    preset Period = 450;
  }

  $rect <750,180,980,220>
  slot OnCheckMarkUpdateSlot
  {
    CheckMarkUpdateTimer.Enabled = false;
    signal TempUpdateSignal;
    Menu.MenuList.SelectedItem = 0;
    Menu.MoveFocusFrame();
    OnShortHomeKeyActivated();
  }

  $rect <230,290,430,330>
  property slot TempUpdateSignal;
}
