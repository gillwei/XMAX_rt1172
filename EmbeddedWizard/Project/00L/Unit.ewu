$version 10.00

$rect <50,30,250,70>
$output false
class UNT01_UnitSettingMenu : Menu::BaseMenuView
{
  $rect <240,290,440,330>
  inherited method Init()
  {
    var int32 NoOfItems = 3;
    var int32 ItemIdx = 2;
    var int32 i;

    if( PressureEnabled )
    {
      NoOfItems++;
      PressureMenu = new Unit::UNT04_PressureSettingMenu;
    }

    if( NoOfItems < ItemTitleArray.size )
    {
      ItemVehicleRxTypeArray[ItemIdx] = ItemVehicleRxTypeArray[(int32)Enum::UnitSettingItem.TEMPERATURE];
    }

    Menu.NoOfItems = NoOfItems;

    UnitItemValue = new Unit::UnitValueClass;
    MileageMenu = new Unit::UNT02_MileageSettingMenu;
    FuelMenu = new Unit::UNT03_FuelSettingMenu;
    TempMenu = new Unit::UNT05_TemperatureSettingMenu;

    for( i = 0; i < NoOfItems; i++ )
    {
      UpdateUnitValue( ItemVehicleRxTypeArray[i] );
    }
  }

  $rect <10,290,210,330>
  inherited property Bounds = <0,0,480,272>;

  $rect <220,450,420,490>
  inherited property DDModeEnabled = true;

  $rect <220,350,420,390>
  inherited var SlideOutEffectEnabled = true;

  $rect <520,30,720,70>
  inherited method LoadItemClass()
  {
    // suppress warning
    if( aItemNo )
    {
      // empty body
    }
    return Menu::ItemBaseValue;
  }

  $rect <520,80,720,120>
  inherited method LoadItemTitle()
  {
    var string title = "";
    switch( ItemVehicleRxTypeArray[aItemNo] )
    {
      case Enum::VehicleRxType.MILEAGE_UNIT: title = Strings::UNT01_UNIT_MILEAGE;
      case Enum::VehicleRxType.FUEL_CONSUMPTION_UNIT: title = Strings::UNT01_UNIT_FUEL;
      case Enum::VehicleRxType.PRESSURE_UNIT: title = Strings::UNT01_UNIT_PRESSURE;
      case Enum::VehicleRxType.TEMPERATURE_UNIT: title = Strings::UNT01_UNIT_TEMPERATURE;
      default:;
    }
    return title;
  }

  $rect <520,270,720,310>
  inherited method OnItemActivate()
  {
    aMenuItem; // suppress warning
    switch( ItemVehicleRxTypeArray[aItemNo] )
    {
      case Enum::VehicleRxType.MILEAGE_UNIT:
      {
        if( null != MileageMenu )
        {
          MileageMenu.MileageUpdateSignal = OnUnitValueUpdateSlot;
          SlideInDialog( MileageMenu );
        }
      }
      case Enum::VehicleRxType.FUEL_CONSUMPTION_UNIT:
      {
        if( null != FuelMenu )
        {
          FuelMenu.FuelUpdateSignal = OnUnitValueUpdateSlot;
          if( Enum::MileageSettingItem.KM == DeviceInterface::VehicleDevice.CurrentMileageSetting )
          {
            FuelMenu.ItemEnabledArray[( int32 )Enum::FuelSettingItem.KM_L] = true;
            FuelMenu.ItemEnabledArray[( int32 )Enum::FuelSettingItem.MPG] = false;
            FuelMenu.ItemEnabledArray[( int32 )Enum::FuelSettingItem.L_PER_HUNDRED_KM] = true;
          }
          else
          {
            FuelMenu.ItemEnabledArray[( int32 )Enum::FuelSettingItem.KM_L] = false;
            FuelMenu.ItemEnabledArray[( int32 )Enum::FuelSettingItem.MPG] = true;
            FuelMenu.ItemEnabledArray[( int32 )Enum::FuelSettingItem.L_PER_HUNDRED_KM] = false;
          }

          FuelMenu.Menu.InvalidateItems( ( int32 )Enum::FuelSettingItem.KM_L, ( int32 )Enum::FuelSettingItem.L_PER_HUNDRED_KM );
          SlideInDialog( FuelMenu );
        }
      }
      case Enum::VehicleRxType.PRESSURE_UNIT:
      {
        if( null != PressureMenu )
        {
          PressureMenu.PressureUpdateSignal = OnUnitValueUpdateSlot;
          SlideInDialog( PressureMenu );
        }
      }
      case Enum::VehicleRxType.TEMPERATURE_UNIT:
      {
        if( null != TempMenu )
        {
          TempMenu.TempUpdateSignal = OnUnitValueUpdateSlot;
          SlideInDialog( TempMenu );
        }
      }
      default:;
    }
  }

  $rect <520,210,720,250>
  inherited method LoadItemEnabled()
  {
    var bool ItemEnabled = true;
    if( aItemNo == ( int32 )Enum::UnitSettingItem.FUEL )
    {
      ItemEnabled = IsFuelEnabled;
    }
    return ItemEnabled;
  }

  $rect <20,20,160,60>
  inherited object Menu
  {
    preset DDModeEnabled = true;
    preset NoOfItems = 4;
    preset ItemHeight = Menu::ItemHeightSmall;
    preset ItemNumPerPage = 4;
  }

  $rect <520,140,720,180>
  inherited method LoadItemBaseValue()
  {
    var string val = "";
    if( aItemNo < ItemValueArray.size )
    {
      val = ItemValueArray[aItemNo];
    }
    return val;
  }

  $rect <760,30,960,70>
  array string ItemTitleArray[ 4 ] =
  (
    Default[0] = Strings::UNT01_UNIT_MILEAGE;
    Default[1] = Strings::UNT01_UNIT_FUEL;
    Default[2] = Strings::UNT01_UNIT_PRESSURE;
    Default[3] = Strings::UNT01_UNIT_TEMPERATURE;
  );

  $rect <760,80,960,120>
  array Enum::VehicleRxType ItemVehicleRxTypeArray[ 4 ] =
  (
    Default[0] = Enum::VehicleRxType.MILEAGE_UNIT;
    Default[1] = Enum::VehicleRxType.FUEL_CONSUMPTION_UNIT;
    Default[2] = Enum::VehicleRxType.PRESSURE_UNIT;
    Default[3] = Enum::VehicleRxType.TEMPERATURE_UNIT;
  );

  $rect <760,130,960,170>
  array string ItemValueArray[ 4 ];

  $rect <10,350,210,390>
  var Unit::UnitValueClass UnitItemValue;

  $rect <520,330,720,370>
  slot OnUnitValueUpdateSlot
  {
    if( sender == MileageMenu )
    {
      UpdateUnitValue( Enum::VehicleRxType.MILEAGE_UNIT );
    }
    else if( sender == FuelMenu )
    {
      UpdateUnitValue( Enum::VehicleRxType.FUEL_CONSUMPTION_UNIT );
    }
    else if( sender == PressureMenu )
    {
      UpdateUnitValue( Enum::VehicleRxType.PRESSURE_UNIT );
    }
    else if( sender == TempMenu )
    {
      UpdateUnitValue( Enum::VehicleRxType.TEMPERATURE_UNIT );
    }

    if( PressureEnabled )
    {
      Menu.InvalidateItems( ( int32 )Enum::UnitSettingItem.MILEAGE, ( int32 )Enum::UnitSettingItem.TEMPERATURE );
    }
    else
    {
      Menu.InvalidateItems( ( int32 )Enum::UnitSettingItem.MILEAGE, ( int32 )Enum::UnitSettingItem.TEMPERATURE - 1 );
    }
  }

  $rect <10,400,210,440>
  var Unit::UNT02_MileageSettingMenu MileageMenu;

  $rect <10,450,210,490>
  var Unit::UNT03_FuelSettingMenu FuelMenu;

  $rect <10,500,210,540>
  var Unit::UNT04_PressureSettingMenu PressureMenu;

  $rect <220,400,420,440>
  var Unit::UNT05_TemperatureSettingMenu TempMenu;

  $rect <760,190,960,230>
  var bool IsFuelEnabled = true;

  $rect <760,280,960,320>
  property bool PressureEnabled;

  $rect <760,320,960,360>
  onget PressureEnabled
  {
    return DeviceInterface::VehicleDevice.IsVehicleFunctionSupported( Enum::VehicleSupportedFunction.TIRE_FRONT ) ||
           DeviceInterface::VehicleDevice.IsVehicleFunctionSupported( Enum::VehicleSupportedFunction.TIRE_FRONT_LEFT ) ||
           DeviceInterface::VehicleDevice.IsVehicleFunctionSupported( Enum::VehicleSupportedFunction.TIRE_FRONT_RIGHT ) ||
           DeviceInterface::VehicleDevice.IsVehicleFunctionSupported( Enum::VehicleSupportedFunction.TIRE_REAR );
  }

  $rect <520,410,720,450>
  object Core::SystemEventHandler VehicleDataReceivedEventHandler
  {
    preset OnEvent = OnVehicleDataReceivedSlot;
    preset Event = DeviceInterface::VehicleDevice.VehicleDataReceivedSystemEvent;
  }

  // This slot method is executed when the associated system event handler 'SystemEventHandler' \
  // receives an event.
  $rect <720,410,920,450>
  slot OnVehicleDataReceivedSlot
  {
    var DeviceInterface::VehicleDataClass VehicleData = ( DeviceInterface::VehicleDataClass )VehicleDataReceivedEventHandler.Context;
    var bool IsVehicleUnitDataReceived = ( Enum::VehicleRxType.MILEAGE_UNIT == VehicleData.RxType ||
                                           Enum::VehicleRxType.FUEL_CONSUMPTION_UNIT == VehicleData.RxType ||
                                           Enum::VehicleRxType.PRESSURE_UNIT == VehicleData.RxType ||
                                           Enum::VehicleRxType.TEMPERATURE_UNIT == VehicleData.RxType );

    if( null != VehicleData && IsVehicleUnitDataReceived )
    {
      UpdateUnitValue( VehicleData.RxType );
      if( PressureEnabled )
      {
        Menu.InvalidateItems( (int32)Enum::UnitSettingItem.MILEAGE, (int32)Enum::UnitSettingItem.TEMPERATURE );
      }
      else
      {
        Menu.InvalidateItems( (int32)Enum::UnitSettingItem.MILEAGE, (int32)Enum::UnitSettingItem.TEMPERATURE - 1 );
      }
    }
  }

  $rect <520,470,720,510>
  method void UpdateUnitValue( arg Enum::VehicleRxType aReceivedUnitType )
  {
    var DeviceInterface::VehicleDataClass VehicleData;
    switch( aReceivedUnitType )
    {
      case Enum::VehicleRxType.MILEAGE_UNIT:
      {
        VehicleData = DeviceInterface::VehicleDevice.GetData( Enum::VehicleRxType.MILEAGE_UNIT );
        if( null != VehicleData && UnitItemValue.ItemMileageUnitArray.size > (int32)VehicleData.DataUInt32 )
        {
          ItemValueArray[(int32)Enum::UnitSettingItem.MILEAGE] = UnitItemValue.ItemMileageUnitArray[(int32)VehicleData.DataUInt32];
          DeviceInterface::VehicleDevice.CurrentMileageSetting = (Enum::MileageSettingItem)VehicleData.DataUInt32;
        }
      }
      case Enum::VehicleRxType.FUEL_CONSUMPTION_UNIT:
      {
        IsFuelEnabled = true;
        VehicleData = DeviceInterface::VehicleDevice.GetData( Enum::VehicleRxType.FUEL_CONSUMPTION_UNIT );
        if( null != VehicleData )
        {
          switch( VehicleData.DataUInt32 )
          {
            case 0:
            {
              ItemValueArray[( int32 )Enum::UnitSettingItem.FUEL] = UnitItemValue.ItemFuelUnitArray[( int32 )Enum::FuelSettingItem.KM_L];
              DeviceInterface::VehicleDevice.CurrentFuelSetting = Enum::FuelSettingItem.KM_L;
            }
            case 1,2:
            {
              IsFuelEnabled = false;
              ItemValueArray[( int32 )Enum::UnitSettingItem.FUEL] = UnitItemValue.ItemFuelUnitArray[( int32 )Enum::FuelSettingItem.MPG];
              DeviceInterface::VehicleDevice.CurrentFuelSetting = Enum::FuelSettingItem.MPG;
            }
            case 3:
            {
              ItemValueArray[( int32 )Enum::UnitSettingItem.FUEL] = UnitItemValue.ItemFuelUnitArray[( int32 )Enum::FuelSettingItem.L_PER_HUNDRED_KM];
              DeviceInterface::VehicleDevice.CurrentFuelSetting = Enum::FuelSettingItem.L_PER_HUNDRED_KM;
            }
            default:;
          }
        }
      }
      case Enum::VehicleRxType.PRESSURE_UNIT:
      {
        VehicleData = DeviceInterface::VehicleDevice.GetData( Enum::VehicleRxType.PRESSURE_UNIT );
        if( null != VehicleData && UnitItemValue.ItemPressureUnitArray.size > (int32)VehicleData.DataUInt32 )
        {
          ItemValueArray[(int32)Enum::UnitSettingItem.PRESSURE] = UnitItemValue.ItemPressureUnitArray[(int32)VehicleData.DataUInt32];
          DeviceInterface::VehicleDevice.CurrentPressureSetting = ( Enum::PressureSettingItem )VehicleData.DataUInt32;
        }
      }
      case Enum::VehicleRxType.TEMPERATURE_UNIT:
      {
        VehicleData = DeviceInterface::VehicleDevice.GetData( Enum::VehicleRxType.TEMPERATURE_UNIT );
        if( null != VehicleData && UnitItemValue.ItemTemperatureUnitArray.size > (int32)VehicleData.DataUInt32 )
        {
          if( PressureEnabled )
          {
            ItemValueArray[(int32)Enum::UnitSettingItem.TEMPERATURE] = UnitItemValue.ItemTemperatureUnitArray[(int32)VehicleData.DataUInt32];
          }
          else
          {
            // If vehicle doesn't support pressure function, the pressure option is hidden and temperature option is moved up to
            // the position of pressure option. Therefore, minus 1 to match the correct index of temperature option.
            ItemValueArray[(int32)Enum::UnitSettingItem.TEMPERATURE - 1] = UnitItemValue.ItemTemperatureUnitArray[(int32)VehicleData.DataUInt32];
          }
          DeviceInterface::VehicleDevice.CurrentTempSetting = (Enum::TemperatureSettingItem)VehicleData.DataUInt32;
        }
      }
      default:;
    }

  }
}

$rect <270,30,470,70>
$output false
class UNT02_MileageSettingMenu : Menu::BaseMenuView
{
  $rect <0,300,200,340>
  inherited property Bounds = <0,0,480,272>;

  $rect <0,370,200,410>
  inherited property DDModeEnabled = true;

  $rect <230,370,430,410>
  inherited var SlideOutEffectEnabled = true;

  $rect <520,40,720,80>
  inherited method LoadItemClass()
  {
    var class ItemClass = null;
    if( aItemNo >= 0 )
    {
      ItemClass = Menu::ItemCheckMark;
    }
    return ItemClass;
  }

  $rect <520,90,720,130>
  inherited method LoadItemTitle()
  {
    var string title = "";
    if( aItemNo < ItemTitleArray.size )
      {
      title = ItemTitleArray[aItemNo];
      }
    return title;
  }

  $rect <520,200,720,240>
  inherited method OnItemActivate()
  {
    aMenuItem; // suppress warning
    switch( aItemNo )
    {
      case 0: DeviceInterface::VehicleDevice.SetData( Enum::VehicleTxType.MILEAGE_UNIT, (uint32)Enum::MileageSettingItem.KM );
      case 1: DeviceInterface::VehicleDevice.SetData( Enum::VehicleTxType.MILEAGE_UNIT, (uint32)Enum::MileageSettingItem.MILE );
      default:;
    }
  }

  $rect <520,140,720,180>
  inherited method LoadItemChecked()
  {
    var bool IsChecked = false;
    switch( aItemNo )
    {
      case 0:
      {
        if( Enum::MileageSettingItem.KM == DeviceInterface::VehicleDevice.CurrentMileageSetting )
        {
          IsChecked = true;
        }
      }
      case 1:
      {
        if( Enum::MileageSettingItem.MILE == DeviceInterface::VehicleDevice.CurrentMileageSetting )
        {
          IsChecked = true;
        }
      }
      default:;
    }
    return IsChecked;
  }

  $rect <20,20,160,60>
  inherited object Menu
  {
    preset DDModeEnabled = true;
    preset NoOfItems = 2;
    preset ItemNumPerPage = 2;
  }

  $rect <780,50,980,90>
  array string ItemTitleArray[ 2 ] =
  (
    Default[0] = Strings::UNT02_UNIT_MILEAGE_KILOMETER;
    Default[1] = Strings::UNT02_UNIT_MILEAGE_MILE;
  );

  $rect <520,260,750,300>
  object Core::Timer CheckMarkUpdateTimer
  {
    preset OnTrigger = OnCheckMarkUpdateSlot;
    preset Period = 450;
  }

  $rect <520,300,750,340>
  slot OnCheckMarkUpdateSlot
  {
    CheckMarkUpdateTimer.Enabled = false;
    signal MileageUpdateSignal;
    Menu.MenuList.SelectedItem = 0;
    Menu.MoveFocusFrame();
    OnShortHomeKeyActivated();
  }

  $rect <230,300,430,340>
  property slot MileageUpdateSignal;

  $rect <520,360,720,400>
  object Core::SystemEventHandler VehicleDataReceivedEventHandler
  {
    preset OnEvent = OnVehicleDataReceivedSlot;
    preset Event = DeviceInterface::VehicleDevice.VehicleDataReceivedSystemEvent;
  }

  // This slot method is executed when the associated system event handler 'SystemEventHandler' \
  // receives an event.
  $rect <720,360,920,400>
  slot OnVehicleDataReceivedSlot
  {
    var DeviceInterface::VehicleDataClass VehicleData = ( DeviceInterface::VehicleDataClass )VehicleDataReceivedEventHandler.Context;
    if( null != VehicleData &&
        Enum::VehicleRxType.MILEAGE_UNIT == VehicleData.RxType )
    {
      VehicleData = DeviceInterface::VehicleDevice.GetData( Enum::VehicleRxType.MILEAGE_UNIT );
      switch( VehicleData.DataUInt32 )
      {
        case 0: DeviceInterface::VehicleDevice.CurrentMileageSetting = Enum::MileageSettingItem.KM;
        case 1: DeviceInterface::VehicleDevice.CurrentMileageSetting = Enum::MileageSettingItem.MILE;
        default:;
      }

      Menu.InvalidateItems( (int32)Enum::MileageSettingItem.KM, (int32)Enum::MileageSettingItem.MILE );
      CheckMarkUpdateTimer.Enabled = true;
    }
  }
}

$rect <50,80,250,120>
$output false
class UnitValueClass
{
  $rect <200,30,400,70>
  array string ItemMileageUnitArray[ 2 ] =
  (
    Default[0] = Strings::UNT02_UNIT_MILEAGE_KILOMETER;
    Default[1] = Strings::UNT02_UNIT_MILEAGE_MILE;
  );

  $rect <200,80,400,120>
  array string ItemFuelUnitArray[ 3 ] =
  (
    Default[0] = Strings::UNT03_UNIT_FUEL_KM_PER_LITER;
    Default[1] = Strings::UNT03_UNIT_FUEL_MILE_PER_GALLON;
    Default[2] = Strings::UNT03_UNIT_FUEL_LITER_PER_HUNDRED_KM;
  );

  $rect <200,130,400,170>
  array string ItemPressureUnitArray[ 3 ] =
  (
    Default[0] = Strings::UNT04_UNIT_PRESSURE_PSI;
    Default[1] = Strings::UNT04_UNIT_PRESSURE_KPA;
    Default[2] = Strings::UNT04_UNIT_PRESSURE_KGF;
  );

  $rect <200,180,400,220>
  array string ItemTemperatureUnitArray[ 2 ] =
  (
    Default[0] = Strings::UNT05_UNIT_TEMPERATURE_C;
    Default[1] = Strings::UNT05_UNIT_TEMPERATURE_F;
  );
}

$rect <490,30,690,70>
$output false
class UNT03_FuelSettingMenu : Menu::BaseMenuView
{
  $rect <10,280,210,320>
  inherited property Bounds = <0,0,480,272>;

  $rect <10,350,210,390>
  inherited property DDModeEnabled = true;

  $rect <240,350,440,390>
  inherited var SlideOutEffectEnabled = true;

  $rect <520,20,720,60>
  inherited method LoadItemClass()
  {
    var class ItemClass = null;
    if( aItemNo >= 0 )
    {
      ItemClass = Menu::ItemCheckMark;
    }
    return ItemClass;
  }

  $rect <520,70,720,110>
  inherited method LoadItemTitle()
  {
    var string title = "";
    if( aItemNo < ItemTitleArray.size )
      {
      title = ItemTitleArray[aItemNo];
      }
    return title;
  }

  $rect <520,220,720,260>
  inherited method OnItemActivate()
  {
    aMenuItem; // suppress warning
    switch( aItemNo )
    {
      case 0: DeviceInterface::VehicleDevice.SetData( Enum::VehicleTxType.FUEL_CONSUMPTION_UNIT, (uint32)Enum::FuelSettingItem.KM_L );
      case 1: DeviceInterface::VehicleDevice.SetData( Enum::VehicleTxType.FUEL_CONSUMPTION_UNIT, (uint32)Enum::FuelSettingItem.L_PER_HUNDRED_KM );
      case 2: DeviceInterface::VehicleDevice.SetData( Enum::VehicleTxType.FUEL_CONSUMPTION_UNIT, (uint32)Enum::FuelSettingItem.MPG );
      default:;
    }
  }

  $rect <520,120,720,160>
  inherited method LoadItemChecked()
  {
    var bool IsChecked = false;
    switch( aItemNo )
    {
      case 0:
      {
        if( Enum::FuelSettingItem.KM_L == DeviceInterface::VehicleDevice.CurrentFuelSetting )
        {
          IsChecked = true;
        }
      }
      case 1:
      {
        if( Enum::FuelSettingItem.L_PER_HUNDRED_KM == DeviceInterface::VehicleDevice.CurrentFuelSetting )
        {
          IsChecked = true;
        }
      }
      case 2:
      {
        if( Enum::FuelSettingItem.MPG == DeviceInterface::VehicleDevice.CurrentFuelSetting )
        {
          IsChecked = true;
        }
      }
      default:;
    }
    return IsChecked;
  }

  $rect <520,170,720,210>
  inherited method LoadItemEnabled()
  {
    var bool ItemEnabled = true;
    switch( aItemNo )
    {
      case 0: ItemEnabled = ItemEnabledArray[( int32 )Enum::FuelSettingItem.KM_L];
      case 1: ItemEnabled = ItemEnabledArray[( int32 )Enum::FuelSettingItem.L_PER_HUNDRED_KM];
      case 2: ItemEnabled = ItemEnabledArray[( int32 )Enum::FuelSettingItem.MPG];
      default:;
    }
    return ItemEnabled;
  }

  $rect <20,20,160,60>
  inherited object Menu
  {
    preset DDModeEnabled = true;
    preset NoOfItems = 3;
  }

  $rect <750,20,950,60>
  array string ItemTitleArray[ 3 ] =
  (
    Default[0] = Strings::UNT03_UNIT_FUEL_KM_PER_LITER;
    Default[1] = Strings::UNT03_UNIT_FUEL_LITER_PER_HUNDRED_KM;
    Default[2] = Strings::UNT03_UNIT_FUEL_MILE_PER_GALLON;
  );

  $rect <520,290,750,330>
  object Core::Timer CheckMarkUpdateTimer
  {
    preset OnTrigger = OnCheckMarkUpdateSlot;
    preset Period = 450;
  }

  $rect <520,330,750,370>
  slot OnCheckMarkUpdateSlot
  {
    CheckMarkUpdateTimer.Enabled = false;
    signal FuelUpdateSignal;
    Menu.MenuList.SelectedItem = 0;
    Menu.MoveFocusFrame();
    OnShortHomeKeyActivated();
  }

  $rect <240,290,440,330>
  property slot FuelUpdateSignal;

  $rect <750,70,950,110>
  array bool ItemEnabledArray[ 3 ];

  $rect <520,390,720,430>
  object Core::SystemEventHandler VehicleDataReceivedEventHandler
  {
    preset OnEvent = OnVehicleDataReceivedSlot;
    preset Event = DeviceInterface::VehicleDevice.VehicleDataReceivedSystemEvent;
  }

  // This slot method is executed when the associated system event handler 'SystemEventHandler' \
  // receives an event.
  $rect <720,390,920,430>
  slot OnVehicleDataReceivedSlot
  {
    var DeviceInterface::VehicleDataClass VehicleData = ( DeviceInterface::VehicleDataClass )VehicleDataReceivedEventHandler.Context;
    if( null != VehicleData &&
        Enum::VehicleRxType.FUEL_CONSUMPTION_UNIT == VehicleData.RxType )
    {
      VehicleData = DeviceInterface::VehicleDevice.GetData( Enum::VehicleRxType.FUEL_CONSUMPTION_UNIT );
      switch( VehicleData.DataUInt32 )
      {
        case 0: DeviceInterface::VehicleDevice.CurrentFuelSetting = Enum::FuelSettingItem.KM_L;
        case 1: DeviceInterface::VehicleDevice.CurrentFuelSetting = Enum::FuelSettingItem.MPG;
        case 2: DeviceInterface::VehicleDevice.CurrentFuelSetting = Enum::FuelSettingItem.L_PER_HUNDRED_KM;
        default:;
      }

      Menu.InvalidateItems( (int32)Enum::FuelSettingItem.KM_L, (int32)Enum::FuelSettingItem.L_PER_HUNDRED_KM );
      CheckMarkUpdateTimer.Enabled = true;
    }
  }
}

$rect <270,80,470,120>
$output false
class UNT04_PressureSettingMenu : Menu::BaseMenuView
{
  $rect <0,280,200,320>
  inherited property Bounds = <0,0,480,272>;

  $rect <10,350,210,390>
  inherited property DDModeEnabled = true;

  $rect <230,350,430,390>
  inherited var SlideOutEffectEnabled = true;

  $rect <520,150,720,190>
  inherited method LoadItemClass()
  {
    var class ItemClass = null;
    if( aItemNo >= 0 )
    {
      ItemClass = Menu::ItemCheckMark;
    }
    return ItemClass;
  }

  $rect <520,50,720,90>
  inherited method LoadItemTitle()
  {
    var string title = "";
    if( aItemNo < ItemTitleArray.size )
      {
      title = ItemTitleArray[aItemNo];
      }
    return title;
  }

  $rect <520,200,720,240>
  inherited method OnItemActivate()
  {
    aMenuItem; // suppress warning
    switch( aItemNo )
    {
      case 0: DeviceInterface::VehicleDevice.SetData( Enum::VehicleTxType.PRESSURE_UNIT, (uint32)Enum::PressureSettingItem.KPA );
      case 1: DeviceInterface::VehicleDevice.SetData( Enum::VehicleTxType.PRESSURE_UNIT, (uint32)Enum::PressureSettingItem.PSI );
      case 2: DeviceInterface::VehicleDevice.SetData( Enum::VehicleTxType.PRESSURE_UNIT, (uint32)Enum::PressureSettingItem.KGF );
      default:;
    }
  }

  $rect <520,100,720,140>
  inherited method LoadItemChecked()
  {
    var bool IsChecked = false;
    switch( aItemNo )
    {
      case 0:
      {
        if( Enum::PressureSettingItem.KPA == DeviceInterface::VehicleDevice.CurrentPressureSetting )
        {
          IsChecked = true;
        }
      }
      case 1:
      {
        if( Enum::PressureSettingItem.PSI == DeviceInterface::VehicleDevice.CurrentPressureSetting )
        {
          IsChecked = true;
        }
      }
      case 2:
      {
        if( Enum::PressureSettingItem.KGF == DeviceInterface::VehicleDevice.CurrentPressureSetting )
        {
          IsChecked = true;
        }
      }
      default:;
    }
    return IsChecked;
  }

  $rect <20,20,160,60>
  inherited object Menu
  {
    preset DDModeEnabled = true;
    preset NoOfItems = 3;
  }

  $rect <750,100,950,140>
  array bool ItemCheckedArray[ 3 ] =
  (
    Default[0] = ;
    Default[1] = ;
    Default[2] = ;
  );

  $rect <750,50,950,90>
  array string ItemTitleArray[ 3 ] =
  (
    Default[0] = Strings::UNT04_UNIT_PRESSURE_KPA;
    Default[1] = Strings::UNT04_UNIT_PRESSURE_PSI;
    Default[2] = Strings::UNT04_UNIT_PRESSURE_KGF;
  );

  $rect <230,290,430,330>
  property slot PressureUpdateSignal;

  $rect <520,250,750,290>
  object Core::Timer CheckMarkUpdateTimer
  {
    preset OnTrigger = OnCheckMarkUpdateSlot;
    preset Period = 450;
  }

  $rect <520,290,750,330>
  slot OnCheckMarkUpdateSlot
  {
    CheckMarkUpdateTimer.Enabled = false;
    signal PressureUpdateSignal;
    Menu.MenuList.SelectedItem = 0;
    Menu.MoveFocusFrame();
    OnShortHomeKeyActivated();
  }

  $rect <520,350,720,390>
  object Core::SystemEventHandler VehicleDataReceivedEventHandler
  {
    preset OnEvent = OnVehicleDataReceivedSlot;
    preset Event = DeviceInterface::VehicleDevice.VehicleDataReceivedSystemEvent;
  }

  // This slot method is executed when the associated system event handler 'SystemEventHandler' \
  // receives an event.
  $rect <720,350,920,390>
  slot OnVehicleDataReceivedSlot
  {
    var DeviceInterface::VehicleDataClass VehicleData = ( DeviceInterface::VehicleDataClass )VehicleDataReceivedEventHandler.Context;
    if( null != VehicleData &&
        Enum::VehicleRxType.PRESSURE_UNIT == VehicleData.RxType )
    {
      VehicleData = DeviceInterface::VehicleDevice.GetData( Enum::VehicleRxType.PRESSURE_UNIT );
      switch( VehicleData.DataUInt32 )
      {
        case 0: DeviceInterface::VehicleDevice.CurrentPressureSetting = Enum::PressureSettingItem.PSI;
        case 1: DeviceInterface::VehicleDevice.CurrentPressureSetting = Enum::PressureSettingItem.KPA;
        case 2: DeviceInterface::VehicleDevice.CurrentPressureSetting = Enum::PressureSettingItem.KGF;
        default:;
      }

      Menu.InvalidateItems( (int32)Enum::PressureSettingItem.PSI, (int32)Enum::PressureSettingItem.KGF );
      CheckMarkUpdateTimer.Enabled = true;
    }
  }
}

$rect <490,80,690,120>
$output false
class UNT05_TemperatureSettingMenu : Menu::BaseMenuView
{
  $rect <10,290,210,330>
  inherited property Bounds = <0,0,480,272>;

  $rect <10,350,210,390>
  inherited property DDModeEnabled = true;

  $rect <230,350,430,390>
  inherited var SlideOutEffectEnabled = true;

  $rect <530,120,730,160>
  inherited method LoadItemClass()
  {
    var class ItemClass = null;
    if( aItemNo >= 0 )
    {
      ItemClass = Menu::ItemCheckMark;
    }
    return ItemClass;
  }

  $rect <530,70,730,110>
  inherited method LoadItemTitle()
  {
    var string title = "";
    if( aItemNo < ItemTitleArray.size )
      {
      title = ItemTitleArray[aItemNo];
      }
    return title;
  }

  $rect <530,170,730,210>
  inherited method OnItemActivate()
  {
    aMenuItem; // suppress warning
    switch( aItemNo )
    {
      case 0: DeviceInterface::VehicleDevice.SetData( Enum::VehicleTxType.TEMPERATURE_UNIT, ( uint32 )Enum::TemperatureSettingItem.TEMP_C );
      case 1: DeviceInterface::VehicleDevice.SetData( Enum::VehicleTxType.TEMPERATURE_UNIT, ( uint32 )Enum::TemperatureSettingItem.TEMP_F );
      default:;
    }
  }

  $rect <530,20,730,60>
  inherited method LoadItemChecked()
  {
    var bool IsChecked = false;
    switch( aItemNo )
    {
      case 0:
      {
        if( Enum::TemperatureSettingItem.TEMP_C == DeviceInterface::VehicleDevice.CurrentTempSetting )
        {
          IsChecked = true;
        }
      }
      case 1:
      {
        if( Enum::TemperatureSettingItem.TEMP_F == DeviceInterface::VehicleDevice.CurrentTempSetting )
        {
          IsChecked = true;
        }
      }
      default:;
    }
    return IsChecked;
  }

  $rect <20,20,160,60>
  inherited object Menu
  {
    preset DDModeEnabled = true;
    preset NoOfItems = 2;
    preset ItemNumPerPage = 2;
  }

  $rect <750,70,950,110>
  array bool ItemCheckedArray[ 2 ] =
  (
    Default[0] = ;
    Default[1] = ;
  );

  $rect <750,20,950,60>
  array string ItemTitleArray[ 2 ] =
  (
    Default[0] = Strings::UNT05_UNIT_TEMPERATURE_C;
    Default[1] = Strings::UNT05_UNIT_TEMPERATURE_F;
  );

  $rect <530,230,760,270>
  object Core::Timer CheckMarkUpdateTimer
  {
    preset OnTrigger = OnCheckMarkUpdateSlot;
    preset Period = 450;
  }

  $rect <530,270,760,310>
  slot OnCheckMarkUpdateSlot
  {
    CheckMarkUpdateTimer.Enabled = false;
    signal TempUpdateSignal;
    Menu.MenuList.SelectedItem = 0;
    Menu.MoveFocusFrame();
    OnShortHomeKeyActivated();
  }

  $rect <230,290,430,330>
  property slot TempUpdateSignal;

  $rect <530,320,730,360>
  object Core::SystemEventHandler VehicleDataReceivedEventHandler
  {
    preset OnEvent = OnVehicleDataReceivedSlot;
    preset Event = DeviceInterface::VehicleDevice.VehicleDataReceivedSystemEvent;
  }

  // This slot method is executed when the associated system event handler 'SystemEventHandler' \
  // receives an event.
  $rect <730,320,930,360>
  slot OnVehicleDataReceivedSlot
  {
    var DeviceInterface::VehicleDataClass VehicleData = ( DeviceInterface::VehicleDataClass )VehicleDataReceivedEventHandler.Context;
    if( null != VehicleData &&
        Enum::VehicleRxType.TEMPERATURE_UNIT == VehicleData.RxType )
    {
      VehicleData = DeviceInterface::VehicleDevice.GetData( Enum::VehicleRxType.TEMPERATURE_UNIT );
      switch( VehicleData.DataUInt32 )
      {
        case 0: DeviceInterface::VehicleDevice.CurrentTempSetting = Enum::TemperatureSettingItem.TEMP_C;
        case 1: DeviceInterface::VehicleDevice.CurrentTempSetting = Enum::TemperatureSettingItem.TEMP_F;
        default:;
      }
      Menu.InvalidateItems( ( int32 )Enum::TemperatureSettingItem.TEMP_C, ( int32 )Enum::TemperatureSettingItem.TEMP_F );
      CheckMarkUpdateTimer.Enabled = true;
    }
  }
}
