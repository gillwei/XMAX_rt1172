$version 11.00

$rect <10,260,270,300>
$output false
$multilingual true
class POP08_WeatherLoadingUI : Components::BaseMainBG
{
  $rect <510,20,710,60>
  inherited method Init()
  {
    trace "POP08";
    DeviceInterface::WeatherDevice.SendWeatherInfoRequest();
    DeviceInterface::WeatherDevice.SendVehicleSettingRequest();
  }

  $rect <20,20,160,60>
  object Components::BaseText LoadingText
  {
    preset Bounds = <10,156,470,187>;
    preset String = Strings::GEN_PLEASE_WAIT;
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <510,110,760,150>
  object Core::PropertyObserver WeatherLoadingObserver
  {
    preset OnEvent = OnWeatherLoadingUpdateSlot;
    preset Outlet = ^DeviceInterface::WeatherDevice.IsWeatherInfoReceived;
  }

  // This slot method is executed when the associated property observer 'PropertyObserver' \
  // is notified.
  $rect <510,150,760,190>
  slot OnWeatherLoadingUpdateSlot
  {
    if( DeviceInterface::WeatherDevice.IsWeatherInfoReceived )
    {
      ConnectionFailedTimer.Enabled = false;
      Owner.SwitchToDialog( new Weather::WEA01_Main, null, null, null, null, null, null, null, null, null, false );
    }
  }

  $rect <20,20,160,60>
  object Views::Image LoadingAnimation
  {
    preset Bounds = <193,54,287,148>;
    preset Animated = true;
    preset Bitmap = Resource::LoadingAnimation;
  }

  $rect <510,210,780,250>
  object Core::Timer ConnectionFailedTimer
  {
    preset OnTrigger = OnConnectionFailedUpdateSlot;
    preset Period = 20000;
    preset Enabled = true;
  }

  $rect <510,250,790,290>
  slot OnConnectionFailedUpdateSlot
  {
    ConnectionFailedTimer.Enabled = false;
    PresentDialog( new Pop::POP09_POP14_BleConnectionErrorUI, null, null, null, null, null, null, null, null, false );
  }

  $rect <510,300,790,340>
  object Core::SystemEventHandler MotoConConnectionEventHandler
  {
    preset OnEvent = OnMotoConConnectionUpdateEvent;
    preset Event = DeviceInterface::BluetoothDevice.MotoConSystemEvent;
  }

  // This slot method is executed when the associated system event handler 'SystemEventHandler' \
  // receives an event.
  $rect <510,340,790,380>
  slot OnMotoConConnectionUpdateEvent
  {
    var DeviceInterface::MotoConContext MotoConContext = ( DeviceInterface::MotoConContext )MotoConConnectionEventHandler.Context;
    if( Enum::MotoConRxEvent.CONNECTION_STATUS == MotoConContext.RxEvent )
    {
      if( !DeviceInterface::BluetoothDevice.IsMotoconConnected() )
      {
        signal OnConnectionFailedUpdateSlot;
      }
    }
  }
}

$rect <330,10,610,50>
$output false
$multilingual true
class POP09_POP14_BleConnectionErrorUI : Components::BaseMainBG
{
  $rect <520,30,700,70>
  inherited method Init()
  {
    trace "POP09/14";
  }

  $rect <20,20,160,60>
  object Components::BaseText ConnectionFailedMessage
  {
    preset Bounds = <10,49,470,235>;
    preset WrapText = true;
    preset String = Strings::POP09_CONNECTION_FAILED;
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <520,130,710,170>
  object Core::Timer CountDownTimer
  {
    preset OnTrigger = OnCountDownTimeoutSlot;
    preset Period = 2000;
    preset Enabled = true;
  }

  $rect <520,180,750,220>
  slot OnCountDownTimeoutSlot
  {
    CountDownTimer.Enabled = false;
    var Application::Application App = (Application::Application)GetRoot();
    if( null != App )
    {
      App.ReturnToLauncher();
    }
  }
}

$rect <10,60,270,100>
$output false
$multilingual true
class POP02_ConnectionError : Components::BaseComponent
{
  $rect <10,390,190,430>
  inherited method ReInit()
  {
    InvalidateLayout();
  }

  $rect <10,340,190,380>
  inherited method Init()
  {
    trace "POP02";
  }

  $rect <10,290,190,330>
  inherited property Bounds = <0,0,480,272>;

  $rect <509,0,689,40>
  inherited method UpdateLayout()
  {
    super( aSize );

    // calculate the margin on the left/right side to make the warning icon and the warning text align horizontal center
    var int32 TextIconGapPixel = 3;
    var int32 TotalWidth = ErrorIcon.Bounds.w + TextIconGapPixel + ConnectionErrText.GetContentArea().w;
    var int32 Margin = ( Bounds.w - TotalWidth ) / 2;

    /* adjust the bounds of IconWarning */
    var int32 Width = ErrorIcon.Bounds.w;
    var rect NewBounds = ErrorIcon.Bounds;
    NewBounds.x1 = Margin;
    NewBounds.x2 = NewBounds.x1 + Width;
    ErrorIcon.Bounds = NewBounds;

    /* adjust the bounds of WarningText */
    Width = ConnectionErrText.Bounds.w;
    NewBounds = ConnectionErrText.Bounds;
    NewBounds.x1 = ErrorIcon.Bounds.x2 + TextIconGapPixel;
    NewBounds.x2 = NewBounds.x1 + Width;
    ConnectionErrText.Bounds = NewBounds;
  }

  $rect <510,50,740,90>
  inherited method OnShortHomeKeyActivated()
  {
    // neglect home key event
  }

  $rect <510,100,740,140>
  inherited method OnLongHomeKeyActivated()
  {
    // neglect home key event
  }

  $rect <20,20,160,60>
  object Views::Rectangle BlackBackground
  {
    preset Bounds = <0,0,480,272>;
    preset Color = #000000FF;
  }

  $rect <20,20,160,60>
  object Components::BaseText CheckText
  {
    preset Bounds = <10,55,470,89>;
    preset WrapText = false;
    preset String = Strings::POP02_PLEASE_CHECK;
    preset Font = Fonts::NotoSansCjkJpMedium28pt;
  }

  $rect <20,20,160,60>
  object Views::Rectangle TopBar
  {
    preset Bounds = <0,0,480,43>;
    preset Color = #FFF500FF;
  }

  $rect <20,20,160,60>
  object Views::Image ErrorIcon
  {
    preset Bounds = <155,5,191,41>;
    preset Alignment = Views::ImageAlignment[AlignHorzCenter, AlignVertCenter, ScaleToFit];
    preset Bitmap = Resource::IconError;
    preset Visible = true;
  }

  $rect <20,20,160,60>
  object Components::BaseText ConnectionErrText
  {
    preset Bounds = <144,2,375,43>;
    preset AutoSize = true;
    preset Alignment = Views::TextAlignment[AlignHorzLeft, AlignVertCenter];
    preset String = Strings::POP02_CONNECTION_ERR;
    preset Font = Fonts::NotoSansCjkJpMedium28pt;
    preset Color = #000000FF;
    preset Visible = true;
  }

  $rect <20,20,160,60>
  object Views::Image ErrorBTIcon
  {
    preset Bounds = <215,105,265,155>;
    preset Alignment = Views::ImageAlignment[AlignHorzCenter, AlignVertCenter];
    preset Bitmap = Resource::IconErrorBT;
    preset Visible = true;
  }

  $rect <20,20,160,60>
  object Views::Image ErrorNavigationIcon
  {
    preset Bounds = <296,105,346,155>;
    preset Alignment = Views::ImageAlignment[AlignHorzCenter, AlignVertCenter];
    preset Bitmap = Resource::IconErrorNavigation;
    preset Visible = true;
  }

  $rect <20,20,160,60>
  object Views::Image ErrorPhoneLockIcon
  {
    preset Bounds = <134,105,184,155>;
    preset Alignment = Views::ImageAlignment[AlignHorzCenter, AlignVertCenter];
    preset Bitmap = Resource::IconErrorPhoneLock;
    preset Visible = true;
  }

  $rect <20,20,160,60>
  object Menu::UpDownPushButtonSet UpDownPushButtonSet
  {
    preset Bounds = <165,176,315,259>;
    preset PassHomeKey = true;
    preset PassMagicKey = true;
    preset DDModeEnabled = true;
    preset OnUpButtonActivated = OnOkButtonActivatedSlot;
    preset OnDownButtonActivated = OnDetailsButtonActivatedSlot;
    preset UpButtonTitle = Strings::GEN_OK;
    preset DownButtonTitle = Strings::POP02_DETAILS;
    preset DownButtonEnabled = true;
  }

  $rect <510,150,750,190>
  slot OnOkButtonActivatedSlot
  {
    var Application::Application App = (Application::Application)GetRoot();
    if( null != App )
    {
      App.SwitchToHome( Enum::HomeType.VEHICLE_INFO );
    }
  }

  $rect <510,200,760,240>
  slot OnDetailsButtonActivatedSlot
  {
    PresentDialog( new Pop::POP07_TROUBLE_SHOOTING, null, null, null, null, null, null, null, null, false );
  }
}

$rect <10,210,270,250>
$output false
$multilingual true
class POP07_TROUBLE_SHOOTING : Components::BaseMainBG
{
  $rect <10,290,190,330>
  inherited method Init()
  {
    trace "POP07";
  }

  $rect <10,390,240,430>
  inherited method OnShortEnterKeyActivated()
  {
    var Application::Application App = (Application::Application)GetRoot();
    if( null != App )
    {
      App.SwitchToHome( Enum::HomeType.VEHICLE_INFO );
    }
  }

  $rect <10,340,240,380>
  inherited method OnLongHomeKeyActivated()
  {
    var Application::Application App = (Application::Application)GetRoot();
    if( null != App )
    {
      App.SwitchToHome( Enum::HomeType.VEHICLE_INFO );
    }
  }

  $rect <20,20,160,60>
  inherited object BlackBG
  {
    preset Bounds = <0,0,480,272>;
  }

  $rect <20,20,160,60>
  object Views::Image Divider
  {
    preset Bounds = <0,44,480,48>;
    preset Alignment = Views::ImageAlignment[AlignHorzCenter, AlignVertCenter];
    preset Bitmap = Resource::SplitLineLarge;
  }

  $rect <20,20,160,60>
  object Views::Image ErrorPhoneLockIcon
  {
    preset Bounds = <10,56,60,106>;
    preset Alignment = Views::ImageAlignment[AlignHorzCenter, AlignVertCenter];
    preset Bitmap = Resource::IconErrorPhoneLock;
    preset Visible = true;
  }

  $rect <20,20,160,60>
  object Views::Image ErrorBTIcon
  {
    preset Bounds = <10,127,60,177>;
    preset Alignment = Views::ImageAlignment[AlignHorzCenter, AlignVertCenter];
    preset Bitmap = Resource::IconErrorBT;
    preset Visible = true;
  }

  $rect <20,20,160,60>
  object Views::Image ErrorNavigationIcon
  {
    preset Bounds = <10,198,60,248>;
    preset Alignment = Views::ImageAlignment[AlignHorzCenter, AlignVertCenter];
    preset Bitmap = Resource::IconErrorNavigation;
    preset Visible = true;
  }

  $rect <20,20,160,60>
  object Components::BaseText TroubleShootingTitle
  {
    preset Bounds = <10,4,470,41>;
    preset AutoSize = true;
    preset Alignment = Views::TextAlignment[AlignHorzCenter, AlignVertCenter];
    preset String = Strings::POP07_TROUBLE_SHOOTING;
    preset Font = Fonts::NotoSansCjkJpMedium28pt;
    preset Color = #FFFFFFFF;
    preset Visible = true;
  }

  $rect <20,20,160,60>
  object Components::BaseText TroubleShootingText1
  {
    preset Bounds = <68,49,440,111>;
    preset AutoSize = false;
    preset Alignment = Views::TextAlignment[AlignHorzLeft, AlignVertCenter];
    preset String = Strings::POP07_UNLOCK_PHONE;
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
    preset Color = #FFFFFFFF;
    preset Visible = true;
  }

  $rect <20,20,160,60>
  object Components::BaseText TroubleShootingText2
  {
    preset Bounds = <68,120,440,182>;
    preset AutoSize = false;
    preset Alignment = Views::TextAlignment[AlignHorzLeft, AlignVertCenter];
    preset String = Strings::POP07_TURN_ON_BT;
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
    preset Color = #FFFFFFFF;
    preset Visible = true;
  }

  $rect <20,20,160,60>
  object Components::BaseText TroubleShootingText3
  {
    preset Bounds = <68,191,440,253>;
    preset AutoSize = false;
    preset Alignment = Views::TextAlignment[AlignHorzLeft, AlignVertCenter];
    preset String = Strings::POP07_LAUNCH_APP;
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
    preset Color = #FFFFFFFF;
    preset Visible = true;
  }

  $rect <20,20,160,60>
  object Views::Image Divider1
  {
    preset Bounds = <0,115,480,119>;
    preset Alignment = Views::ImageAlignment[AlignHorzCenter, AlignVertCenter];
    preset Bitmap = Resource::SplitLineMiddle;
  }

  $rect <20,20,160,60>
  object Views::Image Divider2
  {
    preset Bounds = <0,186,480,190>;
    preset Alignment = Views::ImageAlignment[AlignHorzCenter, AlignVertCenter];
    preset Bitmap = Resource::SplitLineMiddle;
  }

  $rect <20,20,160,60>
  object Views::Image Divider3
  {
    preset Bounds = <0,257,480,261>;
    preset Alignment = Views::ImageAlignment[AlignHorzCenter, AlignVertCenter];
    preset Bitmap = Resource::SplitLineMiddle;
  }
}

$rect <10,10,270,50>
$output false
$multilingual true
class POP01_PleaseWait : Components::BaseMainBG
{
  $rect <530,60,730,100>
  inherited method Init()
  {
    trace "POP01";
  }

  $rect <532,290,762,330>
  inherited method OnShortHomeKeyActivated()
  {
    var Application::Application App = (Application::Application)GetRoot();
    if( null != App )
    {
      App.SwitchToMeterHome();
    }
  }

  $rect <530,248,760,288>
  inherited method OnLongHomeKeyActivated()
  {
    var Application::Application App = (Application::Application)GetRoot();
    if( null != App )
    {
      App.SwitchToMeterHome();
    }
  }

  $rect <20,20,160,60>
  inherited object BlackBG
  {
    preset Bounds = <0,0,480,272>;
    preset Color = #000000FF;
  }

  $rect <20,20,160,60>
  object Components::BaseText LoadingText
  {
    preset Bounds = <10,156,470,187>;
    preset String = Strings::GEN_PLEASE_WAIT;
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <20,20,160,60>
  object Views::Image LoadingAnimation
  {
    preset Bounds = <193,54,287,148>;
    preset Animated = true;
    preset Bitmap = Resource::LoadingAnimation;
  }

  $rect <532,120,792,160>
  object Core::Timer ConnectionFailedTimer
  {
    preset OnTrigger = OnConnectionFailedUpdateSlot;
    preset Period = 0;
    preset Begin = 5000;
    preset Enabled = true;
  }

  $rect <532,170,792,210>
  slot OnConnectionFailedUpdateSlot
  {
    ConnectionFailedTimer.Enabled = false;
    if( null != Owner )
    {
      Owner.SwitchToDialog( new Pop::POP02_ConnectionError, null, null, null, null, null, null, null, null, null, false );
    }
  }

  $rect <822,120,1092,160>
  object Core::SystemEventHandler NaviConnectUpdateEventHandler
  {
    preset OnEvent = OnNaviConnectUpdateSlot;
    preset Event = DeviceInterface::NavigationDevice.ConnectStatusUpdateEvent;
  }

  // This slot method is executed when the associated system event handler 'SystemEventHandler' \
  // receives an event.
  $rect <822,170,1092,210>
  slot OnNaviConnectUpdateSlot
  {
    ConnectionFailedTimer.Enabled = false;
    signal NaviAppConnectedSlot;
  }

  $rect <782,250,982,290>
  property slot NaviAppConnectedSlot;

  $reorder LoadingText 1
  $reorder LoadingAnimation 1
}

$rect <10,160,270,200>
$output false
$multilingual true
class POP04_Reset : Components::BaseMainBG
{
  $rect <510,40,690,80>
  inherited method Init()
  {
    trace "POP04";
  }

  $rect <20,20,160,60>
  object Components::BaseText ResetText
  {
    preset Bounds = <10,46,470,170>;
    preset String = Strings::GEN_RESET_QUESTION_MARK;
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <20,20,160,60>
  object Menu::UpDownPushButtonSet UpDownPushButtonSet
  {
    preset Bounds = <165,176,315,259>;
    preset PassHomeKey = true;
    preset PassMagicKey = true;
    preset OnUpButtonActivated = OnCancelButtonActivatedSlot;
    preset OnDownButtonActivated = OnOkButtonActivatedSlot;
    preset UpButtonTitle = Strings::GEN_CANCEL;
    preset DownButtonTitle = Strings::GEN_OK;
    preset DownButtonEnabled = true;
  }

  $rect <510,250,760,290>
  slot OnOkButtonActivatedSlot
  {
    DeviceInterface::VehicleDevice.SetData( Enum::VehicleTxType.RESET_METER, (uint32)SelectedMeterInfo );
    DismissThisDialog();
  }

  $rect <510,200,760,240>
  slot OnCancelButtonActivatedSlot
  {
    DismissThisDialog();
  }

  $rect <510,150,710,190>
  property Enum::MeterInfo SelectedMeterInfo;

  $rect <20,20,160,60>
  object Views::Image Divider
  {
    preset Bounds = <0,36,480,38>;
    preset Alignment = Views::ImageAlignment[AlignVertBottom, ScaleToFit];
    preset Bitmap = Resource::StatusBarDivider;
  }
}

$rect <330,110,570,150>
$output false
$multilingual true
class POP17_AppInitSettingError : Components::BaseMainBG
{
  $rect <20,290,200,330>
  inherited method Init()
  {
    trace "POP17";
  }

  $rect <20,20,160,60>
  object Components::BaseText AppInitSettingFailedMessage
  {
    preset Bounds = <10,50,470,236>;
    preset WrapText = true;
    preset String = Strings::POP17_APP_INIT_SETTING_FAILED;
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <570,80,760,120>
  object Core::Timer CountDownTimer
  {
    preset OnTrigger = OnLauncherScreenUpdateSlot;
    preset Period = 2000;
    preset Enabled = true;
  }

  $rect <760,80,960,120>
  slot OnLauncherScreenUpdateSlot
  {
    CountDownTimer.Enabled = false;
    var Application::Application App = (Application::Application)GetRoot();
    if( null != App )
    {
      App.ReturnToLauncher();
    }
  }
}

$rect <10,110,270,150>
$output false
$multilingual true
class POP03_HomeOfficeSettingError : Components::BaseMainBG
{
  $rect <510,30,690,70>
  inherited method Init()
  {
    trace "POP03";
  }

  $rect <20,20,160,60>
  object Components::BaseText HomeOfficeSettingFailedMessage
  {
    preset Bounds = <10,50,470,236>;
    preset WrapText = true;
    preset String = "";
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <510,130,700,170>
  object Core::Timer CountDownTimer
  {
    preset OnTrigger = OnLauncherScreenUpdateSlot;
    preset Period = 2000;
    preset Enabled = true;
  }

  $rect <700,130,900,170>
  slot OnLauncherScreenUpdateSlot
  {
    CountDownTimer.Enabled = false;
    signal ReturnToNaviHomeSlot;
  }

  $rect <510,200,710,240>
  property string ErrorMessage;

  $rect <510,240,710,280>
  onset ErrorMessage
  {
    if( pure ErrorMessage != value )
    {
      pure ErrorMessage = value;
      HomeOfficeSettingFailedMessage.String = ErrorMessage;
    }
  }

  $rect <20,20,160,60>
  object Views::Image Divider
  {
    preset Bounds = <0,36,480,38>;
    preset Alignment = Views::ImageAlignment[AlignVertBottom, ScaleToFit];
    preset Bitmap = Resource::StatusBarDivider;
  }

  $rect <510,300,710,340>
  property slot ReturnToNaviHomeSlot;
}

$rect <330,60,570,100>
$output false
$multilingual true
class POP16_NaviLoadingUI : Core::Group
{
  $rect <0,250,200,290>
  inherited property Bounds = <0,0,480,234>;

  $rect <20,20,160,60>
  object Views::Image NaviLoadingMainBottom
  {
    preset Bounds = <0,144,480,234>;
    preset Bitmap = Resource::MainBG;
  }

  $rect <20,20,160,60>
  object Views::Rectangle NaviLoadingBlackBG
  {
    preset Bounds = <0,0,480,144>;
    preset Color = #000000FF;
  }

  $rect <20,20,160,60>
  object Components::BaseText NaviLoadingText
  {
    preset Bounds = <10,118,470,149>;
    preset String = Strings::GEN_PLEASE_WAIT;
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <20,20,160,60>
  object Views::Image NaviLoadingAnimation
  {
    preset Bounds = <193,18,287,112>;
    preset Animated = false;
    preset Bitmap = Resource::LoadingAnimation;
  }

  $rect <210,250,410,290>
  property bool Animated;

  $rect <210,290,410,330>
  onset Animated
  {
    if( pure Animated != value )
    {
      pure Animated = value;
      NaviLoadingAnimation.Animated = value;
    }
  }
}
