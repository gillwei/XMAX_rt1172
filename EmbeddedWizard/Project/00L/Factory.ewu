$version 10.00

$rect <50,110,290,150>
class DisplayAutoRun : Components::BaseComponent
{
  $rect <20,340,200,380>
  inherited method Init()
  {
    PatternIdx = 0;
  }

  $rect <10,290,210,330>
  inherited property Bounds = <0,0,480,272>;

  $rect <230,290,430,330>
  inherited slot OnLongKeyPressed
  {
    var Core::KeyPressHandler CurrentKeyHandler = ( Core::KeyPressHandler )sender;
    if( null != CurrentKeyHandler && null != Owner )
    {
      switch( CurrentKeyHandler.Code )
      {
        case Core::KeyCode.Ok: Owner.DismissDialog( this, null, null, null, null, null, false );
        default:;
      }
    }
  }

  $rect <510,160,710,200>
  method void DisplayPattern( arg int32 aPatternIdx )
  {
    switch( aPatternIdx )
    {
      case 0:
      {
        FullScreen.Color = #FF0000FF;
        CenterBlock.Visible = false;
        ImagePattern.Visible = false;
      }
      case 1: FullScreen.Color = #00FF00FF;
      case 2: FullScreen.Color = #0000FFFF;
      case 3: FullScreen.Color = #FFFFFFFF;
      case 4: FullScreen.Color = #000000FF;
      case 5: FullScreen.Color = #808080FF;
      case 6: CenterBlock.Visible = true; // crosstalk
      case 7: // chessboard
      {
        ImagePattern.Bitmap = Resource::DisplayTest;
        ImagePattern.FrameNumber = 1;
        ImagePattern.Visible = true;
      }
      case 8: ImagePattern.FrameNumber = 2; // V-gradient
      case 9: ImagePattern.FrameNumber = 3; // H-gradient
      case 10: // color ball
      {
        $if !$prototyper
          Resource::ExternBitmap.Name = "DisplayFlicker";
        $endif
        ImagePattern.Bitmap = Resource::ExternBitmap;
        ImagePattern.FrameNumber = 0;
      }
      default:;
    }
  }

  $rect <510,60,710,100>
  property int32 PatternIdx = -1;

  $rect <510,110,710,150>
  onset PatternIdx
  {
    if( pure PatternIdx != value )
    {
      pure PatternIdx = value;
      DisplayPattern( PatternIdx );
    }
  }

  $rect <510,210,710,250>
  object Core::Timer TimerNextPattern
  {
    preset OnTrigger = OnTimerNextPatternSlot;
    preset Period = 1000;
    preset Enabled = true;
  }

  $rect <510,260,740,300>
  slot OnTimerNextPatternSlot
  {
    var int32 Idx = PatternIdx + 1;
    if( Idx >= TotalPatternNum )
    {
      Idx = 0;
    }
    PatternIdx = Idx;
  }

  $rect <510,10,710,50>
  var int32 TotalPatternNum = 11;

  $rect <20,20,160,60>
  object Views::Rectangle FullScreen
  {
    preset Bounds = <0,0,480,272>;
    preset Color = #FFFFFFFF;
  }

  $rect <20,20,160,60>
  object Views::Rectangle CenterBlock
  {
    preset Bounds = <120,68,360,204>;
    preset Color = #FFFFFFFF;
  }

  $rect <20,20,160,60>
  object Views::Image ImagePattern
  {
    preset Bounds = <0,0,480,272>;
    preset Bitmap = Resource::DisplayTest;
    preset Visible = false;
  }

  $rect <830,10,1030,50>
  property bool BurnInEnabled = false;

  $rect <830,58,1030,98>
  onset BurnInEnabled
  {
    trace "BurnInEnabled: ", value;
    if( pure BurnInEnabled != value )
    {
      pure BurnInEnabled = value;
      BurnInTimeText.Visible = value;
      BurnInResultText.Visible = value;
      FactoryTestEventHandler.Enabled = value;
    }

  }

  $rect <20,20,160,60>
  object Views::Text BurnInTimeText
  {
    preset Bounds = <78,15,405,99>;
    preset String = "00:00:00";
    preset Font = Fonts::NotoSansCjkJpMedium40pt;
    preset Color = #000000FF;
    preset Visible = false;
  }

  $rect <20,20,160,60>
  object Views::Text BurnInResultText
  {
    preset Bounds = <125,126,343,225>;
    preset String = "";
    preset Font = Fonts::NotoSansCjkJpMedium40pt;
    preset Color = #000000FF;
    preset Visible = false;
  }

  $rect <830,106,1100,146>
  object Core::SystemEventHandler FactoryTestEventHandler
  {
    preset OnEvent = OnFactoryTestEventReceivedSlot;
    preset Enabled = false;
    preset Event = DeviceInterface::SystemDevice.FactoryTestSystemEvent;
  }

  // This slot method is executed when the associated system event handler 'SystemEventHandler' \
  // receives an event.
  $rect <830,154,1100,194>
  slot OnFactoryTestEventReceivedSlot
  {
    var Factory::TestContext TestContext = ( Factory::TestContext )FactoryTestEventHandler.Context;
    if( null != TestContext )
    {
      switch( TestContext.TestItem )
      {
        case Enum::FactoryTest.BurnInTimeUpdate:
        {
          UpdateBurnInTime( TestContext.Data );
        }
        case Enum::FactoryTest.BurnInResult:
        {
          ShowBurnInTestResult( TestContext.Data );
        }
        default:;
      }
    }
  }

  $rect <830,202,1040,242>
  method void UpdateBurnInTime( arg int32 aTimeSec )
  {
    var int32 hour   = aTimeSec / 3600;
    var int32 minute = ( aTimeSec / 60 ) % 60;
    var int32 second = aTimeSec % 60;
    var string time_str;

    time_str = string( hour ) + ":";
    if( minute < 10 )
    {
      time_str += "0"; 
    }
    time_str += string( minute ) + ":"; 

    if( second < 10 )
    {
      time_str += '0'; 
    }
    time_str += string( second ); 

    BurnInTimeText.String = time_str;

  }

  $rect <830,250,1040,290>
  method void ShowBurnInTestResult( arg int32 aResult )
  {
    if( aResult )
    {
      BurnInResultText.String = "PASS";
      BurnInResultText.Color = #00FF00FF;
    }
    else
    {
      BurnInResultText.String = "FAIL";
      BurnInResultText.Color = #FF0000FF;
    }
  }
}

$rect <20,10,260,50>
$output false
class Main : Menu::BaseMenuView
{
  $rect <10,300,210,340>
  inherited property Bounds = <0,0,480,272>;

  $rect <510,160,730,200>
  inherited method DismissDialog()
  {
    super( aDialogGroup, aOverrideDismissTransition, aOverrideOverlayTransition, aOverrideRestoreTransition, aComplete, aCancel, aCombine );
    var Application::Application App = ( Application::Application )GetRoot();
    App.StatusBarVisible = true;
  }

  $rect <230,300,430,340>
  inherited slot OnLongKeyPressed
  {
    var Core::KeyPressHandler CurrentKeyHandler = ( Core::KeyPressHandler )sender;
    if( null != CurrentKeyHandler && null != Owner )
    {
      switch( CurrentKeyHandler.Code )
      {
        case Core::KeyCode.Ok: SlideOutDialog( this );
        default:;
      }
    }
  }

  $rect <510,10,710,50>
  inherited method LoadItemClass()
  {
    var class ItemClass = null;
    if( aItemNo >= 0 )
    {
      ItemClass = Menu::ItemBase;
    }
    return ItemClass;
  }

  $rect <510,60,710,100>
  inherited method LoadItemTitle()
  {
    var string Title = "";
    if( aItemNo < ItemTitleArray.size )
    {
      Title = ItemTitleArray[aItemNo];
    }
    return Title;
  }

  $rect <510,110,710,150>
  inherited method OnItemActivate()
  {
    if( null == aMenuItem )
    {
      // empty body to suppress warning
    }

    var Application::Application App = ( Application::Application )GetRoot();

    switch( aItemNo )
    {
      case 0:
      {
        App.StatusBarVisible = false;
        PresentDialog( new Factory::DisplayManual, null, null, null, null, null, null, null, null, false );
      }
      case 1:
      {
        App.StatusBarVisible = false;
        PresentDialog( new Factory::DisplayAutoRun, null, null, null, null, null, null, null, null, false );
      }
      default:;
    }
  }

  $rect <730,60,930,100>
  array string ItemTitleArray[ 2 ] =
  (
    Default[0] = "Display (Manual)";
    Default[1] = "Display (Auto Run)";
  );

  $rect <20,20,160,60>
  object Menu::VerticalMenu Menu
  {
    preset Bounds = <10,32,470,272>;
    preset PassKeyHold = OnLongKeyPressed;
    preset NoOfItems = ItemTitleArray.size;
  }

  $reorder SlideInDialog 4
  $reorder LoadItemClass 4
  $reorder LoadItemTitle 4
  $reorder OnItemActivate 4
  $reorder Rectangle 4
  $reorder LoadItemChecked 4
  $reorder ItemTitleArray 4
  $reorder Menu 4
}

$rect <50,60,290,100>
class DisplayManual : Components::BaseComponent
{
  $rect <10,290,210,330>
  inherited property Bounds = <0,0,480,272>;

  $rect <230,290,430,330>
  inherited slot OnLongKeyPressed
  {
    var Core::KeyPressHandler CurrentKeyHandler = ( Core::KeyPressHandler )sender;
    if( null != CurrentKeyHandler && null != Owner )
    {
      switch( CurrentKeyHandler.Code )
      {
        case Core::KeyCode.Ok: Owner.DismissDialog( this, null, null, null, null, null, false );
        default:;
      }
    }
  }

  $rect <230,390,430,430>
  inherited method OnShortDownKeyPressed()
  {
    var int32 NextIdx = PatternIdx + 1;
    if( NextIdx >= TotalPatternNum )
    {
      NextIdx = 0;
    }
    PatternIdx = NextIdx;
  }

  $rect <230,340,430,380>
  inherited method OnShortUpKeyPressed()
  {
    var int32 PreviousIdx = PatternIdx - 1;
    if( PreviousIdx < 0 )
    {
      PreviousIdx = TotalPatternNum - 1;
    }
    PatternIdx = PreviousIdx;
  }

  $rect <510,10,710,50>
  var int32 TotalPatternNum = 17;

  $rect <510,60,710,100>
  property int32 PatternIdx = 0;

  $rect <510,110,710,150>
  onset PatternIdx
  {
    if( pure PatternIdx != value )
    {
      pure PatternIdx = value;
      DisplayPattern( PatternIdx );
    }
  }

  $rect <510,160,710,200>
  method void DisplayPattern( arg int32 aPatternIdx )
  {
    switch( aPatternIdx )
    {
      case 0: // full black with white frame
      {
        ImagePattern.Visible = false;
        CenterBlock.Visible = false;
        OuterFrame.Visible = true;
        FullScreen.Color = #000000FF;
      }
      case 1: // colorbar
      {
        ImagePattern.Bitmap = Resource::DisplayTest;
        ImagePattern.FrameNumber = 0;
        ImagePattern.Visible = true;
      }
      case 2: // full red
      {
        ImagePattern.Visible = false;
        CenterBlock.Visible = false;
        OuterFrame.Visible = false;
        FullScreen.Color = #FF0000FF;
      }
      case 3: // full green
      {
        ImagePattern.Visible = false;
        CenterBlock.Visible = false;
        OuterFrame.Visible = false;
        FullScreen.Color = #00FF00FF;
      }
      case 4: // full blue
      {
        ImagePattern.Visible = false;
        CenterBlock.Visible = false;
        OuterFrame.Visible = false;
        FullScreen.Color = #0000FFFF;
      }
      case 5: // full white
      {
        ImagePattern.Visible = false;
        CenterBlock.Visible = false;
        OuterFrame.Visible = false;
        FullScreen.Color = #FFFFFFFF;
      }
      case 6: // full black
      {
        ImagePattern.Visible = false;
        CenterBlock.Visible = false;
        OuterFrame.Visible = false;
        FullScreen.Color = #000000FF;
      }
      case 7: // gray186
      {
        ImagePattern.Visible = false;
        CenterBlock.Visible = false;
        OuterFrame.Visible = false;
        FullScreen.Color = #BABABAFF;
      }
      case 8: // crosstalk
      {
        ImagePattern.Visible = false;
        CenterBlock.Visible = true;
        OuterFrame.Visible = false;
        FullScreen.Color = #808080FF; // gray128
      }
      case 9: // gray128
      {
        ImagePattern.Visible = false;
        CenterBlock.Visible = false;
        OuterFrame.Visible = false;
        FullScreen.Color = #808080FF;
      }
      case 10: // chessboard
      {
        ImagePattern.Bitmap = Resource::DisplayTest;
        ImagePattern.FrameNumber = 1;
        ImagePattern.Visible = true;
        CenterBlock.Visible = false;
      }
      case 11: // gray186
      {
        ImagePattern.Visible = false;
        CenterBlock.Visible = false;
        OuterFrame.Visible = false;
        FullScreen.Color = #BABABAFF;
      }
      case 12: // color ball
      {
        ImagePattern.Bitmap = Resource::DisplayTest;
        ImagePattern.FrameNumber = 4;
        ImagePattern.Visible = true;
      }
      case 13: // V-gradient
      {
        ImagePattern.Bitmap = Resource::DisplayTest;
        ImagePattern.FrameNumber = 2;
        ImagePattern.Visible = true;
      }
      case 14: // H-gradient
      {
        ImagePattern.Bitmap = Resource::DisplayTest;
        ImagePattern.FrameNumber = 3;
        ImagePattern.Visible = true;
      }
      case 15: // flicker
      {
        $if !$prototyper
          Resource::ExternBitmap.Name = "DisplayFlicker";
        $endif
        ImagePattern.Bitmap = Resource::ExternBitmap;
        ImagePattern.FrameNumber = 0;
        ImagePattern.Visible = true;
      }
      case 16: // gray64
      {
        ImagePattern.Visible = false;
        CenterBlock.Visible = false;
        OuterFrame.Visible = false;
        FullScreen.Color = #404040FF;
      }
      default:;
    }
  }

  $rect <20,20,160,60>
  object Views::Rectangle FullScreen
  {
    preset Bounds = <0,0,480,272>;
    preset Color = #000000FF;
  }

  $rect <20,20,160,60>
  object Views::Rectangle CenterBlock
  {
    preset Bounds = <120,68,360,204>;
    preset Color = #FFFFFFFF;
    preset Visible = false;
  }

  $rect <20,20,160,60>
  object Views::Border OuterFrame
  {
    preset Bounds = <0,0,480,272>;
  }

  $rect <20,20,160,60>
  object Views::Image ImagePattern
  {
    preset Bounds = <0,0,480,272>;
    preset Bitmap = Resource::DisplayTest;
    preset Visible = false;
  }
}

$rect <320,10,520,50>
$output false
class TestContext
{
  $rect <20,10,220,50>
  var Enum::FactoryTest TestItem;

  $rect <20,60,220,100>
  var int32 Data;
}
