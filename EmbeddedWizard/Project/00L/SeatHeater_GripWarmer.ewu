$version 11.00

$rect <20,40,220,80>
$output false
class SHT02_GPW02_Main : Menu::BaseMenuView
{
  $rect <260,310,460,350>
  inherited method Init()
  {
    ScaleIndicator = new SeatHeater_GripWarmer::ScaleIndicator;
    $if !$prototyper
      switch( DeviceInterface::VehicleDevice.CurrentVehicleFunction )
      {
        case Enum::VehicleSupportedFunction.SEAT_HEATER:
        {
          UpdateLevel( Enum::VehicleRxType.SEAT_HEATER_VALUE_LOW );
          UpdateLevel( Enum::VehicleRxType.SEAT_HEATER_VALUE_MIDDLE );
          UpdateLevel( Enum::VehicleRxType.SEAT_HEATER_VALUE_HIGH );
        }
        case Enum::VehicleSupportedFunction.GRIP_WARMER:
        {
          UpdateLevel( Enum::VehicleRxType.GRIP_WARMER_VALUE_LOW );
          UpdateLevel( Enum::VehicleRxType.GRIP_WARMER_VALUE_MIDDLE );
          UpdateLevel( Enum::VehicleRxType.GRIP_WARMER_VALUE_HIGH );
        }
        default:;
      }
    $else
      // For testing in prototype and screenshot
      UpdateLevel( Enum::VehicleRxType.SEAT_HEATER_VALUE_LOW );
      UpdateLevel( Enum::VehicleRxType.SEAT_HEATER_VALUE_MIDDLE );
      UpdateLevel( Enum::VehicleRxType.SEAT_HEATER_VALUE_HIGH );

      ScaleIndicator.LevelUpUpdateSignal = OnLevelUpUpdateSlot;
      ScaleIndicator.LevelDownUpdateSignal = OnLevelDownUpdateSlot;
    $endif
  }

  $rect <20,470,220,510>
  inherited property DDModeEnabled = true;

  $rect <20,410,220,450>
  inherited var SlideOutEffectEnabled = true;

  $rect <520,30,720,70>
  inherited method LoadItemClass()
  {
    // suppress warning
    aItemNo;

    return Menu::ItemBaseValue;
  }

  $rect <520,90,720,130>
  inherited method LoadItemTitle()
  {
    var string title = "";
    if( aItemNo < ItemTitleArray.size )
    {
      title = ItemTitleArray[aItemNo];
    }
    return title;
  }

  $rect <520,270,720,310>
  inherited method OnItemActivate()
  {
    // suppress warning
    aMenuItem;

    ScaleIndicator.LevelValue = (int32)ItemValueArray[aItemNo];
    ItemIdx = aItemNo;

    switch( aItemNo )
    {
      case 0:
      {
        if( true == ItemValidStatusArray[0] )
        {
          ScaleIndicator.ScaleIndicatorType = Enum::SeatHeaterGripWarmerLevelType.LOW;
          DeviceInterface::VehicleDevice.SetData( Enum::VehicleTxType.HEATER_LEVEL, (uint32)Enum::SeatHeaterGripWarmerLevelType.LOW );
          PresentDialog( ScaleIndicator, null, null, null, null, null, null, null, null, false );
        }
      }
      case 1:
      {
        if( true == ItemValidStatusArray[1] )
        {
          ScaleIndicator.ScaleIndicatorType = Enum::SeatHeaterGripWarmerLevelType.MID;
          DeviceInterface::VehicleDevice.SetData( Enum::VehicleTxType.HEATER_LEVEL, (uint32)Enum::SeatHeaterGripWarmerLevelType.MID );
          PresentDialog( ScaleIndicator, null, null, null, null, null, null, null, null, false );
        }
      }
      case 2:
      {
        if( true == ItemValidStatusArray[2] )
        {
          ScaleIndicator.ScaleIndicatorType = Enum::SeatHeaterGripWarmerLevelType.HIGH;
          DeviceInterface::VehicleDevice.SetData( Enum::VehicleTxType.HEATER_LEVEL, (uint32)Enum::SeatHeaterGripWarmerLevelType.HIGH );
          PresentDialog( ScaleIndicator, null, null, null, null, null, null, null, null, false );
        }
      }
      default:;
    }
  }

  $rect <520,210,720,250>
  inherited method LoadItemEnabled()
  {
    aItemNo;
    return !DeviceInterface::VehicleDevice.IsTimeoutError2Detected;
  }

  $rect <20,20,160,60>
  inherited object Menu
  {
    preset DDModeEnabled = true;
    preset NoOfItems = 3;
  }

  $rect <520,150,720,190>
  inherited method LoadItemBaseValue()
  {
    var string val = "";
    if( aItemNo < ItemValueArray.size )
    {
      if( true == ItemValidStatusArray[aItemNo] )
      {
        val = string( ItemValueArray[aItemNo] );
      }
      else
      {
        val = Strings::GEN_THREE_HYPHENS;
      }
    }
    return val;
  }

  $rect <760,90,960,130>
  array uint32 ItemValueArray[ 3 ];

  $rect <760,30,960,70>
  array string ItemTitleArray[ 3 ] =
  (
    Default[0] = Strings::GEN_LOW;
    Default[1] = Strings::GEN_MIDDLE;
    Default[2] = Strings::GEN_HIGH;
  );

  $rect <23,296,223,336>
  var SeatHeater_GripWarmer::ScaleIndicator ScaleIndicator;

  $rect <520,380,720,420>
  slot OnLevelUpUpdateSlot
  {
    $if $prototyper
    if( ItemValueArray[ItemIdx] < SeatHeater_GripWarmer::MAX_LEVEL )
    {
      var int32 i;
      switch( ItemIdx )
      {
        case 0:
        {
          if( ( ItemValueArray[ItemIdx]+1 ) == ItemValueArray[ItemIdx+1] &&
              ( ItemValueArray[ItemIdx+1] + 1 ) == ItemValueArray[ItemIdx+2] &&
              ItemValueArray[ItemIdx+2] < 10 )
          {
            i = ItemIdx;
            for( i = ItemIdx; i < ItemValueArray.size; i++ )
            {
              ItemValueArray[i]++;
            }
          }
          else if( ( ItemValueArray[ItemIdx]+1 ) == ItemValueArray[ItemIdx+1] &&
                   ItemValueArray[ItemIdx+1] < 9 )
          {
            i = ItemIdx;
            for( i = ItemIdx; i < ItemValueArray.size - 1; i++ )
            {
              ItemValueArray[i]++;
            }
          }
          else if( ItemValueArray[ItemIdx] < 8 )
          {
            ItemValueArray[ItemIdx]++;
          }
        }
        case 1:
        {
          if( ( ItemValueArray[ItemIdx]+1 ) == ItemValueArray[ItemIdx+1] &&
              ItemValueArray[ItemIdx+1] < 10 )
          {
            i = ItemIdx;
            for( i = ItemIdx; i < ItemValueArray.size; i++ )
            {
              ItemValueArray[i]++;
            }
          }
          else if( ItemValueArray[ItemIdx] < 9 )
          {
            ItemValueArray[ItemIdx]++;
          }
        }
        case 2:
        {
          if( ItemValueArray[ItemIdx] < 10 )
          {
            ItemValueArray[ItemIdx]++;
          }
        }
        default:;
      }
      Menu.InvalidateItems( 0, ItemTitleArray.size - 1 );
    }
    $endif

  }

  $rect <20,350,220,390>
  var int32 ItemIdx;

  $rect <520,430,720,470>
  slot OnLevelDownUpdateSlot
  {
    $if $prototyper
    if( ItemValueArray[ItemIdx] > SeatHeater_GripWarmer::MIN_LEVEL )
    {
      var int32 i;
      switch( ItemIdx )
      {
        case 0:
        {
          if( ItemValueArray[ItemIdx] > 0 )
          {
            ItemValueArray[ItemIdx]--;
          }
        }
        case 1:
        {
          if( ( ItemValueArray[ItemIdx]-1 ) == ItemValueArray[ItemIdx-1] &&
              ItemValueArray[ItemIdx-1] > 0 )
          {
            i = ItemIdx;
            for( i = ItemIdx; i >= 0; i-- )
            {
              ItemValueArray[i]--;
            }
          }
          else if( ItemValueArray[ItemIdx] > 2 )
          {
            ItemValueArray[ItemIdx]--;
          }
        }
        case 2:
        {
          if( ( ItemValueArray[ItemIdx]-1 ) == ItemValueArray[ItemIdx-1] &&
              ( ItemValueArray[ItemIdx-1] - 1 ) == ItemValueArray[ItemIdx-2] &&
              ItemValueArray[ItemIdx-2] > 0 )
          {
            i = ItemIdx;
            for( i = ItemIdx; i >= 0; i-- )
            {
              ItemValueArray[i]--;
            }
          }
          else if( ( ItemValueArray[ItemIdx]-1 ) == ItemValueArray[ItemIdx-1] &&
                   ItemValueArray[ItemIdx-1] > 1 )
          {
            i = ItemIdx;
            for( i = ItemIdx; i >= 1; i-- )
            {
              ItemValueArray[i]--;
            }
          }
          else if( ItemValueArray[ItemIdx] > 3 )
          {
            ItemValueArray[ItemIdx]--;
          }
        }
        default:;
      }
      Menu.InvalidateItems( 0, ItemTitleArray.size - 1 );
    }
    $endif
  }

  $rect <750,160,950,200>
  object Core::SystemEventHandler VehicleDataReceivedEventHandler
  {
    preset OnEvent = OnVehicleDataReceivedSlot;
    preset Event = DeviceInterface::VehicleDevice.VehicleDataReceivedSystemEvent;
  }

  // This slot method is executed when the associated system event handler 'SystemEventHandler' \
  // receives an event.
  $rect <950,160,1150,200>
  slot OnVehicleDataReceivedSlot
  {
    var DeviceInterface::VehicleDataClass VehicleData = ( DeviceInterface::VehicleDataClass )VehicleDataReceivedEventHandler.Context;
    if( null != VehicleData )
    {
      switch( VehicleData.RxType )
      {
        case Enum::VehicleRxType.SEAT_HEATER_VALUE_LOW,
             Enum::VehicleRxType.SEAT_HEATER_VALUE_MIDDLE,
             Enum::VehicleRxType.SEAT_HEATER_VALUE_HIGH:
        {
          if( DeviceInterface::VehicleDevice.CurrentVehicleFunction == Enum::VehicleSupportedFunction.SEAT_HEATER )
          {
            UpdateLevel( VehicleData.RxType );
          }
        }
        case Enum::VehicleRxType.GRIP_WARMER_VALUE_LOW,
             Enum::VehicleRxType.GRIP_WARMER_VALUE_MIDDLE,
             Enum::VehicleRxType.GRIP_WARMER_VALUE_HIGH:
        {
          if( DeviceInterface::VehicleDevice.CurrentVehicleFunction == Enum::VehicleSupportedFunction.GRIP_WARMER )
          {
            UpdateLevel( VehicleData.RxType );
          }
        }
        case Enum::VehicleRxType.TIMEOUT_ERROR2_UPDATED:
        {
          Menu.InvalidateItems( 0, Menu.NoOfItems-1 );
        }
        default:;
      }
    }
  }

  $rect <750,360,950,400>
  method void UpdateLevel( arg Enum::VehicleRxType aNewType )
  {
    var DeviceInterface::VehicleDataClass VehicleData;
    switch( aNewType )
    {
      case Enum::VehicleRxType.SEAT_HEATER_VALUE_LOW, Enum::VehicleRxType.GRIP_WARMER_VALUE_LOW:
      {
        if( aNewType == Enum::VehicleRxType.SEAT_HEATER_VALUE_LOW )
        {
          VehicleData = DeviceInterface::VehicleDevice.GetData( Enum::VehicleRxType.SEAT_HEATER_VALUE_LOW );
        }
        else
        {
          VehicleData = DeviceInterface::VehicleDevice.GetData( Enum::VehicleRxType.GRIP_WARMER_VALUE_LOW );
        }

        if( null != VehicleData &&
            VehicleData.Valid &&
            SeatHeater_GripWarmer::MAX_LEVEL >= VehicleData.DataUInt32 &&
            VehicleData.DataUInt32 >= SeatHeater_GripWarmer::MIN_LEVEL )
        {
          ItemValidStatusArray[0] = true;
          ItemValueArray[0] = VehicleData.DataUInt32;
          if( Enum::SeatHeaterGripWarmerLevelType.LOW == ScaleIndicator.ScaleIndicatorType )
          {
            ScaleIndicator.LevelValue = (int32)VehicleData.DataUInt32;
          }
          Menu.InvalidateItems( 0, 0 );
        }
        else if( !VehicleData.Valid )
        {
          ItemValidStatusArray[0] = false;
          Menu.InvalidateItems( 0, 0 );
        }
        else
        {
          // empty.
        }
      }
      case Enum::VehicleRxType.SEAT_HEATER_VALUE_MIDDLE, Enum::VehicleRxType.GRIP_WARMER_VALUE_MIDDLE:
      {
        if( aNewType == Enum::VehicleRxType.SEAT_HEATER_VALUE_MIDDLE )
        {
          VehicleData = DeviceInterface::VehicleDevice.GetData( Enum::VehicleRxType.SEAT_HEATER_VALUE_MIDDLE );
        }
        else
        {
          VehicleData = DeviceInterface::VehicleDevice.GetData( Enum::VehicleRxType.GRIP_WARMER_VALUE_MIDDLE );
        }

        if( null != VehicleData &&
            VehicleData.Valid &&
            SeatHeater_GripWarmer::MAX_LEVEL >= VehicleData.DataUInt32 &&
            VehicleData.DataUInt32 >= SeatHeater_GripWarmer::MIN_LEVEL )
        {
          ItemValidStatusArray[1] = true;
          ItemValueArray[1] = VehicleData.DataUInt32;
          if( Enum::SeatHeaterGripWarmerLevelType.MID == ScaleIndicator.ScaleIndicatorType )
          {
            ScaleIndicator.LevelValue = (int32)VehicleData.DataUInt32;
          }
          Menu.InvalidateItems( 1, 1 );
        }
        else if( !VehicleData.Valid )
        {
          ItemValidStatusArray[1] = false;
          Menu.InvalidateItems( 1, 1 );
        }
        else
        {
          // empty.
        }
      }
      case Enum::VehicleRxType.SEAT_HEATER_VALUE_HIGH, Enum::VehicleRxType.GRIP_WARMER_VALUE_HIGH:
      {
        if( aNewType == Enum::VehicleRxType.SEAT_HEATER_VALUE_HIGH )
        {
          VehicleData = DeviceInterface::VehicleDevice.GetData( Enum::VehicleRxType.SEAT_HEATER_VALUE_HIGH );
        }
        else
        {
          VehicleData = DeviceInterface::VehicleDevice.GetData( Enum::VehicleRxType.GRIP_WARMER_VALUE_HIGH );
        }

        if( null != VehicleData &&
            VehicleData.Valid &&
            SeatHeater_GripWarmer::MAX_LEVEL >= VehicleData.DataUInt32 &&
            VehicleData.DataUInt32 >= SeatHeater_GripWarmer::MIN_LEVEL )
        {
          ItemValidStatusArray[2] = true;
          ItemValueArray[2] = VehicleData.DataUInt32;
          if( Enum::SeatHeaterGripWarmerLevelType.HIGH == ScaleIndicator.ScaleIndicatorType )
          {
            ScaleIndicator.LevelValue = (int32)VehicleData.DataUInt32;
          }
          Menu.InvalidateItems( 2, 2 );
        }
        else if( !VehicleData.Valid )
        {
          ItemValidStatusArray[2] = false;
          Menu.InvalidateItems( 2, 2 );
        }
        else
        {
          // empty.
        }
      }
      default:;
    }
  }

  $rect <970,30,1170,70>
  array bool ItemValidStatusArray[ 3 ];
}

$rect <250,40,450,80>
$output false
class ScaleIndicator : Components::BaseMainBG
{
  $rect <0,300,200,340>
  inherited property Bounds = <0,0,480,272>;

  $rect <820,160,1020,200>
  inherited method OnShortDownKeyActivated()
  {
    if( !DeviceInterface::VehicleDevice.IsTimeoutError2Detected && SeatHeater_GripWarmer::MIN_LEVEL < LevelValue )
    {
      DeviceInterface::VehicleDevice.SetData( Enum::VehicleTxType.BUTTON_STATUS_AUDIO, SeatHeater_GripWarmer::BUTTON_STATUS_AUDIO_DOWN_CODE );
    }
    $if $prototyper
    switch( ScaleIndicatorType )
    {
      case Enum::SeatHeaterGripWarmerLevelType.LOW:
      {
        if( LevelValue > 1 )
        {
          LevelValue = LevelValue - 1;
          signal LevelDownUpdateSignal;
        }
      }
      case Enum::SeatHeaterGripWarmerLevelType.MID:
      {
        if( LevelValue > 2 )
        {
          LevelValue = LevelValue - 1;
          signal LevelDownUpdateSignal;
        }
      }
      case Enum::SeatHeaterGripWarmerLevelType.HIGH:
      {
        if( LevelValue > 3 )
        {
          LevelValue = LevelValue - 1;
          signal LevelDownUpdateSignal;
        }
      }
      default:;
    }
    $endif
  }

  $rect <820,120,1020,160>
  inherited method OnShortUpKeyActivated()
  {
    if( !DeviceInterface::VehicleDevice.IsTimeoutError2Detected && SeatHeater_GripWarmer::MAX_LEVEL > LevelValue )
    {
      DeviceInterface::VehicleDevice.SetData( Enum::VehicleTxType.BUTTON_STATUS_AUDIO, SeatHeater_GripWarmer::BUTTON_STATUS_AUDIO_UP_CODE );
    }
    $if $prototyper
    switch( ScaleIndicatorType )
    {
      case Enum::SeatHeaterGripWarmerLevelType.LOW:
      {
        if( LevelValue < 8 )
        {
          LevelValue = LevelValue + 1;
          signal LevelUpUpdateSignal;
        }
      }
      case Enum::SeatHeaterGripWarmerLevelType.MID:
      {
        if( LevelValue < 9 )
        {
          LevelValue = LevelValue + 1;
          signal LevelUpUpdateSignal;
        }
      }
      case Enum::SeatHeaterGripWarmerLevelType.HIGH:
      {
        if( LevelValue < 10 )
        {
          LevelValue = LevelValue + 1;
          signal LevelUpUpdateSignal;
        }
      }
      default:;
    }
    $endif
  }

  $rect <820,210,1020,250>
  inherited method OnShortEnterKeyActivated()
  {
    OnShortHomeKeyActivated();
  }

  $rect <10,400,210,440>
  inherited property DDModeEnabled = true;

  $rect <20,20,160,60>
  inherited object MainBottomBG
  {
    preset Visible = false;
  }

  $rect <20,20,160,60>
  inherited object BlackBG
  {
    preset Visible = false;
  }

  $rect <20,20,160,60>
  object Views::Image ScaleIndicatorWindow
  {
    preset Bounds = <193,39,395,268>;
    preset Bitmap = Resource::ScaleIndicatorWindowLow;
  }

  $rect <20,20,160,60>
  object Views::Image ScaleIndicatorBg
  {
    preset Bounds = <193,39,395,268>;
    preset Bitmap = Resource::ScaleIndicatorBg;
  }

  $rect <20,20,160,60>
  object Views::Image ScaleIndicatorBar
  {
    preset Bounds = <230,219,355,238>;
    preset Bitmap = Resource::ScaleIndicatorBar;
  }

  $rect <550,20,750,60>
  property Enum::SeatHeaterGripWarmerLevelType ScaleIndicatorType;

  $rect <550,60,750,100>
  onset ScaleIndicatorType
  {
    if( pure ScaleIndicatorType != value )
    {
      pure ScaleIndicatorType = value;

      switch( ScaleIndicatorType )
      {
        case Enum::SeatHeaterGripWarmerLevelType.LOW: ScaleIndicatorWindow.Bitmap = Resource::ScaleIndicatorWindowLow;
        case Enum::SeatHeaterGripWarmerLevelType.MID: ScaleIndicatorWindow.Bitmap = Resource::ScaleIndicatorWindowMid;
        case Enum::SeatHeaterGripWarmerLevelType.HIGH: ScaleIndicatorWindow.Bitmap = Resource::ScaleIndicatorWindowHigh;
        default:;
      }
    }
  }

  $rect <830,20,1030,60>
  property int32 LevelValue;

  $rect <830,60,1030,100>
  onset LevelValue
  {
    if( pure LevelValue != value )
    {
      pure LevelValue = value;
      if( !DeviceInterface::VehicleDevice.IsTimeoutError2Detected )
      {
        ScaleIndicatorBar.FrameNumber = 1;
        var rect NewBounds;
        NewBounds.x1 = ScaleIndicatorBarOriBounds.x1;
        NewBounds.y1 = ScaleIndicatorBarOriBounds.y1 - 18*( LevelValue - 1 );
        NewBounds.x2 = ScaleIndicatorBarOriBounds.x2;
        NewBounds.y2 = ScaleIndicatorBarOriBounds.y2 - 18*( LevelValue - 1 );

        ScaleIndicatorBar.Bounds = NewBounds;
      }
      else
      {
        ScaleIndicatorBar.FrameNumber = 0;
      }
    }
  }

  $rect <550,250,750,290>
  property slot LevelUpUpdateSignal;

  $rect <0,350,200,390>
  var rect ScaleIndicatorBarOriBounds = <230,219,355,238>;

  $rect <550,300,750,340>
  property slot LevelDownUpdateSignal;

  $rect <790,270,990,310>
  object Core::SystemEventHandler VehicleDataReceivedEventHandler
  {
    preset OnEvent = OnVehicleDataReceivedSlot;
    preset Event = DeviceInterface::VehicleDevice.VehicleDataReceivedSystemEvent;
  }

  // This slot method is executed when the associated system event handler 'SystemEventHandler' \
  // receives an event.
  $rect <990,270,1190,310>
  slot OnVehicleDataReceivedSlot
  {
    var DeviceInterface::VehicleDataClass VehicleData = ( DeviceInterface::VehicleDataClass )VehicleDataReceivedEventHandler.Context;
    if( null != VehicleData && Enum::VehicleRxType.TIMEOUT_ERROR2_UPDATED == VehicleData.RxType )
    {
      if( !DeviceInterface::VehicleDevice.IsTimeoutError2Detected )
      {
        ScaleIndicatorBar.FrameNumber = 1;
      }
      else
      {
        ScaleIndicatorBar.FrameNumber = 0;
      }
    }
  }
}

$rect <20,100,220,140>
$output false
const rect TITLE_BOUNDS = <37,1,193,69>;

$rect <20,150,220,190>
$output false
const rect VALUE_BOUNDS = <385,1,418,69>;

$rect <20,200,220,240>
$output false
const uint32 MAX_LEVEL = 10;

$rect <20,250,220,290>
$output false
const uint32 MIN_LEVEL = 1;

$rect <250,150,480,190>
$output false
const uint32 BUTTON_STATUS_AUDIO_UP_CODE = 1;

$rect <250,100,480,140>
$output false
const uint32 BUTTON_STATUS_AUDIO_DOWN_CODE = 0;

$rect <20,310,220,350>
$output false
const uint32 GRIP_WARMER = 0;

$rect <20,360,220,400>
$output false
const uint32 RIDER_SEAT_HEATER = 1;

$rect <560,40,900,80>
$output false
class SHT01_GPW01_WSC01_VehicleFunction : Components::BaseMainBG
{
  $rect <50,300,250,340>
  inherited method Init()
  {
    $if !$prototyper
      if( DeviceInterface::VehicleDevice.CurrentVehicleFunction == Enum::VehicleSupportedFunction.SEAT_HEATER )
      {
        CurrentItemTitleText.String = Strings::LNC_SEAT_HEATER;
        UpdateHeaterLevel( Enum::VehicleRxType.SEAT_HEATER_STATUS );
      }
      else if( DeviceInterface::VehicleDevice.CurrentVehicleFunction == Enum::VehicleSupportedFunction.GRIP_WARMER )
      {
        CurrentItemTitleText.String = Strings::GPW01_GRIP_WARMER;
        UpdateHeaterLevel( Enum::VehicleRxType.GRIP_WARMER_STATUS );
      }
      else if( DeviceInterface::VehicleDevice.CurrentVehicleFunction == Enum::VehicleSupportedFunction.WIND_SCREEN )
      {
        CurrentItemTitleText.String = Strings::WSC01_WIND_SCREEN;
        ControlUpButton.Bitmap = Resource::ControlUpButtonArrow;
        ControlDownButton.Bitmap = Resource::ControlDownButtonArrow;
      }
      else
      {
        trace "Unexpected vehicle function";
      }
    $else
      // for screenshort
      CurrentItemTitleText.String = Strings::LNC_SEAT_HEATER;
      UpdateHeaterLevel( Enum::VehicleRxType.SEAT_HEATER_STATUS );
    $endif

  }

  $rect <50,360,250,400>
  inherited method UpdateViewState()
  {
    super( aState );

    if( DeviceInterface::VehicleDevice.CurrentVehicleFunction == Enum::VehicleSupportedFunction.SEAT_HEATER ||
        DeviceInterface::VehicleDevice.CurrentVehicleFunction == Enum::VehicleSupportedFunction.GRIP_WARMER )
    {
      if( SeatHeater_GripWarmer::LOWEST_STATUS <= (uint32)HeaterSettingStatus &&
          SeatHeater_GripWarmer::HIGHEST_STATUS >= (uint32)HeaterSettingStatus )
      {
        switch( HeaterSettingStatus )
        {
          case Enum::HeaterSettingStatusType.OFF:
          {
            if( DeviceInterface::VehicleDevice.CurrentVehicleFunction == Enum::VehicleSupportedFunction.SEAT_HEATER )
            {
              VehicleFunctionIcon.Bitmap = Resource::IconSeatHeater0Large;
            }
            else
            {
              VehicleFunctionIcon.Bitmap = Resource::IconGripWarmer0Large;
            }

            if( !DeviceInterface::VehicleDevice.IsTimeoutError2Detected )
            {
              VehicleFunctionIcon.FrameNumber = 1;
              ControlUpButton.FrameNumber = 0;
              ControlDownButton.FrameNumber = 1;
            }
            else
            {
              VehicleFunctionIcon.FrameNumber = 0;
              ControlUpButton.FrameNumber = 1;
              ControlDownButton.FrameNumber = 1;
            }
          }
          case Enum::HeaterSettingStatusType.LOW:
          {
            if( DeviceInterface::VehicleDevice.CurrentVehicleFunction == Enum::VehicleSupportedFunction.SEAT_HEATER )
            {
              VehicleFunctionIcon.Bitmap = Resource::IconSeatHeater1Large;
            }
            else
            {
              VehicleFunctionIcon.Bitmap = Resource::IconGripWarmer1Large;
            }

            if( !DeviceInterface::VehicleDevice.IsTimeoutError2Detected )
            {
              VehicleFunctionIcon.FrameNumber = 1;
              ControlUpButton.FrameNumber = 0;
              ControlDownButton.FrameNumber = 0;
            }
            else
            {
              VehicleFunctionIcon.FrameNumber = 0;
              ControlUpButton.FrameNumber = 1;
              ControlDownButton.FrameNumber = 1;
            }
          }
          case Enum::HeaterSettingStatusType.MID:
          {
            if( DeviceInterface::VehicleDevice.CurrentVehicleFunction == Enum::VehicleSupportedFunction.SEAT_HEATER )
            {
              VehicleFunctionIcon.Bitmap = Resource::IconSeatHeater2Large;
            }
            else
            {
              VehicleFunctionIcon.Bitmap = Resource::IconGripWarmer2Large;
            }

            if( !DeviceInterface::VehicleDevice.IsTimeoutError2Detected )
            {
              VehicleFunctionIcon.FrameNumber = 1;
              ControlUpButton.FrameNumber = 0;
              ControlDownButton.FrameNumber = 0;
            }
            else
            {
              VehicleFunctionIcon.FrameNumber = 0;
              ControlUpButton.FrameNumber = 1;
              ControlDownButton.FrameNumber = 1;
            }
          }
          case Enum::HeaterSettingStatusType.HIGH:
          {
            if( DeviceInterface::VehicleDevice.CurrentVehicleFunction == Enum::VehicleSupportedFunction.SEAT_HEATER )
            {
              VehicleFunctionIcon.Bitmap = Resource::IconSeatHeater3Large;
            }
            else
            {
              VehicleFunctionIcon.Bitmap = Resource::IconGripWarmer3Large;
            }

            if( !DeviceInterface::VehicleDevice.IsTimeoutError2Detected )
            {
              VehicleFunctionIcon.FrameNumber = 1;
              ControlUpButton.FrameNumber = 1;
              ControlDownButton.FrameNumber = 0;
            }
            else
            {
              VehicleFunctionIcon.FrameNumber = 0;
              ControlUpButton.FrameNumber = 1;
              ControlDownButton.FrameNumber = 1;
            }
          }
          default:;
        }
      }
    }
    else if( DeviceInterface::VehicleDevice.CurrentVehicleFunction == Enum::VehicleSupportedFunction.WIND_SCREEN )
    {
      VehicleFunctionIcon.Bitmap = Resource::IconWindScreenLarge;
      if( !DeviceInterface::VehicleDevice.IsTimeoutError2Detected )
      {
        VehicleFunctionIcon.FrameNumber = 1;
        ControlUpButton.FrameNumber = 0;
        ControlDownButton.FrameNumber = 0;
      }
      else
      {
        VehicleFunctionIcon.FrameNumber = 0;
        ControlUpButton.FrameNumber = 1;
        ControlDownButton.FrameNumber = 1;
      }
    }
    else
    {
      trace "Unexpected vehicle function";
    }
  }

  $rect <510,110,720,150>
  inherited method OnShortDownKeyActivated()
  {
    if( !DeviceInterface::VehicleDevice.IsTimeoutError2Detected )
    {
      switch( DeviceInterface::VehicleDevice.CurrentVehicleFunction )
      {
        case Enum::VehicleSupportedFunction.SEAT_HEATER:
        {
          if( SeatHeater_GripWarmer::LOWEST_STATUS < (uint32)HeaterSettingStatus )
          {
            StartHighlight( ControlDownBg );
            DeviceInterface::VehicleDevice.SetData( Enum::VehicleTxType.SEAT_HEATER_CHANGE_LEVEL, SeatHeater_GripWarmer::HEATER_LEVEL_DOWN );
          }
        }
        case Enum::VehicleSupportedFunction.GRIP_WARMER:
        {
          if( SeatHeater_GripWarmer::LOWEST_STATUS < (uint32)HeaterSettingStatus )
          {
            StartHighlight( ControlDownBg );
            DeviceInterface::VehicleDevice.SetData( Enum::VehicleTxType.GRIP_WARMER_CHANGE_LEVEL, SeatHeater_GripWarmer::HEATER_LEVEL_DOWN );
          }
        }
        case Enum::VehicleSupportedFunction.WIND_SCREEN:
        {
          ControlDownBg.FrameNumber = 1;
          DeviceInterface::VehicleDevice.SetData( Enum::VehicleTxType.WIND_SCREEN_OPERATION, SeatHeater_GripWarmer::HEATER_LEVEL_DOWN );
        }
        default:;
      }
    }
  }

  $rect <510,50,720,90>
  inherited method OnShortUpKeyActivated()
  {
    if( !DeviceInterface::VehicleDevice.IsTimeoutError2Detected )
    {
      switch( DeviceInterface::VehicleDevice.CurrentVehicleFunction )
      {
        case Enum::VehicleSupportedFunction.SEAT_HEATER:
        {
          if( SeatHeater_GripWarmer::HIGHEST_STATUS > (uint32)HeaterSettingStatus )
          {
            StartHighlight( ControlUpBg );
            DeviceInterface::VehicleDevice.SetData( Enum::VehicleTxType.SEAT_HEATER_CHANGE_LEVEL, SeatHeater_GripWarmer::HEATER_LEVEL_UP );
          }
        }
        case Enum::VehicleSupportedFunction.GRIP_WARMER:
        {
          if( SeatHeater_GripWarmer::HIGHEST_STATUS > (uint32)HeaterSettingStatus )
          {
            StartHighlight( ControlUpBg );
            DeviceInterface::VehicleDevice.SetData( Enum::VehicleTxType.GRIP_WARMER_CHANGE_LEVEL, SeatHeater_GripWarmer::HEATER_LEVEL_UP );
          }
        }
        case Enum::VehicleSupportedFunction.WIND_SCREEN:
        {
          ControlUpBg.FrameNumber = 1;
          DeviceInterface::VehicleDevice.SetData( Enum::VehicleTxType.WIND_SCREEN_OPERATION, SeatHeater_GripWarmer::HEATER_LEVEL_UP );
        }
        default:;
      }
    }
  }

  $rect <980,50,1180,90>
  inherited method OnShortEnterKeyActivated()
  {
    OnShortHomeKeyActivated();
  }

  $rect <510,230,720,270>
  inherited method OnDownKeyReleased()
  {
    switch( DeviceInterface::VehicleDevice.CurrentVehicleFunction )
    {
      case Enum::VehicleSupportedFunction.SEAT_HEATER: DeviceInterface::VehicleDevice.SetData( Enum::VehicleTxType.SEAT_HEATER_CHANGE_LEVEL, SeatHeater_GripWarmer::HEATER_LEVEL_NONE );
      case Enum::VehicleSupportedFunction.GRIP_WARMER: DeviceInterface::VehicleDevice.SetData( Enum::VehicleTxType.GRIP_WARMER_CHANGE_LEVEL, SeatHeater_GripWarmer::HEATER_LEVEL_NONE );
      case Enum::VehicleSupportedFunction.WIND_SCREEN:
      {
        ControlDownBg.FrameNumber = 0;
        DeviceInterface::VehicleDevice.SetData( Enum::VehicleTxType.WIND_SCREEN_OPERATION, SeatHeater_GripWarmer::HEATER_LEVEL_NONE );
      }
      default:;
    }
  }

  $rect <510,170,720,210>
  inherited method OnUpKeyReleased()
  {
    switch( DeviceInterface::VehicleDevice.CurrentVehicleFunction )
    {
      case Enum::VehicleSupportedFunction.SEAT_HEATER: DeviceInterface::VehicleDevice.SetData( Enum::VehicleTxType.SEAT_HEATER_CHANGE_LEVEL, SeatHeater_GripWarmer::HEATER_LEVEL_NONE );
      case Enum::VehicleSupportedFunction.GRIP_WARMER: DeviceInterface::VehicleDevice.SetData( Enum::VehicleTxType.GRIP_WARMER_CHANGE_LEVEL, SeatHeater_GripWarmer::HEATER_LEVEL_NONE );
      case Enum::VehicleSupportedFunction.WIND_SCREEN:
      {
        ControlUpBg.FrameNumber = 0;
        DeviceInterface::VehicleDevice.SetData( Enum::VehicleTxType.WIND_SCREEN_OPERATION, SeatHeater_GripWarmer::HEATER_LEVEL_NONE );
      }
      default:;
    }
  }

  $rect <20,20,160,60>
  object Views::Image ImgLCBlueline
  {
    preset Bounds = <0,96,480,206>;
    preset Bitmap = Resource::LCBlueline;
  }

  $rect <20,20,160,60>
  object Components::BaseText CurrentItemTitleText
  {
    preset Bounds = <138,130,469,173>;
    preset Alignment = Views::TextAlignment[AlignHorzLeft, AlignVertCenter];
    preset String = "";
    preset Font = Fonts::NotoSansCjkJpMedium28pt;
  }

  $rect <20,20,160,60>
  object Views::Image ControlUpBg
  {
    preset Bounds = <0,39,94,114>;
    preset Bitmap = Resource::ControlButtonBackground;
  }

  $rect <20,20,160,60>
  object Views::Image ControlDownBg
  {
    preset Bounds = <0,189,94,264>;
    preset Bitmap = Resource::ControlButtonBackground;
  }

  $rect <20,20,160,60>
  object Views::Image ControlDownButton
  {
    preset Bounds = <0,189,94,264>;
    preset Bitmap = Resource::ControlDownButton;
  }

  $rect <20,20,160,60>
  object Views::Image ControlUpButton
  {
    preset Bounds = <0,39,94,114>;
    preset Bitmap = Resource::ControlUpButton;
  }

  $rect <20,20,160,60>
  object Views::Image VehicleFunctionIcon
  {
    preset Bounds = <13,112,91,190>;
    preset FrameNumber = 1;
    preset Visible = true;
  }

  $rect <350,300,630,340>
  object Core::SystemEventHandler VehicleDataReceivedEventHandler
  {
    preset OnEvent = OnVehicleDataReceivedSlot;
    preset Event = DeviceInterface::VehicleDevice.VehicleDataReceivedSystemEvent;
  }

  // This slot method is executed when the associated system event handler 'SystemEventHandler' \
  // receives an event.
  $rect <350,350,630,390>
  slot OnVehicleDataReceivedSlot
  {
    var DeviceInterface::VehicleDataClass VehicleData = ( DeviceInterface::VehicleDataClass )VehicleDataReceivedEventHandler.Context;
    if( null != VehicleData )
    {
      switch( VehicleData.RxType )
      {
        case Enum::VehicleRxType.SEAT_HEATER_STATUS,
             Enum::VehicleRxType.GRIP_WARMER_STATUS:
        {
          UpdateHeaterLevel( VehicleData.RxType );
        }
        case Enum::VehicleRxType.TIMEOUT_ERROR2_UPDATED:
        {
          InvalidateViewState();
        }
        default:;
      }
    }
  }

  $rect <640,300,840,340>
  method void UpdateHeaterLevel( arg Enum::VehicleRxType aNewType )
  {
    var DeviceInterface::VehicleDataClass VehicleData;
    switch( aNewType )
    {
      case Enum::VehicleRxType.GRIP_WARMER_STATUS:
      {
        VehicleData = DeviceInterface::VehicleDevice.GetData( Enum::VehicleRxType.GRIP_WARMER_STATUS );

        if( null != VehicleData &&
            (uint32)HeaterSettingStatus != VehicleData.DataUInt32 &&
            SeatHeater_GripWarmer::HIGHEST_STATUS >= VehicleData.DataUInt32 &&
            VehicleData.DataUInt32 >= SeatHeater_GripWarmer::LOWEST_STATUS )
        {
          HeaterSettingStatus = (Enum::HeaterSettingStatusType)VehicleData.DataUInt32;
          InvalidateViewState();
        }
      }
      case Enum::VehicleRxType.SEAT_HEATER_STATUS:
      {
        VehicleData = DeviceInterface::VehicleDevice.GetData( Enum::VehicleRxType.SEAT_HEATER_STATUS );

        if( null != VehicleData &&
            (uint32)HeaterSettingStatus != VehicleData.DataUInt32 &&
            SeatHeater_GripWarmer::HIGHEST_STATUS >= VehicleData.DataUInt32 &&
            VehicleData.DataUInt32 >= SeatHeater_GripWarmer::LOWEST_STATUS )
        {
          HeaterSettingStatus = (Enum::HeaterSettingStatusType)VehicleData.DataUInt32;
          InvalidateViewState();
        }
      }
      default:;
    }
  }

  $rect <750,50,950,90>
  var Enum::HeaterSettingStatusType HeaterSettingStatus;

  $rect <750,170,950,210>
  method void StartHighlight( arg Views::Image aBackground )
  {
    aBackground.FrameNumber = 1;
    HighlightBG = aBackground;
    HighlightTimer.Enabled = true;
  }

  $rect <750,220,940,260>
  object Core::Timer HighlightTimer
  {
    preset OnTrigger = OnHighlightEndSlot;
    preset Period = 100;
    preset Enabled = false;
  }

  $rect <950,220,1140,260>
  slot OnHighlightEndSlot
  {
    HighlightTimer.Enabled = false;
    HighlightBG.FrameNumber = 0;
  }

  $rect <750,110,950,150>
  property Views::Image HighlightBG;
}

$rect <560,100,760,140>
$output false
const uint32 HIGHEST_STATUS = 3;

$rect <560,150,760,190>
$output false
const uint32 LOWEST_STATUS = 0;

$rect <560,260,760,300>
$output false
const uint32 HEATER_LEVEL_UP = 2;

$rect <560,210,760,250>
$output false
const uint32 HEATER_LEVEL_DOWN = 1;

$rect <560,310,760,350>
$output false
const uint32 HEATER_LEVEL_NONE = 0;
