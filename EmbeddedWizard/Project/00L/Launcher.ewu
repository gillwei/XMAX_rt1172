$version 10.00

$rect <10,10,250,50>
$output false
class LNC_Main : Components::BaseComponent
{
  $rect <250,290,450,330>
  inherited method Init()
  {
    trace "LauncherInit";

    RotaryPlateSlideInEffect.Enabled = true;
    BaseSlideInEffect.Enabled = true;

    CurrentItem = GetInitialSelectedItem();
    NextItem = GetNextItem( CurrentItem );
    PreviousItem = GetPreviousItem( CurrentItem );

    LNC_Base.SetItems( PreviousItem, CurrentItem, NextItem );
    LNC_RotaryPlate.SetItems( PreviousItem, CurrentItem, NextItem );
  }

  $rect <0,290,200,330>
  inherited property Bounds = <0,0,480,272>;

  $rect <0,370,230,410>
  inherited method OnShortDownKeyActivated()
  {
    LNC_RotaryPlate.OnShortDownKeyActivated();
  }

  $rect <0,410,230,450>
  inherited method OnShortUpKeyActivated()
  {
    LNC_RotaryPlate.OnShortUpKeyActivated();
  }

  $rect <0,490,230,530>
  inherited method OnShortEnterKeyActivated()
  {
    LNC_RotaryPlate.StartSelectedAnimation();
  }

  $rect <0,450,230,490>
  inherited method OnShortHomeKeyActivated()
  {
    BaseSlideOutEffect.Enabled = true;
    RotaryPlateSlideOutEffect.Enabled = true;
  }

  // 1. The initial selected item should be "Phone" if there is an active call.
  //    Otherwise, "Music" is the initial selected item.
  // 2. Rotary Menu shows following items in sequence:
  // Phone
  // -> Music
  // -> ODO/Trip
  // -> Theme
  // -> Navigation
  // -> Notification
  // -> Weather
  // -> Settings
  // -> Traction Control (depends on vehicle)
  // -> Seat Heater (depends on vehicle)
  // -> Grip Warmer (depends on vehicle)
  // -> Wind Screen (depends on vehicle)
  // -> Phone...
  note legend Note
  {
    attr Bounds = <540,0,980,350>;
  }

  $rect <250,570,490,610>
  slot OnCurrentItemChangedSlot
  {
    trace "OnCurrentItemChangedSlot: ", LNC_RotaryPlate.CurrentItem;

    PreviousItem = LNC_RotaryPlate.PreviousItem;
    CurrentItem = LNC_RotaryPlate.CurrentItem;
    NextItem = LNC_RotaryPlate.NextItem;

    LNC_Base.SetItems( PreviousItem, CurrentItem, NextItem );
  }

  $rect <250,450,450,490>
  method Enum::LauncherItem GetInitialSelectedItem()
  {
    // TODO: get active phone call status from the notification center
    var bool is_phone_call_active = false;
    if( is_phone_call_active )
    {
      return Enum::LauncherItem.PHONE;
    }
    else
    {
      return Enum::LauncherItem.MUSIC;
    }
  }

  // TODO:
  // Remove these temperary variables and get the TCS, Seat Heater, Grip Warmer, \
  // Wind Screen enabled status from vehicle information manager directly.
  note group Note5
  {
    attr Bounds = <880,360,1240,680>;
  }

  $rect <970,500,1170,540>
  var bool TCSEnabled = false;

  $rect <970,540,1170,580>
  var bool SeatHeaterEnabled = false;

  $rect <970,580,1170,620>
  var bool GripWarmerEnabled = false;

  $rect <970,620,1170,660>
  var bool WindScreenEnabled = false;

  $rect <250,490,450,530>
  method Enum::LauncherItem GetNextItem( arg Enum::LauncherItem aBaseItem )
  {
    var uint32 TotalItemNum = ( uint32 )Enum::LauncherItem.TOTAL;
    var Enum::LauncherItem BaseItemNext = aBaseItem;
    var bool bypass = false;

    do
    {
      BaseItemNext = ( Enum::LauncherItem )( ( ( uint32 )BaseItemNext + 1 ) % ( TotalItemNum ) );
      if( Enum::LauncherItem.TRACTION_CONTROL == BaseItemNext && !TCSEnabled ||
          Enum::LauncherItem.SEAT_HEATER == BaseItemNext && !SeatHeaterEnabled ||
          Enum::LauncherItem.GRIP_WARMER == BaseItemNext && !GripWarmerEnabled ||
          Enum::LauncherItem.WIND_SCREEN == BaseItemNext && !WindScreenEnabled )
      {
        bypass = true;
      }
      else
      {
        bypass = false;
      }
    } while( bypass );

    return BaseItemNext;
  }

  $rect <250,370,450,410>
  var Enum::LauncherItem PreviousItem;

  $rect <250,330,450,370>
  var Enum::LauncherItem CurrentItem;

  $rect <250,410,450,450>
  var Enum::LauncherItem NextItem;

  $rect <250,530,450,570>
  method Enum::LauncherItem GetPreviousItem( arg Enum::LauncherItem aBaseItem )
  {
    var uint32 TotalItemNum = ( uint32 )Enum::LauncherItem.TOTAL;
    var Enum::LauncherItem BaseItemPrevious = aBaseItem;
    var bool bypass = false;

    do
    {
      BaseItemPrevious = ( Enum::LauncherItem )( ( ( uint32 )BaseItemPrevious + TotalItemNum - 1 ) % ( TotalItemNum ) );
      if( Enum::LauncherItem.TRACTION_CONTROL == BaseItemPrevious && !TCSEnabled ||
          Enum::LauncherItem.SEAT_HEATER == BaseItemPrevious && !SeatHeaterEnabled ||
          Enum::LauncherItem.GRIP_WARMER == BaseItemPrevious && !GripWarmerEnabled ||
          Enum::LauncherItem.WIND_SCREEN == BaseItemPrevious && !WindScreenEnabled )
      {
        bypass = true;
      }
      else
      {
        bypass = false;
      }
    } while( bypass );

    return BaseItemPrevious;
  }

  $rect <0,530,230,570>
  slot OnSelectedAnimationFinishedSlot
  {
    var Components::BaseComponent ItemDialog = null;

    switch( CurrentItem )
    {
      case Enum::LauncherItem.PHONE:;
      case Enum::LauncherItem.MUSIC:
      {
        ItemDialog = new Media::MED01_MediaUI;
        PresentDialog( ItemDialog, null, null, null, null, null, null, null, null, false );
      }
      case Enum::LauncherItem.ODO_TRIP:;
      case Enum::LauncherItem.THEME:;
      case Enum::LauncherItem.NAVIGATION:
      {
        ItemDialog = new Navigation::Main;
        PresentDialog( ItemDialog, null, null, null, null, null, null, null, null, false );
      }
      case Enum::LauncherItem.NOTIFICATION:;
      case Enum::LauncherItem.WEATHER:;
      case Enum::LauncherItem.SETTINGS:
      {
        ItemDialog = new Settings::SET01_MainSettingMenu;
        PresentDialog( ItemDialog, null, null, null, null, null, null, null, null, false );
      }
      case Enum::LauncherItem.TRACTION_CONTROL:;
      case Enum::LauncherItem.SEAT_HEATER:;
      case Enum::LauncherItem.GRIP_WARMER:;
      case Enum::LauncherItem.WIND_SCREEN:;
      default:;
    }
  }

  $rect <540,410,770,450>
  object Effects::RectEffect BaseSlideInEffect
  {
    preset Exponent = 4.38;
    preset TimingCustom1 = 0.0;
    preset Timing = Effects::Timing.Exp_Out;
    preset NoOfCycles = 1;
    preset CycleDuration = 300;
    preset Value2 = <0,38,480,272>;
    preset Value1 = <-480,38,0,272>;
    preset Outlet = ^LNC_Base.Bounds;
  }

  $rect <540,450,770,490>
  object Effects::RectEffect BaseSlideOutEffect
  {
    preset OnFinished = OnSlideOutFinishedSlot;
    preset Exponent = 4.38;
    preset TimingCustom1 = 0.0;
    preset Timing = Effects::Timing.Exp_Out;
    preset NoOfCycles = 1;
    preset CycleDuration = 300;
    preset Value2 = <-480,38,0,272>;
    preset Value1 = <0,38,480,272>;
    preset Outlet = ^LNC_Base.Bounds;
  }

  $rect <540,490,770,530>
  object Effects::RectEffect RotaryPlateSlideInEffect
  {
    preset Exponent = 4.49;
    preset TimingCustom1 = 0.0;
    preset Timing = Effects::Timing.Exp_Out;
    preset NoOfCycles = 1;
    preset CycleDuration = 300;
    preset Value2 = <0,38,134,272>;
    preset Value1 = <-134,38,0,272>;
    preset Outlet = ^LNC_RotaryPlate.Bounds;
  }

  $rect <540,530,770,570>
  object Effects::RectEffect RotaryPlateSlideOutEffect
  {
    preset OnFinished = OnSlideOutFinishedSlot;
    preset Exponent = 4.49;
    preset TimingCustom1 = 0.0;
    preset Timing = Effects::Timing.Exp_Out;
    preset NoOfCycles = 1;
    preset CycleDuration = 300;
    preset Value2 = <-134,38,0,272>;
    preset Value1 = <0,38,134,272>;
    preset Outlet = ^LNC_RotaryPlate.Bounds;
  }

  $rect <20,20,160,60>
  object Launcher::LNC_Base LNC_Base
  {
    preset Bounds = <-480,38,0,272>;
  }

  $rect <20,20,160,60>
  object Launcher::LNC_RotaryPlate LNC_RotaryPlate
  {
    preset Bounds = <-134,38,0,272>;
    preset OnIconsRotated = OnCurrentItemChangedSlot;
    preset OnSelectedAnimationFinished = OnSelectedAnimationFinishedSlot;
  }

  $rect <20,20,160,60>
  object Views::Wallpaper StatusBarShadowImage
  {
    preset Bounds = <0,38,480,49>;
    preset Bitmap = Resource::StatusBarShadow;
  }

  $rect <540,570,770,610>
  slot OnSlideOutFinishedSlot
  {
    if( !BaseSlideOutEffect.Enabled && !RotaryPlateSlideOutEffect.Enabled )
    {
      Owner.DismissDialog( this, null, null, null, null, null, false );
    }
  }
}

$rect <10,120,250,160>
$output false
class LNC_RotaryPlate : Components::BaseComponent
{
  $rect <60,250,220,290>
  inherited property Bounds = <0,0,134,234>;

  $rect <-4,380,220,420>
  inherited method OnShortDownKeyActivated()
  {
    StartIconRotation( Enum::RotationDirection.COUNTER_CLOCKWISE );
  }

  $rect <-4,340,220,380>
  inherited method OnShortUpKeyActivated()
  {
    StartIconRotation( Enum::RotationDirection.CLOCKWISE );
  }

  $rect <290,340,510,380>
  var Enum::RotationDirection RotationDirection = Enum::RotationDirection.CLOCKWISE;

  $rect <430,0,630,40>
  array Views::Image Icons[ 4 ] =
  (
    Default[0] = Icon0;
    Default[1] = Icon1;
    Default[2] = Icon2;
    Default[3] = Icon3;
  );

  $rect <430,80,630,120>
  array rect IconPositions[ 5 ] =
  (
    Default[0] = <-81,-143,-31,-93>;
    Default[1] = <9,10,59,60>;
    Default[2] = <27,88,77,138>;
    Default[3] = <9,166,59,216>;
    Default[4] = <-81,231,-31,281>;
  );

  $rect <430,40,630,80>
  var int32 SelectedIconIdx = 1;

  $rect <290,420,510,460>
  property slot OnIconsRotated;

  $rect <170,40,370,80>
  property Enum::LauncherItem CurrentItem;

  $rect <560,340,780,380>
  object Effects::RectEffect RectEffect0
  {
    preset NoOfCycles = 1;
    preset CycleDuration = 150;
    preset Value2 = <0,0,0,0>;
    preset Value1 = <0,0,0,0>;
  }

  $rect <560,380,780,420>
  object Effects::RectEffect RectEffect1
  {
    preset NoOfCycles = 1;
    preset CycleDuration = 150;
    preset Value2 = <0,0,0,0>;
    preset Value1 = <0,0,0,0>;
  }

  $rect <560,420,780,460>
  object Effects::RectEffect RectEffect2
  {
    preset NoOfCycles = 1;
    preset CycleDuration = 150;
    preset Value2 = <0,0,0,0>;
    preset Value1 = <0,0,0,0>;
  }

  $rect <560,460,780,500>
  object Effects::RectEffect RectEffect3
  {
    preset NoOfCycles = 1;
    preset CycleDuration = 150;
    preset Value2 = <0,0,0,0>;
    preset Value1 = <0,0,0,0>;
  }

  $rect <560,300,780,340>
  array Effects::RectEffect RectEffectArray[ 4 ] =
  (
    Default[0] = RectEffect0;
    Default[1] = RectEffect1;
    Default[2] = RectEffect2;
    Default[3] = RectEffect3;
  );

  $rect <290,300,510,340>
  method void StartIconRotation( arg Enum::RotationDirection aDirection )
  {
    RotationDirection = aDirection;

    var Launcher::LNC_Main LNCMainDialog = ( Launcher::LNC_Main )Owner;
    if( Enum::RotationDirection.CLOCKWISE == aDirection )
    {
      HiddenItem = LNCMainDialog.GetPreviousItem( PreviousItem );
    }
    else
    {
      HiddenItem = LNCMainDialog.GetNextItem( NextItem );
    }

    var int32 HiddenIconIdx = ( SelectedIconIdx + 2 ) % Icons.size;
    Icons[HiddenIconIdx].Bitmap = GetSmallIconResourceOfItem( HiddenItem );

    IconSelectedLarge.Visible = false;
    Icons[SelectedIconIdx].Visible = true;

    var int32 IconIdx = 0;
    var int32 i = 0;
    for( i = 0; i < RectEffectArray.size; i = i + 1)
    {
      var Effects::RectEffect Effect = RectEffectArray[i];
      if( Enum::RotationDirection.CLOCKWISE == aDirection )
      {
        IconIdx = ( SelectedIconIdx - 2 + i + Icons.size ) % Icons.size;
        Effect.Value1 = IconPositions[i];
        Effect.Value2 = IconPositions[i+1];
      }
      else
      {
        IconIdx = ( SelectedIconIdx - 1 + i + Icons.size ) % Icons.size;
        Effect.Value1 = IconPositions[i+1];
        Effect.Value2 = IconPositions[i];
      }
      if( SelectedIconIdx == IconIdx )
      {
        Effect.OnFinished = OnIconRotationFinished;
      }
      else
      {
        Effect.OnFinished = null;
      }
      Effect.Outlet = ^Icons[IconIdx].Bounds;
      Effect.Enabled = true;
    }

  }

  $rect <290,380,510,420>
  slot OnIconRotationFinished
  {
    if( Enum::RotationDirection.CLOCKWISE == RotationDirection )
    {
      SelectedIconIdx = ( SelectedIconIdx - 1 + Icons.size ) % Icons.size;
      NextItem = CurrentItem;
      CurrentItem = PreviousItem;
      PreviousItem = HiddenItem;
    }
    else
    {
      SelectedIconIdx = ( SelectedIconIdx + 1 ) % Icons.size;
      PreviousItem = CurrentItem;
      CurrentItem = NextItem;
      NextItem = HiddenItem;
    }

    IconSelectedLarge.Bitmap = GetLargeIconResourceOfItem( CurrentItem );
    Icons[SelectedIconIdx].Visible = false;
    IconSelectedLarge.Visible = true;

    postsignal OnIconsRotated;
  }

  $rect <170,0,370,40>
  property Enum::LauncherItem PreviousItem;

  $rect <170,80,370,120>
  property Enum::LauncherItem NextItem;

  $rect <-4,300,220,340>
  method void SetItems( arg Enum::LauncherItem aPreviousItem, arg Enum::LauncherItem aCurrentItem, arg Enum::LauncherItem aNextItem )
  {
    trace "Rotary, SetItems: Current: ", aCurrentItem;
    PreviousItem = aPreviousItem;
    CurrentItem = aCurrentItem;
    NextItem = aNextItem;

    Icons[SelectedIconIdx].Bitmap = GetSmallIconResourceOfItem( CurrentItem );
    IconSelectedLarge.Bitmap = GetLargeIconResourceOfItem( CurrentItem );

    var int32 PeviousIconIdx = ( SelectedIconIdx - 1 + Icons.size ) % Icons.size;
    Icons[PeviousIconIdx].Bitmap = GetSmallIconResourceOfItem( PreviousItem );

    var int32 NextIconIdx = ( SelectedIconIdx + 1 ) % Icons.size;
    Icons[NextIconIdx].Bitmap = GetSmallIconResourceOfItem( NextItem );
  }

  $rect <430,120,690,160>
  method Resources::Bitmap GetSmallIconResourceOfItem( arg Enum::LauncherItem aItem )
  {
    var Resources::Bitmap IconBitmap;

    switch( aItem )
    {
      case Enum::LauncherItem.PHONE: IconBitmap = Resource::IconPhoneSmall;
      case Enum::LauncherItem.MUSIC: IconBitmap = Resource::IconMusicSmall;
      case Enum::LauncherItem.ODO_TRIP: IconBitmap = Resource::IconOdoTripSmall;
      case Enum::LauncherItem.THEME: IconBitmap = Resource::IconThemeSmall;
      case Enum::LauncherItem.NAVIGATION: IconBitmap = Resource::IconNavigationSmall;
      case Enum::LauncherItem.NOTIFICATION: IconBitmap = Resource::IconNotificationSmall;
      case Enum::LauncherItem.WEATHER: IconBitmap = Resource::IconWeatherSmall;
      case Enum::LauncherItem.SETTINGS: IconBitmap = Resource::IconSettingSmall;
      case Enum::LauncherItem.TRACTION_CONTROL: IconBitmap = Resource::IconTcsSmall;
      case Enum::LauncherItem.SEAT_HEATER:
      {
        //TODO: get the heat seater level from vehicle information manager
        IconBitmap = Resource::IconSeatHeater0Small;
      }
      case Enum::LauncherItem.GRIP_WARMER:
      {
        //TODO: get the grip warmer level from vehicle infomation manager
        IconBitmap = Resource::IconGripWarmer0Small;
      }
      case Enum::LauncherItem.WIND_SCREEN: IconBitmap = Resource::IconWindScreenSmall;
      default:;
    }

    return IconBitmap;
  }

  $rect <430,160,690,200>
  method Resources::Bitmap GetLargeIconResourceOfItem( arg Enum::LauncherItem aItem )
  {
    var Resources::Bitmap IconBitmap;

    switch( aItem )
    {
      case Enum::LauncherItem.PHONE: IconBitmap = Resource::IconPhoneLarge;
      case Enum::LauncherItem.MUSIC: IconBitmap = Resource::IconMusicLarge;
      case Enum::LauncherItem.ODO_TRIP: IconBitmap = Resource::IconOdoTripLarge;
      case Enum::LauncherItem.THEME: IconBitmap = Resource::IconThemeLarge;
      case Enum::LauncherItem.NAVIGATION: IconBitmap = Resource::IconNavigationLarge;
      case Enum::LauncherItem.NOTIFICATION: IconBitmap = Resource::IconNotificationLarge;
      case Enum::LauncherItem.WEATHER: IconBitmap = Resource::IconWeatherLarge;
      case Enum::LauncherItem.SETTINGS: IconBitmap = Resource::IconSettingLarge;
      case Enum::LauncherItem.TRACTION_CONTROL: IconBitmap = Resource::IconTcsLarge;
      case Enum::LauncherItem.SEAT_HEATER:
      {
        //TODO: get the heat seater level from vehicle information manager
        IconBitmap = Resource::IconSeatHeater0Large;
      }
      case Enum::LauncherItem.GRIP_WARMER:
      {
        //TODO: get the grip warmer level from vehicle infomation manager
        IconBitmap = Resource::IconGripWarmer0Large;
      }
      case Enum::LauncherItem.WIND_SCREEN: IconBitmap = Resource::IconWindScreenLarge;
      default:;
    }

    return IconBitmap;
  }

  $rect <0,450,220,490>
  method void StartSelectedAnimation()
  {
    HighlightImage.Visible = true;
    SelectedAnimationTimer.Enabled = true;
  }

  $rect <0,490,220,530>
  object Core::Timer SelectedAnimationTimer
  {
    preset OnTrigger = OnSelectedAnimationFinishedSlot;
    preset Period = 100;
  }

  $rect <0,530,220,570>
  slot OnSelectedAnimationFinishedSlot
  {
    HighlightImage.Visible = false;
    SelectedAnimationTimer.Enabled = false;
    postsignal OnSelectedAnimationFinished;
  }

  $rect <0,570,220,610>
  property slot OnSelectedAnimationFinished;

  $rect <20,20,160,60>
  object Views::Image BaseImage
  {
    preset Bounds = <0,0,134,234>;
    preset Bitmap = Resource::LCBase;
  }

  $rect <20,20,160,60>
  object Views::Image Icon0
  {
    preset Layout = Core::Layout[AlignToLeft, AlignToTop];
    preset Bounds = <9,10,59,60>;
    preset FrameNumber = 1;
    preset Bitmap = Resource::IconMusicSmall;
  }

  $rect <20,20,160,60>
  object Views::Image Icon1
  {
    preset Layout = Core::Layout[AlignToLeft, AlignToTop];
    preset Bounds = <27,88,77,138>;
    preset FrameNumber = 1;
    preset Bitmap = Resource::IconTcsSmall;
    preset Visible = false;
  }

  $rect <20,20,160,60>
  object Views::Image Icon2
  {
    preset Layout = Core::Layout[AlignToLeft, AlignToTop];
    preset Bounds = <9,166,59,216>;
    preset FrameNumber = 1;
    preset Bitmap = Resource::IconPhoneSmall;
  }

  $rect <20,20,160,60>
  object Views::Image Icon3
  {
    preset Layout = Core::Layout[AlignToLeft, AlignToTop];
    preset Bounds = <-1,249,41,291>;
    preset FrameNumber = 1;
    preset Bitmap = Resource::IconSettingSmall;
  }

  $rect <20,20,160,60>
  object Views::Image IconSelectedLarge
  {
    preset Layout = Core::Layout[AlignToLeft, AlignToTop];
    preset Bounds = <13,74,91,152>;
    preset FrameNumber = 1;
    preset Bitmap = Resource::IconTcsLarge;
    preset Visible = true;
  }

  $rect <20,20,160,60>
  object Views::Image HighlightImage
  {
    preset Bounds = <0,70,122,156>;
    preset Bitmap = Resource::LCHighlight;
    preset Visible = false;
  }

  $rect <170,120,370,160>
  property Enum::LauncherItem HiddenItem;

  $reorder Opacity 1
  $reorder Embedded 1
  $reorder AlphaBlended 1
  $reorder Visible 1
  $reorder KeyHandler 1
  $reorder OnKeyPressSlot 1
  $reorder OnKeyHoldSlot 1
  $reorder OnKeyReleaseSlot 1
  $reorder OnSlideEffectCompletedSlot 1
  $reorder IsSlideEffectPresenting 1
  $reorder SlideInDialog 1
  $reorder SlideOutDialog 1
}

$rect <10,70,250,110>
$output false
class LNC_Base : Core::Group
{
  $rect <0,250,200,290>
  inherited property Bounds = <0,38,480,272>;

  $rect <20,20,160,60>
  object Views::Rectangle BlackBG
  {
    preset Bounds = <0,0,480,234>;
    preset Color = #000000FF;
  }

  $rect <20,20,160,60>
  object Views::Image ImgLCBlueline
  {
    preset Bounds = <0,58,480,168>;
    preset Bitmap = Resource::LCBlueline;
  }

  $rect <20,20,160,60>
  object Views::Text CurrentItemTitleText
  {
    preset Bounds = <138,94,469,137>;
    preset Alignment = Views::TextAlignment[AlignHorzLeft, AlignVertCenter];
    preset Font = Fonts::NotoSansCjkJpMedium28pt;
  }

  $rect <20,20,160,60>
  object Views::Text PreviousItemTitleText
  {
    preset Bounds = <121,19,439,52>;
    preset Alignment = Views::TextAlignment[AlignHorzLeft, AlignVertCenter];
    preset String = "";
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
    preset Color = #6B6B6BFF;
  }

  $rect <20,20,160,60>
  object Views::Text NextItemTitleText
  {
    preset Bounds = <121,174,439,207>;
    preset Alignment = Views::TextAlignment[AlignHorzLeft, AlignVertCenter];
    preset String = "";
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
    preset Color = #6B6B6BFF;
  }

  $rect <0,350,230,390>
  method string GetStringOfLauncherItem( arg Enum::LauncherItem aLauncherItem )
  {
    var string Title;
    switch( aLauncherItem )
    {
      case Enum::LauncherItem.PHONE: Title = Strings::LNC_phone;
      case Enum::LauncherItem.MUSIC: Title = Strings::LNC_music;
      case Enum::LauncherItem.ODO_TRIP: Title = Strings::LNC_odo_trip;
      case Enum::LauncherItem.THEME: Title = Strings::LNC_theme;
      case Enum::LauncherItem.NAVIGATION: Title = Strings::LNC_navigation;
      case Enum::LauncherItem.NOTIFICATION: Title = Strings::LNC_notification;
      case Enum::LauncherItem.WEATHER: Title = Strings::LNC_weather;
      case Enum::LauncherItem.SETTINGS: Title = Strings::LNC_settings;
      case Enum::LauncherItem.TRACTION_CONTROL: Title = Strings::LNC_traction_control;
      case Enum::LauncherItem.SEAT_HEATER: Title = Strings::LNC_seat_heater;
      case Enum::LauncherItem.GRIP_WARMER: Title = Strings::GPW01_grip_warmer;
      case Enum::LauncherItem.WIND_SCREEN: Title = Strings::WSC01_wind_screen;
      default:;
    }
    return Title;
  }

  $rect <0,300,200,340>
  method void SetItems( arg Enum::LauncherItem aPreviousItem, arg Enum::LauncherItem aCurrentItem, arg Enum::LauncherItem aNextItem )
  {
    PreviousItemTitleText.String = GetStringOfLauncherItem( aPreviousItem );
    CurrentItemTitleText.String = GetStringOfLauncherItem( aCurrentItem );
    NextItemTitleText.String = GetStringOfLauncherItem( aNextItem );
  }
}
