$version 11.00

$rect <10,10,250,50>
$output false
class LNC_Main : Components::BaseComponent
{
  $rect <250,330,450,370>
  inherited method ReInit()
  {
    LNC_Base.SetItems( PreviousItem, CurrentItem, NextItem );
  }

  $rect <250,290,450,330>
  inherited method Init()
  {
    trace "LauncherInit";

    GetVehicleSupportedFeature();

    RotaryPlateSlideInEffect.Enabled = true;
    BaseSlideInEffect.Enabled = true;

    CurrentItem = GetInitialSelectedItem();
    NextItem = GetNextItem( CurrentItem );
    PreviousItem = GetPreviousItem( CurrentItem );

    LNC_Base.SetItems( PreviousItem, CurrentItem, NextItem );
    LNC_RotaryPlate.SetItems( PreviousItem, CurrentItem, NextItem );
  }

  $rect <0,290,200,330>
  inherited property Bounds = <0,0,480,272>;

  $rect <0,370,230,410>
  inherited method OnShortDownKeyActivated()
  {
    LNC_RotaryPlate.OnShortDownKeyActivated();
  }

  $rect <0,410,230,450>
  inherited method OnShortUpKeyActivated()
  {
    LNC_RotaryPlate.OnShortUpKeyActivated();
  }

  $rect <0,490,230,530>
  inherited method OnShortEnterKeyActivated()
  {
    if( Enum::LauncherItem.SETTINGS == CurrentItem &&
        DeviceInterface::VehicleDevice.DDModeActivated )
    {
      /* not enter settings menu when DD mode is activated */
    }
    else if( !IsLauncherItemEnabled( CurrentItem ) )
    {
      /* not enter disabled item */
    }
    else
    {
      LNC_RotaryPlate.StartSelectedAnimation();
    }
  }

  $rect <0,450,230,490>
  inherited method OnShortHomeKeyActivated()
  {
    BaseSlideOutEffect.Enabled = true;
    RotaryPlateSlideOutEffect.Enabled = true;
  }

  $rect <0,530,230,570>
  inherited method OnLongEnterKeyActivated()
  {
    if( Components::ACTIVATE_LONG_PRESS_REPETITION_COUNT == KeyHandler.RepetitionCount )
    {
      var Components::BaseComponent ItemDialog = null;

      switch( CurrentItem )
      {
        case Enum::LauncherItem.SEAT_HEATER:
        {
          DeviceInterface::VehicleDevice.CurrentVehicleFunction = Enum::VehicleSupportedFunction.SEAT_HEATER;
          DeviceInterface::VehicleDevice.SetData( Enum::VehicleTxType.HEATER_SELECT, SeatHeater_GripWarmer::RIDER_SEAT_HEATER );
          ItemDialog = new SeatHeater_GripWarmer::SHT02_GPW02_Main;
          PresentDialog( ItemDialog, null, null, null, null, null, null, null, null, false );
        }
        case Enum::LauncherItem.GRIP_WARMER:
        {
          DeviceInterface::VehicleDevice.CurrentVehicleFunction = Enum::VehicleSupportedFunction.GRIP_WARMER;
          DeviceInterface::VehicleDevice.SetData( Enum::VehicleTxType.HEATER_SELECT, SeatHeater_GripWarmer::GRIP_WARMER );
          ItemDialog = new SeatHeater_GripWarmer::SHT02_GPW02_Main;
          PresentDialog( ItemDialog, null, null, null, null, null, null, null, null, false );
        }
        case Enum::LauncherItem.ODO_TRIP:
        {
          var DeviceInterface::VehicleDataClass VehicleData = DeviceInterface::VehicleDevice.GetData( Enum::VehicleRxType.ODO_TRIP_DISPLAY );
          var Enum::OdoTripSettingItem OdoTripSetting = (Enum::OdoTripSettingItem)VehicleData.DataUInt32;
          var Enum::MeterInfo SelectedMeterInfo = Enum::MeterInfo.TOTAL;
          switch( OdoTripSetting )
          {
            case Enum::OdoTripSettingItem.TRIP1: SelectedMeterInfo = Enum::MeterInfo.TRIP1;
            case Enum::OdoTripSettingItem.TRIP2: SelectedMeterInfo = Enum::MeterInfo.TRIP2;
            case Enum::OdoTripSettingItem.TRIP_F: SelectedMeterInfo = Enum::MeterInfo.TRIP_F;
            default:;
          }
          if( Enum::MeterInfo.TOTAL != SelectedMeterInfo )
          {
            var Pop::POP04_Reset ResetDialog = new Pop::POP04_Reset;
            ResetDialog.SelectedMeterInfo = SelectedMeterInfo;
            PresentDialog( ResetDialog, null, null, null, null, null, null, null, null, false );
          }
        }
        default:;
      }
    }
  }

  // 1. The initial selected item should be "Phone" if there is an active call.
  //    Otherwise, "Music" is the initial selected item.
  // 2. Rotary Menu shows following items in sequence:
  // Phone
  // -> Music
  // -> ODO/Trip
  // -> Theme
  // -> Navigation
  // -> Notification
  // -> Weather
  // -> Settings
  // -> Traction Control (depends on vehicle)
  // -> Seat Heater (depends on vehicle)
  // -> Grip Warmer (depends on vehicle)
  // -> Wind Screen (depends on vehicle)
  // -> Phone...
  note legend Note
  {
    attr Bounds = <540,0,980,350>;
  }

  $rect <250,610,490,650>
  slot OnCurrentItemChangedSlot
  {
    PreviousItem = LNC_RotaryPlate.PreviousItem;
    CurrentItem = LNC_RotaryPlate.CurrentItem;
    NextItem = LNC_RotaryPlate.NextItem;

    LNC_Base.SetItems( PreviousItem, CurrentItem, NextItem );
  }

  $rect <250,490,450,530>
  method Enum::LauncherItem GetInitialSelectedItem()
  {
    if( DeviceInterface::NotificationDevice.IsPhoneCallStateActive() )
    {
      return Enum::LauncherItem.PHONE;
    }
    else
    {
      return Enum::LauncherItem.MUSIC;
    }
  }

  // Vehicle Supported Feature
  note group Note5
  {
    attr Bounds = <810,360,1150,770>;
  }

  $rect <850,460,1050,500>
  var bool SeatHeaterEnabled = false;

  $rect <850,510,1050,550>
  var bool GripWarmerEnabled = false;

  $rect <850,560,1050,600>
  var bool WindScreenEnabled = false;

  $rect <250,530,450,570>
  method Enum::LauncherItem GetNextItem( arg Enum::LauncherItem aBaseItem )
  {
    var uint32 TotalItemNum = ( uint32 )Enum::LauncherItem.TOTAL;
    var Enum::LauncherItem BaseItemNext = aBaseItem;
    var bool bypass = false;

    do
    {
      BaseItemNext = ( Enum::LauncherItem )( ( ( uint32 )BaseItemNext + 1 ) % ( TotalItemNum ) );
      if( Enum::LauncherItem.SEAT_HEATER == BaseItemNext && !SeatHeaterEnabled ||
          Enum::LauncherItem.GRIP_WARMER == BaseItemNext && !GripWarmerEnabled ||
          Enum::LauncherItem.WIND_SCREEN == BaseItemNext && !WindScreenEnabled ||
          Enum::LauncherItem.PHONE == BaseItemNext && !DeviceInterface::NotificationDevice.IsPhoneCallStateActive() )
      {
        bypass = true;
      }
      else
      {
        bypass = false;
      }
    } while( bypass );

    return BaseItemNext;
  }

  $rect <250,410,450,450>
  var Enum::LauncherItem PreviousItem;

  $rect <250,370,450,410>
  var Enum::LauncherItem CurrentItem;

  $rect <250,450,450,490>
  var Enum::LauncherItem NextItem;

  $rect <250,570,450,610>
  method Enum::LauncherItem GetPreviousItem( arg Enum::LauncherItem aBaseItem )
  {
    var uint32 TotalItemNum = ( uint32 )Enum::LauncherItem.TOTAL;
    var Enum::LauncherItem BaseItemPrevious = aBaseItem;
    var bool bypass = false;

    do
    {
      BaseItemPrevious = ( Enum::LauncherItem )( ( ( uint32 )BaseItemPrevious + TotalItemNum - 1 ) % ( TotalItemNum ) );
      if( Enum::LauncherItem.SEAT_HEATER == BaseItemPrevious && !SeatHeaterEnabled ||
          Enum::LauncherItem.GRIP_WARMER == BaseItemPrevious && !GripWarmerEnabled ||
          Enum::LauncherItem.WIND_SCREEN == BaseItemPrevious && !WindScreenEnabled ||
          Enum::LauncherItem.PHONE == BaseItemPrevious && !DeviceInterface::NotificationDevice.IsPhoneCallStateActive() )
      {
        bypass = true;
      }
      else
      {
        bypass = false;
      }
    } while( bypass );

    return BaseItemPrevious;
  }

  $rect <0,570,230,610>
  slot OnSelectedAnimationFinishedSlot
  {
    var Components::BaseComponent ItemDialog = null;

    switch( CurrentItem )
    {
      case Enum::LauncherItem.PHONE:
      {
        if( DeviceInterface::NotificationDevice.IsPhoneCallStateActive() )
        {
          ItemDialog = new Telephone::TEL02_ActiveCall;
        }
        else
        {
          // back to previous home screen if no active call
          OnShortHomeKeyActivated();
        }
      }
      case Enum::LauncherItem.MUSIC:
      {
        // Media source could be delivered from either Android or Iphone. Android: MotoCon SDK. Iphone: AMS.
        // Therefore, using IsAmsConnected to check if ble is connected and ams is discovered.
        if( DeviceInterface::MediaManagerDevice.IsAmsConnected() )
        {
          ItemDialog = new Media::MED01_MediaUI;
        }
        else if( DeviceInterface::BluetoothDevice.IsMotoconConnected() )
        {
          // MotoCon is connected. Media source should be delivered from Android.
          ItemDialog = new Media::MED01_MediaUI;
        }
        else
        {
          ItemDialog = new Pop::POP09_POP14_BleConnectionErrorUI;
        }
      }
      case Enum::LauncherItem.ODO_TRIP: ItemDialog = new Info::INF26_ODO_TRIP_SettingMenu;
      case Enum::LauncherItem.METER_DISPLAY: ItemDialog = new Info::INF01_MeterDisplaySettingMenu;
      case Enum::LauncherItem.NAVIGATION:
      {
        if( !DeviceInterface::NavigationDevice.GetNaviConnectStatus() )
        {
          ItemDialog = new Pop::POP09_POP14_BleConnectionErrorUI;
        }
        else if( !DeviceInterface::NavigationDevice.GetNaviAppInitSettingStatus() )
        {
          ItemDialog = new Pop::POP17_AppInitSettingError;
        }
        else
        {
          ItemDialog = new Navigation::NAV06_NaviSettingMenu;
        }
      }
      case Enum::LauncherItem.NOTIFICATION:
      {
        if( DeviceInterface::BluetoothDevice.IsMotoconConnected() )
        {
          ItemDialog = new Notification::NTF01_NotificationList;
        }
        else
        {
          ItemDialog = new Pop::POP09_POP14_BleConnectionErrorUI;
        }
      }
      case Enum::LauncherItem.WEATHER:
      {
        if( DeviceInterface::BluetoothDevice.IsMotoconConnected() )
        {
          ItemDialog = new Pop::POP08_WeatherLoadingUI;
        }
        else
        {
          ItemDialog = new Pop::POP09_POP14_BleConnectionErrorUI;
        }
      }
      case Enum::LauncherItem.SETTINGS: ItemDialog = new Settings::SET01_MainSettingMenu;
      case Enum::LauncherItem.SEAT_HEATER:
      {
        DeviceInterface::VehicleDevice.CurrentVehicleFunction = Enum::VehicleSupportedFunction.SEAT_HEATER;
        ItemDialog = new SeatHeater_GripWarmer::SHT01_GPW01_WSC01_VehicleFunction;
      }
      case Enum::LauncherItem.GRIP_WARMER:
      {
        DeviceInterface::VehicleDevice.CurrentVehicleFunction = Enum::VehicleSupportedFunction.GRIP_WARMER;
        ItemDialog = new SeatHeater_GripWarmer::SHT01_GPW01_WSC01_VehicleFunction;
      }
      case Enum::LauncherItem.WIND_SCREEN:
      {
        DeviceInterface::VehicleDevice.CurrentVehicleFunction = Enum::VehicleSupportedFunction.WIND_SCREEN;
        ItemDialog = new SeatHeater_GripWarmer::SHT01_GPW01_WSC01_VehicleFunction;
      }
      default:;
    }

    if( null != ItemDialog )
    {
      PresentDialog( ItemDialog, null, null, null, null, null, null, null, null, false );
    }
  }

  $rect <540,410,770,450>
  object Effects::RectEffect BaseSlideInEffect
  {
    preset Exponent = 4.38;
    preset TimingCustom1 = 0.0;
    preset Timing = Effects::Timing.Exp_Out;
    preset NoOfCycles = 1;
    preset CycleDuration = 300;
    preset Value2 = <0,38,480,272>;
    preset Value1 = <-480,38,0,272>;
    preset Outlet = ^LNC_Base.Bounds;
  }

  $rect <540,450,770,490>
  object Effects::RectEffect BaseSlideOutEffect
  {
    preset OnFinished = OnSlideOutFinishedSlot;
    preset Exponent = 4.38;
    preset TimingCustom1 = 0.0;
    preset Timing = Effects::Timing.Exp_Out;
    preset NoOfCycles = 1;
    preset CycleDuration = 300;
    preset Value2 = <-480,38,0,272>;
    preset Value1 = <0,38,480,272>;
    preset Outlet = ^LNC_Base.Bounds;
  }

  $rect <540,490,770,530>
  object Effects::RectEffect RotaryPlateSlideInEffect
  {
    preset Exponent = 4.49;
    preset TimingCustom1 = 0.0;
    preset Timing = Effects::Timing.Exp_Out;
    preset NoOfCycles = 1;
    preset CycleDuration = 300;
    preset Value2 = <0,38,134,272>;
    preset Value1 = <-134,38,0,272>;
    preset Outlet = ^LNC_RotaryPlate.Bounds;
  }

  $rect <540,530,770,570>
  object Effects::RectEffect RotaryPlateSlideOutEffect
  {
    preset OnFinished = OnSlideOutFinishedSlot;
    preset Exponent = 4.49;
    preset TimingCustom1 = 0.0;
    preset Timing = Effects::Timing.Exp_Out;
    preset NoOfCycles = 1;
    preset CycleDuration = 300;
    preset Value2 = <-134,38,0,272>;
    preset Value1 = <0,38,134,272>;
    preset Outlet = ^LNC_RotaryPlate.Bounds;
  }

  $rect <20,20,160,60>
  object Launcher::LNC_Base LNC_Base
  {
    preset Bounds = <-480,38,0,272>;
  }

  $rect <20,20,160,60>
  object Launcher::LNC_RotaryPlate LNC_RotaryPlate
  {
    preset Bounds = <-134,38,0,272>;
    preset OnIconsRotated = OnCurrentItemChangedSlot;
    preset OnSelectedAnimationFinished = OnSelectedAnimationFinishedSlot;
  }

  $rect <20,20,160,60>
  object Views::Wallpaper StatusBarShadowImage
  {
    preset Bounds = <0,38,480,49>;
    preset Bitmap = Resource::StatusBarShadow;
  }

  $rect <540,570,770,610>
  slot OnSlideOutFinishedSlot
  {
    if( !BaseSlideOutEffect.Enabled && !RotaryPlateSlideOutEffect.Enabled )
    {
      Owner.DismissDialog( this, null, null, null, null, null, false );
    }
  }

  // Dismiss dialogs presented from launcher
  $rect <250,670,450,710>
  method void DismissChildDialogs()
  {
    while( CountDialogs() > 0 )
    {
      trace "DismissChildDialogs ", classof GetDialogAtIndex( 0 );
      DismissDialog( GetDialogAtIndex( 0 ), null, null, null, null, null, false );
    }
  }

  $rect <850,410,1050,450>
  method void GetVehicleSupportedFeature()
  {
    SeatHeaterEnabled = DeviceInterface::VehicleDevice.IsVehicleFunctionSupported( Enum::VehicleSupportedFunction.SEAT_HEATER );
    GripWarmerEnabled = DeviceInterface::VehicleDevice.IsVehicleFunctionSupported( Enum::VehicleSupportedFunction.GRIP_WARMER );
    WindScreenEnabled = DeviceInterface::VehicleDevice.IsVehicleFunctionSupported( Enum::VehicleSupportedFunction.WIND_SCREEN );
  }

  $rect <850,610,1130,650>
  object Core::SystemEventHandler VehicleDataReceivedEventHandler
  {
    preset OnEvent = OnVehicleDataReceivedSlot;
    preset Event = DeviceInterface::VehicleDevice.VehicleDataReceivedSystemEvent;
  }

  // This slot method is executed when the associated system event handler 'SystemEventHandler' \
  // receives an event.
  $rect <850,660,1090,700>
  slot OnVehicleDataReceivedSlot
  {
    var DeviceInterface::VehicleDataClass VehicleData = (DeviceInterface::VehicleDataClass)VehicleDataReceivedEventHandler.Context;
    if( null != VehicleData )
    {
      switch( VehicleData.RxType )
      {
        case Enum::VehicleRxType.SUPPORT_FUNC_GRIP_WARMER: GripWarmerEnabled = DeviceInterface::VehicleDevice.IsVehicleFunctionSupported( Enum::VehicleSupportedFunction.GRIP_WARMER );
        case Enum::VehicleRxType.SUPPORT_FUNC_SEAT_HEATER: SeatHeaterEnabled = DeviceInterface::VehicleDevice.IsVehicleFunctionSupported( Enum::VehicleSupportedFunction.SEAT_HEATER );
        case Enum::VehicleRxType.SUPPORT_FUNC_WIND_SCREEN: WindScreenEnabled = DeviceInterface::VehicleDevice.IsVehicleFunctionSupported( Enum::VehicleSupportedFunction.WIND_SCREEN );
        case Enum::VehicleRxType.GRIP_WARMER_STATUS:
        {
          var bool IsGripWarmerItemDisplayed = ( Enum::LauncherItem.GRIP_WARMER == PreviousItem ||
                                                 Enum::LauncherItem.GRIP_WARMER == CurrentItem  ||
                                                 Enum::LauncherItem.GRIP_WARMER == NextItem );
          if( IsGripWarmerItemDisplayed )
          {
            LNC_RotaryPlate.SetItems( PreviousItem, CurrentItem, NextItem );
          }
        }
        case Enum::VehicleRxType.SEAT_HEATER_STATUS:
        {
          var bool IsSeatHeaterItemDisplayed = ( Enum::LauncherItem.SEAT_HEATER == PreviousItem ||
                                                 Enum::LauncherItem.SEAT_HEATER == CurrentItem  ||
                                                 Enum::LauncherItem.SEAT_HEATER == NextItem );
          if( IsSeatHeaterItemDisplayed )
          {
            LNC_RotaryPlate.SetItems( PreviousItem, CurrentItem, NextItem );
          }
        }
        case Enum::VehicleRxType.TIMEOUT_ERROR2_UPDATED,
             Enum::VehicleRxType.TIMEOUT_ERROR1_UPDATED:
        {
          LNC_Base.SetItems( PreviousItem, CurrentItem, NextItem );
          LNC_RotaryPlate.SetItems( PreviousItem, CurrentItem, NextItem );
        }
        default:;
      }
    }
  }

  $rect <850,710,1080,750>
  method bool IsLauncherItemEnabled( arg Enum::LauncherItem aLauncherItem )
  {
    var bool ItemEnabled = true;;
    switch( aLauncherItem )
    {
      case Enum::LauncherItem.SEAT_HEATER,
           Enum::LauncherItem.GRIP_WARMER,
           Enum::LauncherItem.WIND_SCREEN:
      {
        if( DeviceInterface::VehicleDevice.IsTimeoutError2Detected ||
            DeviceInterface::VehicleDevice.IsHeaterStatusTimeoutErr1Detected )
        {
          ItemEnabled = false;
        }
      }
      default:;
    }
    return ItemEnabled;
  }
}

$rect <10,110,250,150>
$output false
class LNC_RotaryPlate : Components::BaseComponent
{
  $rect <60,250,220,290>
  inherited property Bounds = <0,0,134,234>;

  $rect <10,430,234,470>
  inherited method OnShortDownKeyActivated()
  {
    StartIconRotation( Enum::RotationDirection.COUNTER_CLOCKWISE );
  }

  $rect <10,390,234,430>
  inherited method OnShortUpKeyActivated()
  {
    StartIconRotation( Enum::RotationDirection.CLOCKWISE );
  }

  $rect <290,340,510,380>
  var Enum::RotationDirection RotationDirection = Enum::RotationDirection.CLOCKWISE;

  $rect <430,0,630,40>
  array Views::Image Icons[ 4 ] =
  (
    Default[0] = Icon0;
    Default[1] = Icon1;
    Default[2] = Icon2;
    Default[3] = Icon3;
  );

  $rect <430,80,630,120>
  array rect IconPositions[ 5 ] =
  (
    Default[0] = <-81,-143,-31,-93>;
    Default[1] = <9,10,59,60>;
    Default[2] = <27,88,77,138>;
    Default[3] = <9,166,59,216>;
    Default[4] = <-81,231,-31,281>;
  );

  $rect <430,40,630,80>
  var int32 SelectedIconIdx = 1;

  $rect <290,420,510,460>
  property slot OnIconsRotated;

  $rect <170,40,370,80>
  property Enum::LauncherItem CurrentItem;

  $rect <560,340,780,380>
  object Effects::RectEffect RectEffect0
  {
    preset NoOfCycles = 1;
    preset CycleDuration = 150;
    preset Value2 = <0,0,0,0>;
    preset Value1 = <0,0,0,0>;
  }

  $rect <560,380,780,420>
  object Effects::RectEffect RectEffect1
  {
    preset NoOfCycles = 1;
    preset CycleDuration = 150;
    preset Value2 = <0,0,0,0>;
    preset Value1 = <0,0,0,0>;
  }

  $rect <560,420,780,460>
  object Effects::RectEffect RectEffect2
  {
    preset NoOfCycles = 1;
    preset CycleDuration = 150;
    preset Value2 = <0,0,0,0>;
    preset Value1 = <0,0,0,0>;
  }

  $rect <560,460,780,500>
  object Effects::RectEffect RectEffect3
  {
    preset NoOfCycles = 1;
    preset CycleDuration = 150;
    preset Value2 = <0,0,0,0>;
    preset Value1 = <0,0,0,0>;
  }

  $rect <560,300,780,340>
  array Effects::RectEffect RectEffectArray[ 4 ] =
  (
    Default[0] = RectEffect0;
    Default[1] = RectEffect1;
    Default[2] = RectEffect2;
    Default[3] = RectEffect3;
  );

  $rect <290,300,510,340>
  method void StartIconRotation( arg Enum::RotationDirection aDirection )
  {
    RotationDirection = aDirection;

    var Launcher::LNC_Main LNCMainDialog = ( Launcher::LNC_Main )Owner;
    if( Enum::RotationDirection.CLOCKWISE == aDirection )
    {
      HiddenItem = LNCMainDialog.GetPreviousItem( PreviousItem );
    }
    else
    {
      HiddenItem = LNCMainDialog.GetNextItem( NextItem );
    }

    var int32 HiddenIconIdx = ( SelectedIconIdx + 2 ) % Icons.size;
    Icons[HiddenIconIdx].Bitmap = GetSmallIconResourceOfItem( HiddenItem );
    SetIconFrameNumber( HiddenItem, Icons[HiddenIconIdx] );

    IconSelectedLarge.Visible = false;
    SetIconFrameNumber( CurrentItem, Icons[SelectedIconIdx] );
    Icons[SelectedIconIdx].Visible = true;

    var int32 IconIdx = 0;
    var int32 i = 0;
    for( i = 0; i < RectEffectArray.size; i++ )
    {
      var Effects::RectEffect Effect = RectEffectArray[i];
      if( Enum::RotationDirection.CLOCKWISE == aDirection )
      {
        IconIdx = ( SelectedIconIdx - 2 + i + Icons.size ) % Icons.size;
        Effect.Value1 = IconPositions[i];
        Effect.Value2 = IconPositions[i+1];
      }
      else
      {
        IconIdx = ( SelectedIconIdx - 1 + i + Icons.size ) % Icons.size;
        Effect.Value1 = IconPositions[i+1];
        Effect.Value2 = IconPositions[i];
      }
      if( SelectedIconIdx == IconIdx )
      {
        Effect.OnFinished = OnIconRotationFinished;
      }
      else
      {
        Effect.OnFinished = null;
      }
      Effect.Outlet = ^Icons[IconIdx].Bounds;
      Effect.Enabled = true;
    }

  }

  $rect <290,380,510,420>
  slot OnIconRotationFinished
  {
    if( Enum::RotationDirection.CLOCKWISE == RotationDirection )
    {
      SelectedIconIdx = ( SelectedIconIdx - 1 + Icons.size ) % Icons.size;
      NextItem = CurrentItem;
      CurrentItem = PreviousItem;
      PreviousItem = HiddenItem;
    }
    else
    {
      SelectedIconIdx = ( SelectedIconIdx + 1 ) % Icons.size;
      PreviousItem = CurrentItem;
      CurrentItem = NextItem;
      NextItem = HiddenItem;
    }

    IconSelectedLarge.Bitmap = GetLargeIconResourceOfItem( CurrentItem );
    SetIconFrameNumber( CurrentItem, IconSelectedLarge );
    Icons[SelectedIconIdx].Visible = false;
    IconSelectedLarge.Visible = true;

    postsignal OnIconsRotated;
  }

  $rect <170,0,370,40>
  property Enum::LauncherItem PreviousItem;

  $rect <170,80,370,120>
  property Enum::LauncherItem NextItem;

  $rect <10,300,234,340>
  method void SetItems( arg Enum::LauncherItem aPreviousItem, arg Enum::LauncherItem aCurrentItem, arg Enum::LauncherItem aNextItem )
  {
    PreviousItem = aPreviousItem;
    CurrentItem = aCurrentItem;
    NextItem = aNextItem;

    Icons[SelectedIconIdx].Bitmap = GetSmallIconResourceOfItem( CurrentItem );
    IconSelectedLarge.Bitmap = GetLargeIconResourceOfItem( CurrentItem );
    SetIconFrameNumber( CurrentItem, IconSelectedLarge );

    var int32 PeviousIconIdx = ( SelectedIconIdx - 1 + Icons.size ) % Icons.size;
    Icons[PeviousIconIdx].Bitmap = GetSmallIconResourceOfItem( PreviousItem );
    SetIconFrameNumber( PreviousItem, Icons[PeviousIconIdx] );

    var int32 NextIconIdx = ( SelectedIconIdx + 1 ) % Icons.size;
    Icons[NextIconIdx].Bitmap = GetSmallIconResourceOfItem( NextItem );
    SetIconFrameNumber( NextItem, Icons[NextIconIdx] );
  }

  $rect <430,120,690,160>
  method Resources::Bitmap GetSmallIconResourceOfItem( arg Enum::LauncherItem aItem )
  {
    var Resources::Bitmap IconBitmap;
    var DeviceInterface::VehicleDataClass VehicleData;

    switch( aItem )
    {
      case Enum::LauncherItem.PHONE: IconBitmap = Resource::IconPhoneSmall;
      case Enum::LauncherItem.MUSIC: IconBitmap = Resource::IconMusicSmall;
      case Enum::LauncherItem.ODO_TRIP: IconBitmap = Resource::IconOdoTripSmall;
      case Enum::LauncherItem.METER_DISPLAY: IconBitmap = Resource::IconThemeSmall;
      case Enum::LauncherItem.NAVIGATION: IconBitmap = Resource::IconNavigationSmall;
      case Enum::LauncherItem.NOTIFICATION: IconBitmap = Resource::IconNotificationSmall;
      case Enum::LauncherItem.WEATHER: IconBitmap = Resource::IconWeatherSmall;
      case Enum::LauncherItem.SETTINGS: IconBitmap = Resource::IconSettingSmall;
      case Enum::LauncherItem.SEAT_HEATER:
      {
        VehicleData = DeviceInterface::VehicleDevice.GetData( Enum::VehicleRxType.SEAT_HEATER_STATUS );
        if( null != VehicleData &&
            SeatHeater_GripWarmer::HIGHEST_STATUS >= VehicleData.DataUInt32 &&
            VehicleData.DataUInt32 >= SeatHeater_GripWarmer::LOWEST_STATUS )
        {
          var Enum::HeaterSettingStatusType HeaterSettingStatus = (Enum::HeaterSettingStatusType)VehicleData.DataUInt32;
          switch( HeaterSettingStatus )
          {
            case Enum::HeaterSettingStatusType.OFF: IconBitmap = Resource::IconSeatHeater0Small;
            case Enum::HeaterSettingStatusType.LOW: IconBitmap = Resource::IconSeatHeater1Small;
            case Enum::HeaterSettingStatusType.MID: IconBitmap = Resource::IconSeatHeater2Small;
            case Enum::HeaterSettingStatusType.HIGH: IconBitmap = Resource::IconSeatHeater3Small;
            default:;
          }
        }
      }
      case Enum::LauncherItem.GRIP_WARMER:
      {
        VehicleData = DeviceInterface::VehicleDevice.GetData( Enum::VehicleRxType.GRIP_WARMER_STATUS );
        if( null != VehicleData &&
            SeatHeater_GripWarmer::HIGHEST_STATUS >= VehicleData.DataUInt32 &&
            VehicleData.DataUInt32 >= SeatHeater_GripWarmer::LOWEST_STATUS )
        {
          var Enum::HeaterSettingStatusType HeaterSettingStatus = (Enum::HeaterSettingStatusType)VehicleData.DataUInt32;
          switch( HeaterSettingStatus )
          {
            case Enum::HeaterSettingStatusType.OFF: IconBitmap = Resource::IconGripWarmer0Small;
            case Enum::HeaterSettingStatusType.LOW: IconBitmap = Resource::IconGripWarmer1Small;
            case Enum::HeaterSettingStatusType.MID: IconBitmap = Resource::IconGripWarmer2Small;
            case Enum::HeaterSettingStatusType.HIGH: IconBitmap = Resource::IconGripWarmer3Small;
            default:;
          }
        }
      }
      case Enum::LauncherItem.WIND_SCREEN: IconBitmap = Resource::IconWindScreenSmall;
      default:;
    }

    return IconBitmap;
  }

  $rect <430,160,690,200>
  method Resources::Bitmap GetLargeIconResourceOfItem( arg Enum::LauncherItem aItem )
  {
    var Resources::Bitmap IconBitmap;
    var DeviceInterface::VehicleDataClass VehicleData;

    switch( aItem )
    {
      case Enum::LauncherItem.PHONE: IconBitmap = Resource::IconPhoneLarge;
      case Enum::LauncherItem.MUSIC: IconBitmap = Resource::IconMusicLarge;
      case Enum::LauncherItem.ODO_TRIP: IconBitmap = Resource::IconOdoTripLarge;
      case Enum::LauncherItem.METER_DISPLAY: IconBitmap = Resource::IconThemeLarge;
      case Enum::LauncherItem.NAVIGATION: IconBitmap = Resource::IconNavigationLarge;
      case Enum::LauncherItem.NOTIFICATION: IconBitmap = Resource::IconNotificationLarge;
      case Enum::LauncherItem.WEATHER: IconBitmap = Resource::IconWeatherLarge;
      case Enum::LauncherItem.SETTINGS: IconBitmap = Resource::IconSettingLarge;
      case Enum::LauncherItem.SEAT_HEATER:
      {
        VehicleData = DeviceInterface::VehicleDevice.GetData( Enum::VehicleRxType.SEAT_HEATER_STATUS );
        if( null != VehicleData &&
            SeatHeater_GripWarmer::HIGHEST_STATUS >= VehicleData.DataUInt32 &&
            VehicleData.DataUInt32 >= SeatHeater_GripWarmer::LOWEST_STATUS )
        {
          var Enum::HeaterSettingStatusType HeaterSettingStatus = (Enum::HeaterSettingStatusType)VehicleData.DataUInt32;
          switch( HeaterSettingStatus )
          {
            case Enum::HeaterSettingStatusType.OFF: IconBitmap = Resource::IconSeatHeater0Large;
            case Enum::HeaterSettingStatusType.LOW: IconBitmap = Resource::IconSeatHeater1Large;
            case Enum::HeaterSettingStatusType.MID: IconBitmap = Resource::IconSeatHeater2Large;
            case Enum::HeaterSettingStatusType.HIGH: IconBitmap = Resource::IconSeatHeater3Large;
            default:;
          }
        }
      }
      case Enum::LauncherItem.GRIP_WARMER:
      {
        VehicleData = DeviceInterface::VehicleDevice.GetData( Enum::VehicleRxType.GRIP_WARMER_STATUS );
        if( null != VehicleData &&
            SeatHeater_GripWarmer::HIGHEST_STATUS >= VehicleData.DataUInt32 &&
            VehicleData.DataUInt32 >= SeatHeater_GripWarmer::LOWEST_STATUS )
        {
          var Enum::HeaterSettingStatusType HeaterSettingStatus = (Enum::HeaterSettingStatusType)VehicleData.DataUInt32;
          switch( HeaterSettingStatus )
          {
            case Enum::HeaterSettingStatusType.OFF: IconBitmap = Resource::IconGripWarmer0Large;
            case Enum::HeaterSettingStatusType.LOW: IconBitmap = Resource::IconGripWarmer1Large;
            case Enum::HeaterSettingStatusType.MID: IconBitmap = Resource::IconGripWarmer2Large;
            case Enum::HeaterSettingStatusType.HIGH: IconBitmap = Resource::IconGripWarmer3Large;
            default:;
          }
        }
      }
      case Enum::LauncherItem.WIND_SCREEN: IconBitmap = Resource::IconWindScreenLarge;
      default:;
    }

    return IconBitmap;
  }

  $rect <10,500,230,540>
  method void StartSelectedAnimation()
  {
    HighlightImage.Visible = true;
    SelectedAnimationTimer.Enabled = true;
  }

  $rect <10,540,230,580>
  object Core::Timer SelectedAnimationTimer
  {
    preset OnTrigger = OnSelectedAnimationFinishedSlot;
    preset Period = 100;
  }

  $rect <10,580,280,620>
  slot OnSelectedAnimationFinishedSlot
  {
    HighlightImage.Visible = false;
    SelectedAnimationTimer.Enabled = false;
    postsignal OnSelectedAnimationFinished;
  }

  $rect <10,620,280,660>
  property slot OnSelectedAnimationFinished;

  $rect <20,20,160,60>
  object Views::Image BaseImage
  {
    preset Bounds = <0,0,134,234>;
    preset Bitmap = Resource::LCBase;
  }

  $rect <20,20,160,60>
  object Views::Image Icon0
  {
    preset Layout = Core::Layout[AlignToLeft, AlignToTop];
    preset Bounds = <9,10,59,60>;
    preset FrameNumber = 1;
    preset Bitmap = Resource::IconMusicSmall;
  }

  $rect <20,20,160,60>
  object Views::Image Icon1
  {
    preset Layout = Core::Layout[AlignToLeft, AlignToTop];
    preset Bounds = <27,88,77,138>;
    preset FrameNumber = 1;
    preset Bitmap = Resource::IconMusicSmall;
    preset Visible = false;
  }

  $rect <20,20,160,60>
  object Views::Image Icon2
  {
    preset Layout = Core::Layout[AlignToLeft, AlignToTop];
    preset Bounds = <9,166,59,216>;
    preset FrameNumber = 1;
    preset Bitmap = Resource::IconPhoneSmall;
  }

  $rect <20,20,160,60>
  object Views::Image Icon3
  {
    preset Layout = Core::Layout[AlignToLeft, AlignToTop];
    preset Bounds = <-1,249,41,291>;
    preset FrameNumber = 1;
    preset Bitmap = Resource::IconSettingSmall;
  }

  $rect <20,20,160,60>
  object Views::Image IconSelectedLarge
  {
    preset Layout = Core::Layout[AlignToLeft, AlignToTop];
    preset Bounds = <13,74,91,152>;
    preset FrameNumber = 1;
    preset Bitmap = Resource::IconMusicLarge;
    preset Visible = true;
  }

  $rect <20,20,160,60>
  object Views::Image HighlightImage
  {
    preset Bounds = <0,70,122,156>;
    preset Bitmap = Resource::LCHighlight;
    preset Visible = false;
  }

  $rect <170,120,370,160>
  property Enum::LauncherItem HiddenItem;

  $rect <10,340,230,380>
  method void SetIconFrameNumber( arg Enum::LauncherItem aLauncherItem, arg Views::Image aIcon )
  {
    var Launcher::LNC_Main LNCMain = (Launcher::LNC_Main)Owner;
    if( null != LNCMain )
    {
      if( LNCMain.IsLauncherItemEnabled( aLauncherItem ) )
      {
        aIcon.FrameNumber = 1;
      }
      else
      {
        aIcon.FrameNumber = 0;
      }
    }
  }

  $reorder Opacity 1
  $reorder Embedded 1
  $reorder AlphaBlended 1
  $reorder Visible 1
  $reorder KeyHandler 1
  $reorder OnKeyPressSlot 1
  $reorder OnKeyHoldSlot 1
  $reorder OnKeyReleaseSlot 1
}

$rect <10,60,250,100>
$output false
class LNC_Base : Core::Group
{
  $rect <0,250,200,290>
  inherited property Bounds = <0,38,480,272>;

  $rect <20,20,160,60>
  object Views::Wallpaper Background
  {
    preset Layout = Core::Layout[AlignToBottom, AlignToLeft];
    preset Bounds = <0,0,480,234>;
    preset Bitmap = Resource::LauncherBG;
  }

  $rect <20,20,160,60>
  object Views::Image ImgLCBlueline
  {
    preset Bounds = <0,58,480,168>;
    preset Bitmap = Resource::LCBlueline;
  }

  $rect <20,20,160,60>
  object Views::Text CurrentItemTitleText
  {
    preset Bounds = <138,92,469,135>;
    preset Alignment = Views::TextAlignment[AlignHorzLeft, AlignVertCenter];
    preset Font = Fonts::NotoSansCjkJpMedium28pt;
  }

  $rect <20,20,160,60>
  object Views::Text PreviousItemTitleText
  {
    preset Bounds = <121,17,439,50>;
    preset Alignment = Views::TextAlignment[AlignHorzLeft, AlignVertCenter];
    preset String = "";
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
    preset Color = #6B6B6BFF;
  }

  $rect <20,20,160,60>
  object Views::Text NextItemTitleText
  {
    preset Bounds = <121,173,439,206>;
    preset Alignment = Views::TextAlignment[AlignHorzLeft, AlignVertCenter];
    preset String = "";
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
    preset Color = #6B6B6BFF;
  }

  $rect <0,350,230,390>
  method string GetStringOfLauncherItem( arg Enum::LauncherItem aLauncherItem )
  {
    var string Title;
    switch( aLauncherItem )
    {
      case Enum::LauncherItem.PHONE: Title = Strings::LNC_PHONE;
      case Enum::LauncherItem.MUSIC: Title = Strings::LNC_MUSIC;
      case Enum::LauncherItem.ODO_TRIP: Title = Strings::LNC_ODO_TRIP;
      case Enum::LauncherItem.METER_DISPLAY: Title = Strings::LNC_METER_DISPLAY;
      case Enum::LauncherItem.NAVIGATION: Title = Strings::LNC_NAVIGATION;
      case Enum::LauncherItem.NOTIFICATION: Title = Strings::LNC_NOTIFICATION;
      case Enum::LauncherItem.WEATHER: Title = Strings::LNC_WEATHER;
      case Enum::LauncherItem.SETTINGS: Title = Strings::LNC_SETTINGS;
      case Enum::LauncherItem.SEAT_HEATER: Title = Strings::LNC_SEAT_HEATER;
      case Enum::LauncherItem.GRIP_WARMER: Title = Strings::GPW01_GRIP_WARMER;
      case Enum::LauncherItem.WIND_SCREEN: Title = Strings::WSC01_WIND_SCREEN;
      default:;
    }
    return Title;
  }

  $rect <0,300,200,340>
  method void SetItems( arg Enum::LauncherItem aPreviousItem, arg Enum::LauncherItem aCurrentItem, arg Enum::LauncherItem aNextItem )
  {
    PreviousItemTitleText.String = GetStringOfLauncherItem( aPreviousItem );
    CurrentItemTitleText.String = GetStringOfLauncherItem( aCurrentItem );
    NextItemTitleText.String = GetStringOfLauncherItem( aNextItem );

    SetTextColor( aPreviousItem, PreviousItemTitleText, #6B6B6BFF, Color::GRAY_FOR_DISABLED );
    SetTextColor( aCurrentItem, CurrentItemTitleText, Color::WHITE, Color::GRAY_FOR_DISABLED );
    SetTextColor( aNextItem, NextItemTitleText, #6B6B6BFF, Color::GRAY_FOR_DISABLED );
  }

  $rect <0,400,200,440>
  method void SetTextColor( arg Enum::LauncherItem aItem, arg Views::Text aText, arg color aColorEnabled, arg color aColorDisabled )
  {
    var Launcher::LNC_Main LNCMain = (Launcher::LNC_Main)Owner;
    if( null != LNCMain )
    {
      if( LNCMain.IsLauncherItemEnabled( aItem ) )
      {
        aText.Color = aColorEnabled;
      }
      else
      {
        aText.Color = aColorDisabled;
      }
    }
  }
}
