$version 10.00

$rect <550,10,750,50>
inline Inline
{
  #include "BC_motocon_pub.h"
  #include "BC_motocon_pub_type.h"
}

$rect <20,10,220,50>
$output false
class Main : Core::Group
{
  $rect <0,50,200,90>
  inherited property Bounds = <0,0,480,38>;

  $rect <20,20,160,60>
  object Views::Rectangle Background
  {
    preset Bounds = <0,0,480,38>;
    preset Color = #000000FF;
  }

  $rect <20,20,160,60>
  object Views::Image Divider
  {
    preset Bounds = <0,36,480,38>;
    preset Alignment = Views::ImageAlignment[AlignVertBottom, ScaleToFit];
    preset Bitmap = Resource::StatusBarDivider;
  }

  $rect <20,20,160,60>
  object StatusBar::Clock Clock
  {
    preset Bounds = <11,0,93,38>;
    preset Visible = false;
  }

  // App/Headset/Battery Icon
  note group Note
  {
    attr Bounds = <210,50,530,500>;
  }

  $rect <230,90,470,130>
  object Core::SystemEventHandler MotoConEventHandler
  {
    preset OnEvent = OnMotoConEventReceived;
    preset Event = DeviceInterface::BluetoothDevice.MotoConSystemEvent;
  }

  // This slot method is executed when the associated system event handler 'SystemEventHandler' \
  // receives an event.
  $rect <230,140,470,180>
  slot OnMotoConEventReceived
  {
    var DeviceInterface::MotoConContext MotoConContext = ( DeviceInterface::MotoConContext )MotoConEventHandler.Context;
    switch( MotoConContext.RxEvent )
    {
      case Enum::MotoConRxEvent.CONNECTION_STATUS: UpdateMotoConConnectionStatus();
      case Enum::MotoConRxEvent.PHONE_BATTERY: UpdateBatteryIcon();
      case Enum::MotoConRxEvent.PHONE_HEADSET: UpdateHeadsetIcon();
      case Enum::MotoConRxEvent.PHONE_THERMAL: UpdateAppIcon();
      case Enum::MotoConRxEvent.PHONE_CELL_SIGNAL_LEVEL: UpdatePhoneCellSignalLevelIcon();
      default:;
    }
  }

  $rect <230,240,510,280>
  method void UpdateMotoConConnectionStatus()
  {
    IsMotoConConnected = DeviceInterface::BluetoothDevice.IsMotoconConnected();

    if( !IsMotoConConnected )
    {
      AppIcon.Visible = false;
      BatteryIcon.Visible = false;
      HeadsetIcon.Visible = false;
      SignalLevelIcon.Visible = false;
    }
    else
    {
      UpdateAppIcon();
    }
  }

  $rect <230,190,470,230>
  var bool IsMotoConConnected;

  $rect <230,340,510,380>
  method void UpdateBatteryIcon()
  {
    var bool IsBatteryCharging = false;
    var uint8 PhoneBatteryPercentage = 0;

    $if !$prototyper
      native( IsBatteryCharging, PhoneBatteryPercentage )
      {
        bc_motocon_battery_t charging_state = BC_motocon_get_battery_charging_state();
        if( BC_MOTOCON_BATTERY_CHARGING == charging_state )
        {
          IsBatteryCharging = true;
        }
        PhoneBatteryPercentage = BC_motocon_get_battery_percentage();
      }
    $endif

    if( IsMotoConConnected )
    {
      if( IsBatteryCharging )
      {
        BatteryIcon.Bitmap = Resource::BatteryChagingIcon;
      }
      else
      {
        BatteryIcon.Bitmap = Resource::BatteryNotChagingIcon;
      }

      if( PhoneBatteryPercentage >= StatusBar::BATTERY_PERCENTAGE_LEVEL5 )
      {
        BatteryIcon.FrameNumber = 5;
      }
      else if( PhoneBatteryPercentage >= StatusBar::BATTERY_PERCENTAGE_LEVEL4 )
      {
        BatteryIcon.FrameNumber = 4;
      }
      else if( PhoneBatteryPercentage >= StatusBar::BATTERY_PERCENTAGE_LEVEL3 )
      {
        BatteryIcon.FrameNumber = 3;
      }
      else if( PhoneBatteryPercentage >= StatusBar::BATTERY_PERCENTAGE_LEVEL2 )
      {
        BatteryIcon.FrameNumber = 2;
      }
      else if( PhoneBatteryPercentage >= StatusBar::BATTERY_PERCENTAGE_LEVEL1 )
      {
        BatteryIcon.FrameNumber = 1;
      }
      else
      {
        BatteryIcon.FrameNumber = 0;
      }

      BatteryIcon.Visible = true;
    }
  }

  $rect <230,290,510,330>
  method void UpdateHeadsetIcon()
  {
    var bool IsHeadsetConnected = false;

    $if !$prototyper
      native( IsHeadsetConnected )
      {
        bc_motocon_bt_headset_state_t headset_state = BC_motocon_get_bt_headset_state();
        if( BC_MOTOCON_HEADSET_CONNECTED == headset_state )
        {
          IsHeadsetConnected = true;
        }
      }
    $endif

    if( IsMotoConConnected && IsHeadsetConnected )
    {
      HeadsetIcon.Visible = true;
    }
    else
    {
      HeadsetIcon.Visible = false;
    }
  }

  $rect <20,20,160,60>
  object Views::Image BatteryIcon
  {
    preset Bounds = <228,3,260,35>;
    preset Bitmap = Resource::BatteryNotChagingIcon;
    preset Visible = false;
  }

  $rect <20,20,160,60>
  object Views::Image HeadsetIcon
  {
    preset Bounds = <294,3,326,35>;
    preset Bitmap = Resource::HeadsetIcon;
    preset Visible = false;
  }

  $rect <20,20,160,60>
  object Views::Image AppIcon
  {
    preset Bounds = <261,3,293,35>;
    preset Bitmap = Resource::AppIcon;
    preset Visible = false;
  }

  $rect <20,20,160,60>
  object Views::Image BtIcon
  {
    preset Bounds = <96,3,128,35>;
    preset Bitmap = Resource::StatusBarBtIcon;
    preset Visible = false;
  }

  $rect <570,100,860,140>
  object Core::PropertyObserver BTEnabledObserver
  {
    preset OnEvent = OnBtcConnectionStatusChangedSlot;
    preset Outlet = ^DeviceInterface::BluetoothDevice.BluetoothEnable;
  }

  // This slot method is executed when the associated property observer 'PropertyObserver' \
  // is notified.
  $rect <570,200,860,240>
  slot OnBtcConnectionStatusChangedSlot
  {
    if( DeviceInterface::BluetoothDevice.BluetoothEnable )
    {
      if( DeviceInterface::BluetoothDevice.IsBtConnected() )
      {
        BtIcon.FrameNumber = 1;
      }
      else
      {
        BtIcon.FrameNumber = 0;
      }
      BtIcon.Visible = true;
    }
    else
    {
      BtIcon.Visible = false;
    }
  }

  $rect <570,150,860,190>
  object Core::PropertyObserver PairdDeviceChangedObserver
  {
    preset OnEvent = OnBtcConnectionStatusChangedSlot;
    preset Outlet = ^DeviceInterface::BluetoothDevice.RefreshPairedDeviceList;
  }

  // BT Icon
  note group Note1
  {
    attr Bounds = <550,50,880,260>;
  }

  $rect <230,390,510,430>
  method void UpdateAppIcon()
  {
    if( IsMotoConConnected )
    {
      var bool IsPhoneThermalHigh = false;

      $if !$prototyper
        native( IsPhoneThermalHigh )
        {
          bc_motocon_thermal_state_t charging_state = BC_motocon_get_phone_thermal();
          if( BC_MOTOCON_THERMAL_HIGH == charging_state )
          {
            IsPhoneThermalHigh = true;
          }
        }
      $endif

      if( IsPhoneThermalHigh )
      {
        AppIcon.FrameNumber = 1;
      }
      else
      {
        AppIcon.FrameNumber = 0;
      }
    }

    AppIcon.Visible = IsMotoConConnected;
  }

  $rect <230,440,510,480>
  method void UpdatePhoneCellSignalLevelIcon()
  {
    if( IsMotoConConnected )
    {
      var uint8 PhoneCellSignalLevel;

      $if !$prototyper
        native( PhoneCellSignalLevel )
        {
          PhoneCellSignalLevel = BC_motocon_get_phone_cell_signal_level();
        }
      $endif

      if( 0 == PhoneCellSignalLevel )
      {
        SignalLevelIcon.Visible = false;
      }
      else if( StatusBar::MAX_PHONE_CELL_SIGNAL_LEVEL >= PhoneCellSignalLevel )
      {
        SignalLevelIcon.FrameNumber = PhoneCellSignalLevel - 1;
        SignalLevelIcon.Visible = true;
      }
      else
      {
        // empty
      }
    }

    SignalLevelIcon.Visible = IsMotoConConnected;
  }

  $rect <20,20,160,60>
  object Views::Image SignalLevelIcon
  {
    preset Bounds = <195,3,227,35>;
    preset Bitmap = Resource::SignalLevelIcon;
    preset Visible = false;
  }

  // Vehicle supported function
  note group Note2
  {
    attr Bounds = <920,50,1250,360>;
  }

  $rect <950,100,1230,140>
  object Core::SystemEventHandler VehicleDataReceivedEventHandler
  {
    preset OnEvent = OnVehicleDataReceivedSlot;
    preset Event = DeviceInterface::VehicleDevice.VehicleDataReceivedSystemEvent;
  }

  // This slot method is executed when the associated system event handler 'SystemEventHandler' \
  // receives an event.
  $rect <950,150,1230,190>
  slot OnVehicleDataReceivedSlot
  {
    var DeviceInterface::VehicleDataClass VehicleData = ( DeviceInterface::VehicleDataClass )VehicleDataReceivedEventHandler.Context;
    if( null != VehicleData )
    {
      switch( VehicleData.RxType )
      {
        case Enum::VehicleRxType.SUPPORT_FUNC_CLOCK: Clock.Visible = DeviceInterface::VehicleDevice.IsVehicleFunctionSupported( Enum::VehicleSupportedFunction.CLOCK );
        case Enum::VehicleRxType.SUPPORT_FUNC_GRIP_WARMER,
             Enum::VehicleRxType.GRIP_WARMER_STATUS:
        {
          UpdateGripWarmerIcon();
        }
        case Enum::VehicleRxType.SUPPORT_FUNC_SEAT_HEATER,
             Enum::VehicleRxType.SEAT_HEATER_STATUS:
        {
          UpdateSeatHeaterIcon();
        }
        case Enum::VehicleRxType.TEMPERATURE_UNIT,
             Enum::VehicleRxType.AIR_TEMPERATURE,
             Enum::VehicleRxType.SUPPORT_FUNC_AIR_TEMPERATURE:
        {
          UpdateAirTemperature();
        }
        default:;
      }
    }
  }

  // Notification Icon
  note group Note3
  {
    attr Bounds = <550,270,910,530>;
  }

  $rect <20,20,160,60>
  object Views::Image PhoneIcon
  {
    preset Bounds = <129,3,161,35>;
    preset Bitmap = Resource::PhoneIcon;
    preset Visible = false;
  }

  $rect <560,320,860,360>
  object Core::SystemEventHandler PhoneCallStateChangedEventHandler
  {
    preset OnEvent = OnUpdatePhoneIconSlot;
    preset Event = DeviceInterface::NotificationDevice.PhoneCallStateChangedSystemEvent;
  }

  $rect <560,370,860,410>
  slot OnUpdatePhoneIconSlot
  {
    if( DeviceInterface::NotificationDevice.IsPhoneCallStateActive() )
    {
      PhoneIcon.FrameNumber = 1;
      PhoneIcon.Visible = true;
    }
    else if( 0 < DeviceInterface::NotificationDevice.GetNotificationNumOfCategory( Enum::NotificationCategory.MISSED_CALL ) )
    {
      PhoneIcon.FrameNumber = 0;
      PhoneIcon.Visible = true;
    }
    else
    {
      PhoneIcon.Visible = false;
    }
  }

  // This slot method is executed when the associated property observer 'PropertyObserver' \
  // is notified.
  $rect <560,470,820,510>
  slot OnNotificationListUpdatedSlot
  {
    if( 0 < DeviceInterface::NotificationDevice.GetNotificationNumOfCategory( Enum::NotificationCategory.MESSAGE ) )
    {
      MessageIcon.Visible = true;
    }
    else
    {
      MessageIcon.Visible = false;
    }

    signal OnUpdatePhoneIconSlot;
  }

  $rect <560,420,900,460>
  object Core::SystemEventHandler NotificationListUpdatedSystemEventHandler
  {
    preset OnEvent = OnNotificationListUpdatedSlot;
    preset Event = DeviceInterface::NotificationDevice.NotificationListUpdatedSystemEvent;
  }

  $rect <20,20,160,60>
  object Views::Image MessageIcon
  {
    preset Bounds = <162,3,194,35>;
    preset Bitmap = Resource::MessageIcon;
    preset Visible = false;
  }

  $rect <20,20,160,60>
  object Views::Image GripWarmerIcon
  {
    preset Bounds = <327,3,359,35>;
    preset Bitmap = Resource::GripWarmerIcon;
    preset Visible = false;
  }

  $rect <20,20,160,60>
  object Views::Image SeatHeaterIcon
  {
    preset Bounds = <360,3,392,35>;
    preset Bitmap = Resource::SeatHeaterIcon;
    preset Visible = false;
  }

  $rect <950,200,1160,240>
  method void UpdateGripWarmerIcon()
  {
    if( DeviceInterface::VehicleDevice.IsVehicleFunctionSupported( Enum::VehicleSupportedFunction.GRIP_WARMER ) )
    {
      var DeviceInterface::VehicleDataClass VehicleData = DeviceInterface::VehicleDevice.GetData( Enum::VehicleRxType.GRIP_WARMER_STATUS );
      if( null != VehicleData &&
          SeatHeater_GripWarmer::LOWEST_STATUS <= VehicleData.DataUInt32 &&
          SeatHeater_GripWarmer::HIGHEST_STATUS >= VehicleData.DataUInt32 )
      {
        GripWarmerIcon.FrameNumber = (int32)VehicleData.DataUInt32;
        GripWarmerIcon.Visible = true;
      }
    }
    else
    {
      GripWarmerIcon.Visible = false;
    }
  }

  $rect <950,250,1160,290>
  method void UpdateSeatHeaterIcon()
  {
    if( DeviceInterface::VehicleDevice.IsVehicleFunctionSupported( Enum::VehicleSupportedFunction.SEAT_HEATER ) )
    {
      var DeviceInterface::VehicleDataClass VehicleData = DeviceInterface::VehicleDevice.GetData( Enum::VehicleRxType.SEAT_HEATER_STATUS );
      if( null != VehicleData &&
          SeatHeater_GripWarmer::LOWEST_STATUS <= VehicleData.DataUInt32 &&
          SeatHeater_GripWarmer::HIGHEST_STATUS >= VehicleData.DataUInt32 )
      {
        SeatHeaterIcon.FrameNumber = (int32)VehicleData.DataUInt32;
        SeatHeaterIcon.Visible = true;
      }
    }
    else
    {
      SeatHeaterIcon.Visible = false;
    }
  }

  $rect <950,300,1160,340>
  method void UpdateAirTemperature()
  {
    if( DeviceInterface::VehicleDevice.IsVehicleFunctionSupported( Enum::VehicleSupportedFunction.AIR_TEMPERATURE ) )
    {
      var DeviceInterface::VehicleDataClass AirTemperatureContext = DeviceInterface::VehicleDevice.GetData( Enum::VehicleRxType.AIR_TEMPERATURE );
      var DeviceInterface::VehicleDataClass TemepratureUnitContext = DeviceInterface::VehicleDevice.GetData( Enum::VehicleRxType.TEMPERATURE_UNIT );
      if( null != AirTemperatureContext && null != TemepratureUnitContext )
      {
        if( AirTemperatureContext.Valid )
        {
          var float AirTemperature;
          if( Enum::TemperatureSettingItem.TEMP_F == (Enum::TemperatureSettingItem)TemepratureUnitContext.DataUInt32 )
          {
            UnitImage.FrameNumber = 1;
            AirTemperature = AirTemperatureContext.DataFloat * 1.8 + 32;
            AirTemperature = DeviceInterface::VehicleDevice.ClampDataFloat( AirTemperature, Settings::MIN_TEMPERATURE_DEG_F, Settings::MAX_TEMPERATURE_DEG_F );
          }
          else
          {
            UnitImage.FrameNumber = 0;
            AirTemperature = AirTemperatureContext.DataFloat;
            AirTemperature = DeviceInterface::VehicleDevice.ClampDataFloat( AirTemperature, Settings::MIN_TEMPERATURE_DEG_C, Settings::MAX_TEMPERATURE_DEG_C );
          }

          AirTemperatureText.String = string( AirTemperature, 0, 0 );
        }
        else
        {
          AirTemperatureText.String = Strings::GEN_THREE_HYPHENS;
        }

        AirTemperatureText.Visible = true;
        UnitImage.Visible = true;
      }
    }
    else
    {
      AirTemperatureText.Visible = false;
      UnitImage.Visible = false;
    }
  }

  $rect <20,20,160,60>
  object Views::Text AirTemperatureText
  {
    preset Bounds = <397,1,452,38>;
    preset Alignment = Views::TextAlignment[AlignHorzRight, AlignVertCenter];
    preset String = "";
    preset Font = Fonts::NotoSansMedium32pt;
    preset Visible = false;
  }

  $rect <20,20,160,60>
  object Views::Image UnitImage
  {
    preset Bounds = <454,2,471,36>;
    preset Bitmap = Resource::TempUnit;
    preset Visible = false;
  }
}

$rect <20,60,220,100>
$output false
class Clock : Core::Group
{
  $rect <0,50,200,90>
  inherited property Bounds = <0,0,82,38>;

  $rect <20,20,160,60>
  object Views::Text ClockHourText
  {
    preset Bounds = <1,0,38,37>;
    preset Alignment = Views::TextAlignment[AlignHorzRight, AlignVertCenter];
    preset String = "";
    preset Font = Fonts::NotoSansMedium32pt;
    preset Color = #FFFFFFFF;
    preset Visible = true;
  }

  $rect <210,100,480,140>
  slot OnUpdateLocalTimeSlot
  {
    var DeviceInterface::RtcTime CurrentTime = DeviceInterface::SystemDevice.GetLocalTime();

    if( CurrentTime.Hour > 12 )
    {
      CurrentTime.Hour -= 12;
    }
    ClockHourText.String = string( CurrentTime.Hour );
    ClockMinuteText.String = string( CurrentTime.Minute, 2 );
    ClockColonText.Visible = !ClockColonText.Visible;
  }

  $rect <210,50,480,90>
  object Core::SystemEventHandler OnUpdateLocalTimeEventHandler
  {
    preset OnEvent = OnUpdateLocalTimeSlot;
    preset Event = DeviceInterface::SystemDevice.UpdateLocalTimeSystemEvent;
  }

  $rect <20,20,160,60>
  object Views::Text ClockMinuteText
  {
    preset Bounds = <48,0,82,37>;
    preset Alignment = Views::TextAlignment[AlignHorzCenter, AlignVertCenter];
    preset String = "";
    preset Font = Fonts::NotoSansMedium32pt;
    preset Color = #FFFFFFFF;
    preset Visible = true;
  }

  $rect <20,20,160,60>
  object Views::Text ClockColonText
  {
    preset Bounds = <37,0,48,37>;
    preset Alignment = Views::TextAlignment[AlignHorzCenter, AlignVertCenter];
    preset String = ":";
    preset Font = Fonts::NotoSansMedium32pt;
    preset Color = #FFFFFFFF;
    preset Visible = false;
  }
}

$rect <250,10,530,50>
$output false
const uint8 BATTERY_PERCENTAGE_LEVEL0 = 0;

$rect <250,60,530,100>
$output false
const uint8 BATTERY_PERCENTAGE_LEVEL1 = 4;

$rect <250,110,530,150>
$output false
const uint8 BATTERY_PERCENTAGE_LEVEL2 = 16;

$rect <250,160,530,200>
$output false
const uint8 BATTERY_PERCENTAGE_LEVEL3 = 41;

$rect <250,210,530,250>
$output false
const uint8 BATTERY_PERCENTAGE_LEVEL4 = 61;

$rect <250,260,530,300>
$output false
const uint8 BATTERY_PERCENTAGE_LEVEL5 = 81;

// Phone cell signal level ranging from 0 to 4
$rect <250,310,530,350>
$output false
const int32 MAX_PHONE_CELL_SIGNAL_LEVEL = 5;
