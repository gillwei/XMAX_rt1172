$version 11.00

$rect <10,10,240,50>
$output false
class MNT01_MaintenanceReset : Menu::BaseMenuView
{
  $rect <0,290,200,330>
  inherited method Init()
  {
    trace "Init MNT01";

    SetNoOfMenuItems();
    GetMileageSetting();
  }

  $rect <230,340,430,380>
  inherited property DDModeEnabled = true;

  $rect <230,290,430,330>
  inherited var SlideOutEffectEnabled = true;

  $rect <510,20,710,60>
  inherited method LoadItemClass()
  {
    aItemNo; //suppress warning
    return Menu::ItemValueUnit;
  }

  $rect <510,70,710,110>
  inherited method LoadItemTitle()
  {
    var string Title = "";
    switch( SupportedSetting[aItemNo] )
    {
      case Enum::MaintenanceResetMenuItem.OIL: Title = Strings::MNT01_OIL;
      case Enum::MaintenanceResetMenuItem.V_BELT: Title = Strings::MNT01_V_BELT;
      case Enum::MaintenanceResetMenuItem.FREE1: Title = Strings::MNT01_FREE1;
      case Enum::MaintenanceResetMenuItem.FREE2: Title = Strings::MNT01_FREE2;
      default:;
    }
    return Title;
  }

  $rect <510,220,710,260>
  inherited method OnItemActivate()
  {
    aMenuItem; // suppress warning

    if( 0 < NoOfSupportedItem )
    {
      var Pop::POP04_Reset ResetDialog = new Pop::POP04_Reset;
      ResetDialog.SelectedMeterInfo = Enum::MeterInfo.TOTAL;

      switch( aItemNo )
      {
        case 0: ResetDialog.SelectedMeterInfo = Enum::MeterInfo.MAINTENANCE_TRIP1;
        case 1: ResetDialog.SelectedMeterInfo = Enum::MeterInfo.MAINTENANCE_TRIP2;
        case 2: ResetDialog.SelectedMeterInfo = Enum::MeterInfo.MAINTENANCE_TRIP3;
        default:;
      }

      if( Enum::MeterInfo.TOTAL != ResetDialog.SelectedMeterInfo )
      {
        PresentDialog( ResetDialog, null, null, null, null, null, null, null, null, false );
      }
    }
  }

  $rect <20,20,160,60>
  inherited object Menu
  {
    preset ItemHeight = Menu::ItemHeightTall;
  }

  $rect <510,170,710,210>
  inherited method LoadItemUnit()
  {
    aItemNo; // suppress warning

    var string UnitString;
    switch( MileageSetting )
    {
      case Enum::MileageSettingItem.KM: UnitString = Strings::UNT02_UNIT_MILEAGE_KILOMETER;
      case Enum::MileageSettingItem.MILE: UnitString = Strings::UNT02_UNIT_MILEAGE_MILE;
      default:;
    }

    return UnitString;
  }

  $rect <510,120,710,160>
  inherited method LoadItemValue()
  {
    var string Value;
    var DeviceInterface::VehicleDataClass VehicleData;

    if( 0 < NoOfSupportedItem )
    {
      switch( aItemNo )
      {
        case 0: VehicleData = DeviceInterface::VehicleDevice.GetData( Enum::VehicleRxType.MAINTENANCE_TRIP1 );
        case 1: VehicleData = DeviceInterface::VehicleDevice.GetData( Enum::VehicleRxType.MAINTENANCE_TRIP2 );
        case 2: VehicleData = DeviceInterface::VehicleDevice.GetData( Enum::VehicleRxType.MAINTENANCE_TRIP3 );
        default: VehicleData.Valid = false;
      }
    }
    else
    {
      // when no maintenance item, display OIL "---"
      VehicleData = new DeviceInterface::VehicleDataClass;
      VehicleData.Valid = false;
    }

    if( VehicleData.Valid )
    {
      if( Enum::MileageSettingItem.MILE == MileageSetting )
      {
        VehicleData.DataUInt32 *= Unit::KM_TO_MILE_SCALE;
      }
      VehicleData.DataUInt32 = DeviceInterface::VehicleDevice.ClampDataUInt32( VehicleData.DataUInt32, 0, Settings::MAX_MAINTENANCE_TRIP );
      Value = string( VehicleData.DataUInt32, 0, 0 );
    }
    else
    {
      Value = Strings::GEN_THREE_HYPHENS;
    }

    return Value;
  }

  $rect <720,70,920,110>
  array Enum::MaintenanceResetMenuItem SupportedSetting[ 3 ];

  $rect <0,390,200,430>
  method void GetMileageSetting()
  {
    var DeviceInterface::VehicleDataClass VehicleData = DeviceInterface::VehicleDevice.GetData( Enum::VehicleRxType.MILEAGE_UNIT );
    if( Enum::MileageSettingItem.MILE == VehicleData.DataUInt32 )
    {
      MileageSetting = Enum::MileageSettingItem.MILE;
    }
    else
    {
      MileageSetting = Enum::MileageSettingItem.KM;
    }
  }

  $rect <0,440,200,480>
  var Enum::MileageSettingItem MileageSetting;

  $rect <0,340,200,380>
  method void SetNoOfMenuItems()
  {
    var int32 i;
    var Enum::MaintenanceResetMenuItem SettingItem;
    NoOfSupportedItem = 0;

    for( i = 0; i < (int32)Enum::MaintenanceResetMenuItem.TOTAL; i++ )
    {
      SettingItem = (Enum::MaintenanceResetMenuItem)i;
      switch( SettingItem )
      {
        case Enum::MaintenanceResetMenuItem.OIL:
        {
          if( DeviceInterface::VehicleDevice.IsVehicleFunctionSupported( Enum::VehicleSupportedFunction.OIL_TRIP ) )
          {
            SupportedSetting[NoOfSupportedItem] = SettingItem;
            NoOfSupportedItem++;
          }
        }
        case Enum::MaintenanceResetMenuItem.V_BELT:
        {
          if( DeviceInterface::VehicleDevice.IsVehicleFunctionSupported( Enum::VehicleSupportedFunction.V_BELT_TRIP ) )
          {
            SupportedSetting[NoOfSupportedItem] = SettingItem;
            NoOfSupportedItem++;
          }
        }
        case Enum::MaintenanceResetMenuItem.FREE1:
        {
          if( DeviceInterface::VehicleDevice.IsVehicleFunctionSupported( Enum::VehicleSupportedFunction.FREE_1 ) )
          {
            SupportedSetting[NoOfSupportedItem] = SettingItem;
            NoOfSupportedItem++;
          }
        }
        case Enum::MaintenanceResetMenuItem.FREE2:
        {
          if( DeviceInterface::VehicleDevice.IsVehicleFunctionSupported( Enum::VehicleSupportedFunction.FREE_2 ) )
          {
            SupportedSetting[NoOfSupportedItem] = SettingItem;
            NoOfSupportedItem++;
          }
        }
        default:;
      }

      if( Maintenance::MAX_MAINTENANCE_RESET_ITEM_NUM <= NoOfSupportedItem )
      {
        break;
      }
    }

    if( 0 == NoOfSupportedItem )
    {
      // display OIL "---" when no maintenance item
      SupportedSetting[NoOfSupportedItem] = Enum::MaintenanceResetMenuItem.OIL;
      Menu.NoOfItems = 1;
    }
    else
    {
      Menu.NoOfItems = NoOfSupportedItem;
    }
  }

  $rect <510,290,790,330>
  object Core::SystemEventHandler VehicleDataReceivedEventHandler
  {
    preset OnEvent = OnVehicleDataReceivedSlot;
    preset Event = DeviceInterface::VehicleDevice.VehicleDataReceivedSystemEvent;
  }

  // This slot method is executed when the associated system event handler 'SystemEventHandler' \
  // receives an event.
  $rect <510,340,750,380>
  slot OnVehicleDataReceivedSlot
  {
    var DeviceInterface::VehicleDataClass VehicleData = (DeviceInterface::VehicleDataClass)VehicleDataReceivedEventHandler.Context;
    if( null != VehicleData )
    {
      switch( VehicleData.RxType )
      {
        case Enum::VehicleRxType.MAINTENANCE_TRIP1: ReloadItem( 0 );
        case Enum::VehicleRxType.MAINTENANCE_TRIP2: ReloadItem( 1 );
        case Enum::VehicleRxType.MAINTENANCE_TRIP3: ReloadItem( 2 );
        default:;
      }
    }
  }

  $rect <510,390,710,430>
  method void ReloadItem( arg int32 aItemNo )
  {
    if( aItemNo < Menu.NoOfItems )
    {
      Menu.InvalidateItems( aItemNo, aItemNo );
    }
  }

  $rect <0,490,200,530>
  var int32 NoOfSupportedItem;
}

$rect <10,60,340,100>
$output false
const int32 MAX_MAINTENANCE_RESET_ITEM_NUM = 3;
