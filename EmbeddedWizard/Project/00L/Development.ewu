$version 10.00

$rect <20,10,260,50>
$output false
class Main : Menu::BaseMenuView
{
  $rect <10,300,210,340>
  inherited property Bounds = <0,0,480,272>;

  $rect <230,300,430,340>
  inherited slot OnLongKeyPressed
  {
    var Core::KeyPressHandler CurrentKeyHandler = ( Core::KeyPressHandler )sender;
    if( null != CurrentKeyHandler && null != Owner )
    {
      switch( CurrentKeyHandler.Code )
      {
        case Core::KeyCode.Ok: Owner.DismissDialog( this, null, null, null, null, null, false );
        default:;
      }
    }
  }

  $rect <510,10,710,50>
  inherited method LoadItemClass()
  {
    var class ItemClass = null;
    switch (aItemNo )
    {
      case 0: ItemClass = Menu::ItemBase;
      case 1: ItemClass = Menu::ItemCheckbox;
      default: ItemClass = Menu::ItemBase;
    }

    return ItemClass;
  }

  $rect <510,60,710,100>
  inherited method LoadItemTitle()
  {
    var string Title = "";
    if( aItemNo < ItemTitleArray.size )
    {
      Title = ItemTitleArray[aItemNo];
    }
    return Title;
  }

  $rect <510,160,710,200>
  inherited method OnItemActivate()
  {
    if( null == aMenuItem )
    {
      // empty body to suppress warning
    }

    switch( aItemNo )
    {
      case 0: SlideInDialog( new Factory::Main );
      case 1: DeviceInterface::SystemDevice.IsHopperTestMode = !DeviceInterface::SystemDevice.IsHopperTestMode;
      case 2: this.PresentDialog( new Development::DEV_RealTimeClock, null, null, null, null, null, null, null, null, false );
      default:;
    }

  }

  $rect <510,110,710,150>
  inherited method LoadItemChecked()
  {
    var bool IsChecked = false;
    switch( aItemNo )
    {
      case 1: IsChecked = DeviceInterface::SystemDevice.IsHopperTestMode;
      default:;
    }
    return IsChecked;
  }

  $rect <730,60,930,100>
  array string ItemTitleArray[ 3 ] =
  (
    Default[0] = "Factory Test";
    Default[1] = "Hopper Test Mode";
    Default[2] = "Real Time Clock";
  );

  $rect <20,20,160,60>
  object Menu::VerticalMenu Menu
  {
    preset Bounds = <0,36,480,272>;
    preset PassKeyHold = OnLongKeyPressed;
    preset NoOfItems = ItemTitleArray.size;
    preset ItemHeight = Menu::ItemHeightSmall;
  }

  $reorder SlideInDialog 4
  $reorder LoadItemClass 4
  $reorder LoadItemTitle 4
  $reorder OnItemActivate 4
  $reorder LoadItemChecked 4
  $reorder ItemTitleArray 1
  $reorder Menu 1
}

$rect <60,60,260,100>
$output false
class DEV_RealTimeClock : Components::BaseMainBG
{
  $rect <10,290,210,330>
  inherited property Bounds = <0,0,480,272>;

  $rect <220,290,450,330>
  inherited method OnShortHomeKeyActivated()
  {
    Owner.DismissDialog( this, null, null, null, null, null, false );
  }

  $rect <530,120,820,160>
  slot OnUpdateLocalTimeSlot
  {
    var DeviceInterface::RtcTime CurrentTime = ( DeviceInterface::RtcTime )OnUpdateLocalTimeEventHandler.Context;
    if( null != CurrentTime )
    {
      TimeText.String = string( CurrentTime.Year, 4 ) + "/" + string( CurrentTime.Month, 2 ) + "/"+ string( CurrentTime.Day, 2 ) + " "
                        + string( CurrentTime.Hour, 2 ) + ":" + string( CurrentTime.Minute, 2 ) + ":" + string( CurrentTime.Second, 2 );

    }
  }

  $rect <530,70,820,110>
  object Core::SystemEventHandler OnUpdateLocalTimeEventHandler
  {
    preset OnEvent = OnUpdateLocalTimeSlot;
    preset Event = DeviceInterface::SystemDevice.UpdateLocalTimeSystemEvent;
  }

  $rect <20,20,160,60>
  object Views::Text TimeText
  {
    preset Bounds = <96,79,390,122>;
    preset Alignment = Views::TextAlignment[AlignHorzCenter, AlignVertCenter];
    preset String = "";
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }
}
