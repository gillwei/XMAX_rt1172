$version 10.00

$rect <20,10,220,50>
inline Inline
{
  #include "TEST_pub.h"
  #include "VI_pub.h"
}

$rect <20,60,260,100>
$output false
class DEV_Main : Menu::BaseMenuView
{
  $rect <510,10,710,50>
  inherited method LoadItemClass()
  {
    var class ItemClass = null;
    switch (aItemNo )
    {
      case 0, 1: ItemClass = Menu::ItemCheckbox;
      default: ItemClass = Menu::ItemBase;
    }

    return ItemClass;
  }

  $rect <510,60,710,100>
  inherited method LoadItemTitle()
  {
    var string Title = "";
    if( aItemNo < ItemTitleArray.size )
    {
      Title = ItemTitleArray[aItemNo];
    }
    return Title;
  }

  $rect <510,160,710,200>
  inherited method OnItemActivate()
  {
    if( null == aMenuItem )
    {
      // empty body to suppress warning
    }

    switch( aItemNo )
    {
      case 0:
      {
        if( Enum::OperationMode.FACTORY == DeviceInterface::SystemDevice.OperationMode )
        {
          DeviceInterface::SystemDevice.OperationMode = Enum::OperationMode.NORMAL;
        }
        else
        {
          DeviceInterface::SystemDevice.OperationMode = Enum::OperationMode.FACTORY;
        }
      }
      case 1: DeviceInterface::SystemDevice.IsHopperTestMode = !DeviceInterface::SystemDevice.IsHopperTestMode;
      case 2: PresentDialog( new Factory::Main, null, null, null, null, null, null, null, null, false );
      case 3: PresentDialog( new Development::DEV_RealTimeClock, null, null, null, null, null, null, null, null, false );
      case 4: PresentDialog( new Development::DEV_Bluetooth, null, null, null, null, null, null, null, null, false );
      case 5: PresentDialog( new Development::DEV_TFTBrightness, null, null, null, null, null, null, null, null, false );
      case 6: PresentDialog( new Development::DEV_VehicleSupportedFunction, null, null, null, null, null, null, null, null, false );
      case 7: PresentDialog( new Development::DEV_MotoCon, null, null, null, null, null, null, null, null, false );
      case 8: PresentDialog( new Development::DEV_FontMenu, null, null, null, null, null, null, null, null, false );
      default:;
    }
  }

  $rect <510,110,710,150>
  inherited method LoadItemChecked()
  {
    var bool IsChecked = false;
    switch( aItemNo )
    {
      case 0: IsChecked = ( Enum::OperationMode.NORMAL != DeviceInterface::SystemDevice.OperationMode );
      case 1: IsChecked = DeviceInterface::SystemDevice.IsHopperTestMode;
      default:;
    }
    return IsChecked;
  }

  $rect <730,60,930,100>
  array string ItemTitleArray[ 9 ] =
  (
    Default[0] = "Factory Mode";
    Default[1] = "Hopper Test Mode";
    Default[2] = "Factory Test";
    Default[3] = "Real Time Clock";
    Default[4] = "Bluetooth Test";
    Default[5] = "TFT Brightness Test";
    Default[6] = "Vehicle Supported Func";
    Default[7] = "MotoCon Test";
    Default[8] = "Font Test";
  );

  $rect <20,20,160,60>
  inherited object Menu
  {
    preset NoOfItems = ItemTitleArray.size;
    preset ItemHeight = Menu::ItemHeightSmall;
    preset ItemNumPerPage = 4;
  }

  $reorder HideFocusFrameTimer 1
  $reorder OnHideFocusFrameTimeoutSlot 1
  $reorder OnDialogSlideInCompletedSlot 1
  $reorder PresentDialogWithSlideInEffect 1
  $reorder SlideOutEffectEnabled 1
  $reorder LoadItemClass 4
  $reorder LoadItemTitle 4
  $reorder OnItemActivate 3
  $reorder LoadItemChecked 3
  $reorder DismissMenuWithSlideOutEffect 1
  $reorder ItemTitleArray 2
}

$rect <20,110,260,150>
$output false
class DEV_RealTimeClock : Components::BaseMainBG
{
  $rect <10,290,210,330>
  inherited property Bounds = <0,0,480,272>;

  $rect <220,290,450,330>
  inherited method OnShortHomeKeyActivated()
  {
    Owner.DismissDialog( this, null, null, null, null, null, false );
  }

  $rect <530,120,810,160>
  slot OnUpdateLocalTimeSlot
  {
    var DeviceInterface::RtcTime CurrentTime = DeviceInterface::SystemDevice.GetLocalTime();

    TimeText.String = string( CurrentTime.Year, 4 ) + "/" + string( CurrentTime.Month, 2 ) + "/"+ string( CurrentTime.Day, 2 ) + " "
                      + string( CurrentTime.Hour, 2 ) + ":" + string( CurrentTime.Minute, 2 ) + ":" + string( CurrentTime.Second, 2 );
  }

  $rect <530,70,800,110>
  object Core::SystemEventHandler OnUpdateLocalTimeEventHandler
  {
    preset OnEvent = OnUpdateLocalTimeSlot;
    preset Event = DeviceInterface::SystemDevice.UpdateLocalTimeSystemEvent;
  }

  $rect <20,20,160,60>
  object Views::Text TimeText
  {
    preset Bounds = <96,79,390,122>;
    preset Alignment = Views::TextAlignment[AlignHorzCenter, AlignVertCenter];
    preset String = "";
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }
}

$rect <20,160,260,200>
$output false
class DEV_Bluetooth : Components::BaseMainBG
{
  $rect <10,290,210,330>
  inherited property Bounds = <0,0,480,272>;

  $rect <220,290,450,330>
  inherited method OnShortHomeKeyActivated()
  {
    Owner.DismissDialog( this, null, null, null, null, null, false );
  }

  $rect <20,20,160,60>
  object Views::Text BtSwVersionTitle
  {
    preset Bounds = <0,40,240,65>;
    preset String = "BT Software Version";
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <20,20,160,60>
  object Views::Text BtSwVersionText
  {
    preset Bounds = <247,40,356,65>;
    preset Alignment = Views::TextAlignment[AlignHorzLeft, AlignVertCenter];
    preset String = DeviceInterface::SystemDevice.BtSoftwareVersion;
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $reorder next 1
}

$rect <20,210,260,250>
$output false
class DEV_TFTBrightness : Components::BaseMainBG
{
  $rect <10,340,190,380>
  inherited method Init()
  {
    BrightnessLevel = DeviceInterface::SystemDevice.BrightnessLevel;

  }

  $rect <10,290,190,330>
  inherited property Bounds = <0,0,480,272>;

  $rect <10,390,190,430>
  inherited method UpdateViewState()
  {
    super( aState );
    trace "aState", aState;
    var Application::Application App = ( Application::Application )GetRoot();
    trace "app: ", App;
    if( null != App )
    {
      if( aState.contains( Core::ViewState[ Dialog ] ) )
      {
        App.StatusBarVisible = false;
      }
      else
      {
        App.StatusBarVisible = true;
      }
    }
  }

  $rect <500,60,700,100>
  inherited method OnShortDownKeyActivated()
  {
    var int32 NextBrightnessLevel = BrightnessLevel - 1;
    if( 0 <= NextBrightnessLevel )
    {
      BrightnessLevel = NextBrightnessLevel;
    }
    else
    {
      ShowLevelText();
    }
  }

  $rect <500,10,700,50>
  inherited method OnShortUpKeyActivated()
  {
    var int32 NextBrightnessLevel = BrightnessLevel + 1;
    if( BrightnessList.size > NextBrightnessLevel )
    {
      BrightnessLevel = NextBrightnessLevel;
    }
    else
    {
      ShowLevelText();
    }
  }

  $rect <500,110,730,150>
  inherited method OnShortHomeKeyActivated()
  {
    Owner.DismissDialog( this, null, null, null, null, null, false );
  }

  $rect <20,20,160,60>
  object Views::Wallpaper ChessboardImage
  {
    preset Bounds = <0,2,480,272>;
    preset Bitmap = Resource::Chessboard;
  }

  $rect <20,20,160,60>
  object Views::Text LevelText
  {
    preset Bounds = <432,2,482,22>;
    preset WrapText = true;
    preset String = "";
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <500,210,700,250>
  property int32 BrightnessLevel = -1;

  $rect <500,260,700,300>
  onset BrightnessLevel
  {
    if( pure BrightnessLevel != value )
    {
      pure BrightnessLevel = value;
      LevelText.String = string( BrightnessLevel );
      ShowLevelText();
      if( DeviceInterface::SystemDevice.BrightnessLevel != value )
      {
        DeviceInterface::SystemDevice.BrightnessLevel = value;
      }
      DeviceInterface::SystemDevice.SetTFTDutyCycle( BrightnessList[BrightnessLevel] );
    }
  }

  $rect <500,160,700,200>
  array int32 BrightnessList[ 11 ] =
  (
    Default[0] = 1;
    Default[1] = 3;
    Default[2] = 6;
    Default[3] = 11;
    Default[4] = 18;
    Default[5] = 27;
    Default[6] = 38;
    Default[7] = 50;
    Default[8] = 65;
    Default[9] = 81;
    Default[10] = 100;
  );

  $rect <500,310,700,350>
  object Core::Timer HideLevelTimer
  {
    preset OnTrigger = OnHideLevelSlot;
  }

  $rect <500,360,700,400>
  slot OnHideLevelSlot
  {
    HideLevelTimer.Enabled = false;
    LevelText.Visible = false;
  }

  $rect <500,410,700,450>
  method void ShowLevelText()
  {
    LevelText.Visible = true;
    HideLevelTimer.Enabled = true;
  }
}

$rect <20,260,260,300>
$output false
class DEV_MotoCon : Menu::BaseMenuView
{
  $rect <10,300,210,340>
  inherited property Bounds = <0,0,480,272>;

  $rect <230,300,460,340>
  inherited method OnShortHomeKeyActivated()
  {
    Owner.DismissDialog( this, null, null, null, null, null, false );
  }

  $rect <510,10,710,50>
  inherited method LoadItemClass()
  {
    // suppress warning
    if( aItemNo >= 0 )
    {
      // empty body
    }
    return Menu::ItemBase;
  }

  $rect <510,60,710,100>
  inherited method LoadItemTitle()
  {
    var string Title = "";
    if( aItemNo < ItemTitleArray.size )
    {
      Title = ItemTitleArray[aItemNo];
    }
    return Title;
  }

  $rect <510,110,710,150>
  inherited method OnItemActivate()
  {
    // suppress warning
    if( null == aMenuItem || aItemNo > 0 )
    {
      // empty body
    }

    $if !$prototyper
    native( aItemNo )
    {
      TEST_motocon_tx( aItemNo );
    }
    $endif
  }

  $rect <20,20,160,60>
  inherited object Menu
  {
    preset NoOfItems = ItemTitleArray.size;
    preset ItemHeight = Menu::ItemHeightSmall;
    preset ItemNumPerPage = 4;
  }

  $rect <730,60,930,100>
  array string ItemTitleArray[ 28 ] =
  (
    Default[0] = "Start BLE advertising";
    Default[1] = "Stop BLE advertising";
    Default[2] = "Send library version";
    Default[3] = "Send weather request";
    Default[4] = "Send vehicle info";
    Default[5] = "Send vehicle setting req";
    Default[6] = "Send lang type request";
    Default[7] = "Send CAN related data";
    Default[8] = "Send CAN response";
    Default[9] = "Send injection quality";
    Default[10] = "Send music control play";
    Default[11] = "Send music control pause";
    Default[12] = "Send music control previous";
    Default[13] = "Send music control next";
    Default[14] = "Send incoming call answer";
    Default[15] = "Send incoming call decline";
    Default[16] = "Send headset state request";
    Default[17] = "Send volume control up";
    Default[18] = "Send volume control down";
    Default[19] = "Send mute microphone";
    Default[20] = "Send mute speaker";
    Default[21] = "Send media volume up";
    Default[22] = "Send media volume down";
    Default[23] = "Send vol controllable req";
    Default[24] = "Send create OTA request";
    Default[25] = "Send OTA LinkCard info";
    Default[26] = "Send CCUID response";
    Default[27] = "Send phone signal level req";
  );

  $reorder SlideInDialog 4
  $reorder LoadItemClass 4
  $reorder LoadItemTitle 4
  $reorder OnItemActivate 4
  $reorder LoadItemChecked 4
  $reorder ItemTitleArray 1
}

$rect <20,310,260,350>
$output false
class DEV_VehicleSupportedFunction : Menu::BaseMenuView
{
  $rect <10,300,210,340>
  inherited property Bounds = <0,0,480,272>;

  $rect <230,300,460,340>
  inherited method OnShortHomeKeyActivated()
  {
    Owner.DismissDialog( this, null, null, null, null, null, false );
  }

  $rect <510,10,710,50>
  inherited method LoadItemClass()
  {
    // suppress warning
    if( aItemNo >= 0 )
    {
      // empty body
    }
    return Menu::ItemCheckbox;
  }

  $rect <510,60,710,100>
  inherited method LoadItemTitle()
  {
    var string Title = "";
    if( aItemNo < ItemTitleArray.size )
    {
      Title = ItemTitleArray[aItemNo];
    }
    return Title;
  }

  $rect <510,160,710,200>
  inherited method OnItemActivate()
  {
    // suppress warning
    if( null == aMenuItem || aItemNo > 0 )
    {
      // empty body
    }

    $if !$prototyper
      var bool IsChecked = false;
      var Menu::ItemCheckbox CheckBoxItem = ( Menu::ItemCheckbox )aMenuItem;
      if( null != CheckBoxItem )
      {
        IsChecked = CheckBoxItem.CheckBoxButton.Checked;
      }

      native( aItemNo, IsChecked )
      {
        VI_set_supported_function( aItemNo, IsChecked );
      }
    $endif
  }

  $rect <510,110,710,150>
  inherited method LoadItemChecked()
  {
    var bool IsFunctionSupported = false;
    $if !$prototyper
      IsFunctionSupported = DeviceInterface::VehicleDevice.IsVehicleFunctionSupported( ( Enum::VehicleSupportedFunction )aItemNo );
    $else
      // suppress warning
      if( aItemNo )
      {
        // empty body
      }
    $endif
    return IsFunctionSupported;
  }

  $rect <20,20,160,60>
  inherited object Menu
  {
    preset NoOfItems = ItemTitleArray.size;
    preset ItemHeight = Menu::ItemHeightSmall;
    preset ItemNumPerPage = 4;
    preset ScrollbarVisible = false;
  }

  $rect <730,60,930,100>
  array string ItemTitleArray[ 27 ] =
  (
    Default[0] = "Trip 1";
    Default[1] = "Trip 2";
    Default[2] = "F-Trip";
    Default[3] = "Meter Brightness Adj";
    Default[4] = "Clock";
    Default[5] = "TCS";
    Default[6] = "Grip Warmer";
    Default[7] = "Seat Heater";
    Default[8] = "Wind Screen";
    Default[9] = "Oil Trip";
    Default[10] = "V-Belt Trip";
    Default[11] = "Free 1";
    Default[12] = "Free 2";
    Default[13] = "Avg Speed";
    Default[14] = "Current Fuel";
    Default[15] = "Avg Fuel";
    Default[16] = "Fuel Consumption";
    Default[17] = "Air Temperature";
    Default[18] = "Battery Voltage";
    Default[19] = "Coolant";
    Default[20] = "Range Distance";
    Default[21] = "Tire Front";
    Default[22] = "Tire Front Right";
    Default[23] = "Tire Front Left";
    Default[24] = "Tire Rear";
    Default[25] = "Trip Time";
    Default[26] = "Cruise";
  );

  $reorder SlideInDialog 4
  $reorder LoadItemClass 4
  $reorder LoadItemTitle 4
  $reorder OnItemActivate 4
  $reorder LoadItemChecked 4
  $reorder ItemTitleArray 1
}

$rect <310,60,550,100>
$output false
class DEV_FontMenu : Menu::BaseMenuView
{
  $rect <510,10,710,50>
  inherited method LoadItemClass()
  {
    // suppress warning
    if( aItemNo >= 0 )
    {
      // empty body
    }

    return Menu::ItemBase;
  }

  $rect <510,60,710,100>
  inherited method LoadItemTitle()
  {
    var string Title = "";
    if( aItemNo < ItemTitleArray.size )
    {
      Title = ItemTitleArray[aItemNo];
    }
    return Title;
  }

  $rect <510,110,710,150>
  inherited method OnItemActivate()
  {
    // suppress warning
    if( null == aMenuItem )
    {
      // empty body
    }

    var Development::DEV_FontTest Dialog = new Development::DEV_FontTest;

    switch( aItemNo )
    {
      case 0:
      {
        Dialog.TestFont = Fonts::NotoSansCjkJpMedium24pt;
        Dialog.TestString = Strings::DEV_TEST_LETTERS;
      }
      case 1:
      {
        Dialog.TestFont = Fonts::NotoSansCjkJpMedium28pt;
        Dialog.TestString = Strings::DEV_TEST_LETTERS;
      }
      case 2:
      {
        Dialog.TestFont = Fonts::NotoSansCjkJpMedium24pt;
        Dialog.TestString = Strings::DEV_TEST_CHINESE;
      }
      case 3:
      {
        Dialog.TestFont = Fonts::NotoSansCjkJpMedium24pt;
        Dialog.TestString = Strings::DEV_TEST_JAPANESE;
      }
      case 4:
      {
        Dialog.TestFont = Fonts::NotoSansCjkJpMedium28pt;
        Dialog.TestString = Strings::DEV_TEST_CHINESE;
      }
      case 5:
      {
        Dialog.TestFont = Fonts::NotoSansCjkJpMedium28pt;
        Dialog.TestString = Strings::DEV_TEST_JAPANESE;
      }
      default:;
    }

    SlideInDialog( Dialog );
  }

  $rect <20,20,160,60>
  inherited object Menu
  {
    preset NoOfItems = ItemTitleArray.size;
    preset ItemHeight = Menu::ItemHeightSmall;
    preset ItemNumPerPage = 4;
  }

  $rect <730,60,930,100>
  array string ItemTitleArray[ 6 ] =
  (
    Default[0] = "NotoSans Med 24pt Letter";
    Default[1] = "NotoSans Med 28pt Letter";
    Default[2] = "NotoSansCJKJP24 Chinese";
    Default[3] = "NotoSansCJKJP24 Japanese";
    Default[4] = "NotoSansCJKJP28 Chinese";
    Default[5] = "NotoSansCJKJP28 Japanese";
  );

  $rect <0,290,200,330>
  var bool SlideOutEffectEnabled1 = true;

  $reorder SlideInDialog 4
  $reorder LoadItemClass 4
  $reorder LoadItemTitle 4
  $reorder OnItemActivate 4
  $reorder LoadItemChecked 4
  $reorder ItemTitleArray 1
}

$rect <310,110,550,150>
$output false
class DEV_FontTest : Components::BaseMainBG
{
  $rect <210,340,440,380>
  inherited method OnShortDownKeyActivated()
  {
    if( ( Text.ScrollOffset.y.abs + PageScrollOffset ) < ( Text.GetNoOfRows() * RowDistance ) )
    {
      Text.ScrollOffset.y -= PageScrollOffset;
    }
  }

  $rect <210,290,440,330>
  inherited method OnShortUpKeyActivated()
  {
    var int32 OffsetY = Text.ScrollOffset.y + PageScrollOffset;
    if( OffsetY <= 0 )
    {
      Text.ScrollOffset.y = OffsetY;
    }
  }

  $rect <0,290,200,330>
  inherited var SlideOutEffectEnabled = true;

  $rect <20,20,160,60>
  object Views::Text Text
  {
    preset Bounds = <10,50,470,236>;
    preset WrapText = true;
    preset Alignment = Views::TextAlignment[AlignHorzLeft, AlignVertTop];
    preset String = "";
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  // Page scroll offset of row distance 31px * 6row
  $rect <514,239,714,279>
  var int32 PageScrollOffset = 186;

  $rect <510,20,710,60>
  property Resources::Font TestFont;

  $rect <510,60,710,100>
  onset TestFont
  {
    if( pure TestFont != value )
    {
      pure TestFont = value;
      Text.Font = value;

      if( Fonts::NotoSansCjkJpMedium28pt == value )
      {
        RowDistance = Fonts::ROW_DISTANCE_28PT;
      }

      PageScrollOffset = ( Text.Bounds.size.y / RowDistance ) * RowDistance;
      trace "PageScrollOffset: ", PageScrollOffset;
    }
  }

  $rect <514,129,714,169>
  property string TestString;

  $rect <514,169,714,209>
  onset TestString
  {
    if( pure TestString != value )
    {
      pure TestString = value;
      Text.String = value;
    }
  }

  $rect <511,280,711,320>
  var int32 RowDistance = Fonts::ROW_DISTANCE_24PT;
}
