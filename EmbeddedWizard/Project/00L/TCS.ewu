$version 10.00

$rect <20,20,220,60>
$output false
class TCS01_Main : Menu::BaseMenuView
{
  $rect <260,300,460,340>
  inherited method Init()
  {
    var DeviceInterface::VehicleDataClass VehicleData = DeviceInterface::VehicleDevice.GetData( Enum::VehicleRxType.TC_MODE );
    if( null != VehicleData )
    {
      IsTCSEnabled = VehicleData.DataUInt32;
    }
  }

  $rect <20,350,220,390>
  inherited property DDModeEnabled = true;

  $rect <20,400,220,440>
  inherited var SlideOutEffectEnabled = true;

  $rect <520,30,720,70>
  inherited method LoadItemClass()
  {
    var class ClassType = null;
    if( aItemNo < Menu.NoOfItems )
    {
      ClassType = Menu::ItemCheckbox;
    }
    return ClassType;
  }

  $rect <520,80,720,120>
  inherited method LoadItemTitle()
  {
    var string title = "";
    if( aItemNo < Menu.NoOfItems )
    {
      title = Strings::TCS01_TCS;
    }
    return title;
  }

  $rect <520,230,720,270>
  inherited method OnItemActivate()
  {
    aItemNo; // suppress warning
    var Menu::ItemCheckbox CheckBoxItem = (Menu::ItemCheckbox)aMenuItem;
    if( null != CheckBoxItem )
    {
      if( CheckBoxItem.Checked )
      {
        IsTCSEnabled = false;
        DeviceInterface::VehicleDevice.SetData( Enum::VehicleTxType.TCS, TCS::TCS_OFF );
      }
      else
      {
        IsTCSEnabled = true;
        DeviceInterface::VehicleDevice.SetData( Enum::VehicleTxType.TCS, TCS::TCS_ON );
      }
    }
  }

  $rect <520,130,720,170>
  inherited method LoadItemChecked()
  {
    var bool IsChecked = false;
    if( aItemNo < Menu.NoOfItems )
    {
      IsChecked = IsTCSEnabled;
    }
    return IsChecked;
  }

  $rect <20,20,160,60>
  inherited object Menu
  {
    preset DDModeEnabled = true;
    preset NoOfItems = 1;
  }

  $rect <520,180,720,220>
  inherited method LoadItemToggle()
  {
    aItemNo; // suppress warning
    return false;
  }

  $rect <770,30,1050,70>
  object Core::SystemEventHandler VehicleDataReceivedEventHandler
  {
    preset OnEvent = OnVehicleDataReceivedSlot;
    preset Event = DeviceInterface::VehicleDevice.VehicleDataReceivedSystemEvent;
  }

  // This slot method is executed when the associated system event handler 'SystemEventHandler' \
  // receives an event.
  $rect <770,80,1050,120>
  slot OnVehicleDataReceivedSlot
  {
    var DeviceInterface::VehicleDataClass VehicleData = (DeviceInterface::VehicleDataClass)VehicleDataReceivedEventHandler.Context;
    if( null != VehicleData &&
        Enum::VehicleRxType.TC_MODE == VehicleData.RxType )
    {
      VehicleData = DeviceInterface::VehicleDevice.GetData( Enum::VehicleRxType.TC_MODE );
      if( TCS::TCS_ON == VehicleData.DataUInt32 )
      {
        IsTCSEnabled = true;
        Menu.InvalidateItems( 0, 0 );
      }
      else if( TCS::TCS_OFF == VehicleData.DataUInt32 )
      {
        IsTCSEnabled = false;
        Menu.InvalidateItems( 0, 0 );
      }
      else
      {
        // ignore
      }
    }
  }

  $rect <20,300,220,340>
  var bool IsTCSEnabled;
}

$rect <20,70,220,110>
$output false
const int32 TCS_ON = 1;

$rect <20,120,220,160>
$output false
const int32 TCS_OFF = 0;
