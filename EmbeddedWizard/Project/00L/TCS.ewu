$version 11.00

$rect <20,20,220,60>
$output false
class TCS01_Main : Menu::BaseMenuView
{
  $rect <20,290,220,330>
  inherited method Init()
  {
    trace "TCS01";
    var DeviceInterface::VehicleDataClass VehicleData = DeviceInterface::VehicleDevice.GetData( Enum::VehicleRxType.TC_MODE );
    if( null != VehicleData )
    {
      IsTCSEnabled = VehicleData.DataUInt32;
    }
  }

  $rect <20,340,220,380>
  inherited property DDModeEnabled = true;

  $rect <20,390,220,430>
  inherited var SlideOutEffectEnabled = true;

  $rect <520,30,720,70>
  inherited method LoadItemClass()
  {
    // suppress warning
    aItemNo;

    return Menu::ItemCheckbox;
  }

  $rect <520,80,720,120>
  inherited method LoadItemTitle()
  {
    // suppress warning
    aItemNo;

    return Strings::TCS01_TCS;
  }

  $rect <520,280,720,320>
  inherited method OnItemActivate()
  {
    aItemNo; // suppress warning
    var Menu::ItemCheckbox CheckBoxItem = (Menu::ItemCheckbox)aMenuItem;
    if( null != CheckBoxItem )
    {
      if( CheckBoxItem.Checked )
      {
        IsTCSEnabled = false;
        DeviceInterface::VehicleDevice.SetData( Enum::VehicleTxType.TCS, TCS::TCS_OFF );
      }
      else
      {
        IsTCSEnabled = true;
        DeviceInterface::VehicleDevice.SetData( Enum::VehicleTxType.TCS, TCS::TCS_ON );
      }
    }
  }

  $rect <520,130,720,170>
  inherited method LoadItemChecked()
  {
    // suppress warning
    aItemNo;

    return IsTCSEnabled;
  }

  $rect <520,230,720,270>
  inherited method LoadItemEnabled()
  {
    // suppress warning
    aItemNo;

    return !DeviceInterface::VehicleDevice.IsTimeoutError2Detected;
  }

  $rect <20,20,160,60>
  inherited object Menu
  {
    preset DDModeEnabled = true;
    preset NoOfItems = 1;
  }

  $rect <520,180,720,220>
  inherited method LoadItemToggle()
  {
    aItemNo; // suppress warning
    return false;
  }

  $rect <770,30,1050,70>
  object Core::SystemEventHandler VehicleDataReceivedEventHandler
  {
    preset OnEvent = OnVehicleDataReceivedSlot;
    preset Event = DeviceInterface::VehicleDevice.VehicleDataReceivedSystemEvent;
  }

  // This slot method is executed when the associated system event handler 'SystemEventHandler' \
  // receives an event.
  $rect <770,80,1050,120>
  slot OnVehicleDataReceivedSlot
  {
    var DeviceInterface::VehicleDataClass VehicleData = (DeviceInterface::VehicleDataClass)VehicleDataReceivedEventHandler.Context;
    if( null != VehicleData )
    {
      switch( VehicleData.RxType )
      {
        case Enum::VehicleRxType.TC_MODE:
        {
          VehicleData = DeviceInterface::VehicleDevice.GetData( Enum::VehicleRxType.TC_MODE );
          if( TCS::TCS_ON == VehicleData.DataUInt32 )
          {
            IsTCSEnabled = true;
          }
          else if( TCS::TCS_OFF == VehicleData.DataUInt32 )
          {
            IsTCSEnabled = false;
          }
          else
          {
            /* empty */
          }
          Menu.InvalidateItems( 0, 0 );
        }
        case Enum::VehicleRxType.TIMEOUT_ERROR2_UPDATED:
        {
          Menu.InvalidateItems( 0, 0 );
        }
        default:;
      }
    }
  }

  $rect <250,290,450,330>
  var bool IsTCSEnabled;
}

$rect <20,70,220,110>
$output false
const int32 TCS_ON = 1;

$rect <20,120,220,160>
$output false
const int32 TCS_OFF = 0;
