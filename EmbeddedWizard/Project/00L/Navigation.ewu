$version 10.00

$rect <20,20,260,60>
$output false
class Main : Components::BaseComponent
{
  $rect <10,340,210,380>
  inherited method Init()
  {
    if( DeviceInterface::NavigationDevice.IsMapFrameReady() )
    {
      postsignal OnMapUpdateSlot;
    }
  }

  $rect <10,290,210,330>
  inherited property Bounds = <0,0,480,272>;

  $rect <230,340,460,380>
  inherited method OnShortDownKeyActivated()
  {
  }

  $rect <230,290,460,330>
  inherited method OnShortUpKeyActivated()
  {
  }

  $rect <230,390,460,430>
  inherited method OnShortEnterKeyActivated()
  {
    var Application::Application App = ( Application::Application )GetRoot();
    App.StatusBarVisible = false;
  }

  $rect <230,440,460,480>
  inherited method OnShortHomeKeyActivated()
  {
    Owner.DismissDialog( this, null, null, null, null, null, false );
  }

  $rect <20,20,160,60>
  object Views::Rectangle Background
  {
    preset Bounds = <0,0,480,272>;
    preset Color = #000000FF;
  }

  $rect <510,10,750,50>
  var int32 MapFrameIdx = 0;

  $rect <510,60,750,100>
  object Core::SystemEventHandler MapUpdateEventHandler
  {
    preset OnEvent = OnMapUpdateSlot;
    preset Event = DeviceInterface::NavigationDevice.MapUpdateEvent;
  }

  // This slot method is executed when the associated system event handler 'SystemEventHandler' \
  // receives an event.
  $rect <510,110,750,150>
  slot OnMapUpdateSlot
  {
    MapFrameIdx = MapFrameIdx + 1;
    Resource::ExternBitmap.Name = "Map" + string( MapFrameIdx );
  }

  $rect <20,20,160,60>
  object Views::Image MapImage
  {
    preset Bounds = <0,0,480,272>;
    preset Alignment = Views::ImageAlignment[AlignHorzRight, AlignVertBottom];
    preset Bitmap = Resource::ExternBitmap;
  }

  $rect <20,20,160,60>
  object Views::Image TbTBgImage
  {
    preset Bounds = <0,33,120,210>;
    preset Alignment = Views::ImageAlignment[ScaleToFill];
    preset Bitmap = Resource::TbTBg;
  }

  $rect <20,20,160,60>
  object Views::Image ArrivalBgImage
  {
    preset Bounds = <0,210,120,272>;
    preset Bitmap = Resource::ArrivalBg;
  }

  $rect <20,20,160,60>
  object Views::Image TbtImage
  {
    preset Bounds = <10,40,110,110>;
    preset Alignment = Views::ImageAlignment[ScaleToFit];
    preset Bitmap = Resource::IconTbT;
  }

  $rect <20,20,160,60>
  object Views::Text DistanceText
  {
    preset Bounds = <0,117,70,147>;
    preset Alignment = Views::TextAlignment[AlignHorzRight, AlignVertCenter];
    preset String = "123";
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <20,20,160,60>
  object Views::Text RoadText
  {
    preset Bounds = <0,149,120,199>;
    preset WrapText = true;
    preset String = "Minquan West Road";
    preset Font = Fonts::FontNotoSansCjkJp24;
  }

  $rect <20,20,160,60>
  object Views::Text ArrivalText
  {
    preset Bounds = <4,210,114,240>;
    preset String = "Arrival Time";
    preset Font = Fonts::FontNotoSansCjkJp20;
  }

  $rect <20,20,160,60>
  object Views::Text TimeText
  {
    preset Bounds = <8,240,68,268>;
    preset Alignment = Views::TextAlignment[AlignHorzRight, AlignVertCenter];
    preset String = "10:15";
    preset Font = Fonts::FontNotoSansCjkJp24;
  }

  $rect <20,20,160,60>
  object Views::Text AmPmText
  {
    preset Bounds = <73,240,113,270>;
    preset Alignment = Views::TextAlignment[AlignHorzLeft, AlignVertCenter];
    preset String = "am";
    preset Font = Fonts::FontNotoSansCjkJp20;
  }

  $rect <20,20,160,60>
  object Views::Text RoadText1
  {
    preset Bounds = <77,120,107,150>;
    preset WrapText = false;
    preset Alignment = Views::TextAlignment[AlignHorzLeft, AlignVertCenter];
    preset String = "m";
    preset Font = Fonts::FontNotoSansCjkJp24;
  }
}

$rect <20,80,260,120>
$output false
class NAV06_NaviSettingMenu : Menu::BaseMenuView
{
  $rect <0,300,200,340>
  inherited property Bounds = <0,0,480,272>;

  $rect <250,300,480,340>
  inherited method OnShortHomeKeyActivated()
  {
    Owner.DismissDialog( this, null, null, null, null, null, false );
  }

  $rect <520,110,720,150>
  inherited method LoadItemClass()
  {
    var class ItemClass = null;
    if( aItemNo >= 0 )
    {
      ItemClass = Menu::ItemBase;
    }
    return ItemClass;
  }

  $rect <520,50,720,90>
  inherited method LoadItemTitle()
  {
    var string Title = "";
    switch( NaviSettings[aItemNo] )
    {
      case Enum::NaviSettingItem.StopNavigation: Title = Strings::NAV06_stop_navigation;
      case Enum::NaviSettingItem.SkipNextStop: Title = Strings::NAV06_stop_next_stop;
      case Enum::NaviSettingItem.GoHome: Title = Strings::NAV06_go_home;
      case Enum::NaviSettingItem.GoToWork: Title = Strings::NAV06_go_to_work;
      case Enum::NaviSettingItem.Favorites: Title = Strings::NAV06_favorites;
      case Enum::NaviSettingItem.NearbyGasStations: Title = Strings::NAV06_nearby_gas_stations;
      case Enum::NaviSettingItem.ChangeView: Title = Strings::NAV06_change_view;
      default:;
    }
    return Title;
  }

  $rect <520,230,720,270>
  inherited method OnItemActivate()
  {
    if( null == aMenuItem )
    {
      // empty body to suppress warning
    }

    var Components::BaseComponent Dialog = null;

    switch( NaviSettings[aItemNo] )
    {
      case Enum::NaviSettingItem.StopNavigation:;
      case Enum::NaviSettingItem.SkipNextStop:;
      case Enum::NaviSettingItem.GoHome:;
      case Enum::NaviSettingItem.GoToWork:;
      case Enum::NaviSettingItem.Favorites:;
      case Enum::NaviSettingItem.NearbyGasStations:;
      case Enum::NaviSettingItem.ChangeView: Dialog = new Navigation::NAV08_NaviChageViewMenu;
      default:;
    }

    if( null != Dialog )
    {
      SlideInDialog( Dialog );
    }
  }

  $rect <520,170,720,210>
  inherited method LoadItemEnabled()
  {
    var bool ItemEnabled = true;
    switch( NaviSettings[aItemNo] )
    {
      case Enum::NaviSettingItem.StopNavigation:
      {
        if( !IsDestSet )
        {
          ItemEnabled = false;
        }
      }
      case Enum::NaviSettingItem.SkipNextStop:
      {
        if( !IsDestSet )
        {
          ItemEnabled = false;
        }
        else
        {
          if( !IsWayPointSet )
          {
            ItemEnabled = false;
          }
        }
      }
      case Enum::NaviSettingItem.GoHome:;
      case Enum::NaviSettingItem.GoToWork:;
      case Enum::NaviSettingItem.Favorites:;
      case Enum::NaviSettingItem.NearbyGasStations:;
      case Enum::NaviSettingItem.ChangeView:
      {
        if( !IsDestSet )
        {
          ItemEnabled = false;
        }
      }
      default:;
    }
    return ItemEnabled;
  }

  $rect <20,20,160,60>
  object Menu::VerticalMenu Menu
  {
    preset Bounds = <0,36,480,272>;
    preset NoOfItems = 7;
    preset ArrowScrollBarVisible = true;
  }

  $rect <750,50,950,90>
  array Enum::NaviSettingItem NaviSettings[ 7 ] =
  (
    Default[0] = Enum::NaviSettingItem.StopNavigation;
    Default[1] = Enum::NaviSettingItem.SkipNextStop;
    Default[2] = Enum::NaviSettingItem.GoHome;
    Default[3] = Enum::NaviSettingItem.GoToWork;
    Default[4] = Enum::NaviSettingItem.Favorites;
    Default[5] = Enum::NaviSettingItem.NearbyGasStations;
    Default[6] = Enum::NaviSettingItem.ChangeView;
  );

  $rect <770,310,970,350>
  var bool IsDestSet = true;

  // TODO:
  // 1. Integrate with navi protocol.
  // 2. Replace IsDestSet and IsWayPointSet with variables defined in navigation \
  // device interface after integrating with navi protocol.
  // 3. Send corresponding request when short pressing enter each option after integrating \
  // with navi protocol.
  note group Note5
  {
    attr Bounds = <750,140,1310,420>;
  }

  $rect <770,360,970,400>
  var bool IsWayPointSet = false;
}

$rect <20,140,260,180>
$output false
class NAV08_NaviChageViewMenu : Menu::BaseMenuView
{
  $rect <0,310,200,350>
  inherited property Bounds = <0,0,480,272>;

  $rect <220,310,470,350>
  inherited method OnShortHomeKeyActivated()
  {
    Owner.DismissDialog( this, null, null, null, null, null, false );
  }

  $rect <510,60,710,100>
  inherited method LoadItemClass()
  {
    var class ItemClass = null;
    if( aItemNo >= 0 )
    {
      ItemClass = Menu::ItemCheckMark;
    }
    return ItemClass;
  }

  $rect <510,110,710,150>
  inherited method LoadItemTitle()
  {
    var string title = "";
    if( aItemNo < ItemTitleArray.size )
      {
      title = ItemTitleArray[aItemNo];
      }
    return title;
  }

  $rect <510,160,710,200>
  inherited method OnItemActivate()
  {
    if( null == aMenuItem )
    {
      // empty body to suppress warning
    }

    var int32 i = 0;
    for( i = 0; i < ItemCheckedArray.size; i++ )
    {
      if( i == aItemNo )
      {
        ItemCheckedArray[i] = true;
      }
      else
      {
        ItemCheckedArray[i] = false;
      }
    }

    Menu.InvalidateItems( 0, 2 );
    CheckMarkUpdateTimer.Enabled = true;
    NaviScreenIdx = aItemNo;
  }

  $rect <510,10,710,50>
  inherited method LoadItemChecked()
  {
    var bool IsChecked = false;
    if( aItemNo < ItemCheckedArray.size )
    {
      IsChecked = ItemCheckedArray[aItemNo];
    }
    return IsChecked;
  }

  $rect <20,20,160,60>
  object Menu::VerticalMenu Menu
  {
    preset Bounds = <0,36,480,272>;
    preset NoOfItems = 3;
  }

  $rect <750,10,950,50>
  array string ItemTitleArray[ 3 ] =
  (
    Default[0] = Strings::NAV08_default_view;
    Default[1] = Strings::NAV08_turn_by_turn;
    Default[2] = Strings::NAV08_turn_list;
  );

  $rect <750,60,950,100>
  array bool ItemCheckedArray[ 3 ] =
  (
    Default[0] = true;
    Default[1] = false;
    Default[2] = false;
  );

  $rect <510,240,740,280>
  object Core::Timer CheckMarkUpdateTimer
  {
    preset OnTrigger = OnCheckMarkUpdateSlot;
    preset Period = 450;
  }

  $rect <510,280,740,320>
  slot OnCheckMarkUpdateSlot
  {
    CheckMarkUpdateTimer.Enabled = false;
    var Components::BaseComponent Dialog = null;
    var Application::Application App = ( Application::Application )GetRoot();
    switch( NaviScreenIdx )
    {
      case 0:
      {
        Dialog = new Navigation::Main;
        App.SwitchToHome( Dialog );
      }
      case 1:;
      case 2:;
      default:;
    }
  }

  $rect <750,110,950,150>
  var int32 NaviScreenIdx;

  // TODO:
  // 1. Connect to Turn-by-turn view after Turn-by-turn view UI is created.
  // 2. Connect to Turn list after Turn list UI is created.
  note group Note5
  {
    attr Bounds = <770,210,1270,340>;
  }
}
