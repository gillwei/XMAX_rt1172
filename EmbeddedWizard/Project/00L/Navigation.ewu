$version 11.00

$rect <20,20,260,60>
$output false
class NAV01_DefaultView : Home::BaseHome
{
  $rect <520,670,720,710>
  inherited method Init()
  {
    if( DeviceInterface::NavigationDevice.IsMapFrameReady() )
    {
      if( !Shadow.Visible )
      {
        Shadow.Visible = true;
      }
      postsignal OnMapUpdateSlot;
    }
    SetItemBounds();
    signal OnCurRdUpdateSlot;
    signal OnETAUpdateSlot;
    signal OnDayNightModeUpdateSlot;
    signal OnSpeedLimitUpdateSlot;
    signal OnNaviIncidentUpdateSlot;
  }

  $rect <950,670,1180,710>
  inherited method OnShortDownKeyActivated()
  {
    var Enum::NaviZoomInOutStatusType ZoomInOutStatus = DeviceInterface::NavigationDevice.GetZoomInOutStatus();
    trace "ZoomInOutStatus: ", ZoomInOutStatus;
    trace "IsZoomInOutStatusReceived: ", DeviceInterface::NavigationDevice.IsZoomInOutStatusReceived;

    if( ZoomOutButton.Visible &&
        DeviceInterface::NavigationDevice.IsZoomInOutStatusReceived &&
        Enum::NaviZoomInOutStatusType.REACH_MAXIMUM != ZoomInOutStatus )
    {
      DeviceInterface::NavigationDevice.IsZoomInOutStatusReceived = false;
      ZoomButtonStatus = 1;
      StartHighlight();
      DeviceInterface::NavigationDevice.ZoomOutRequest();
    }
  }

  $rect <720,670,950,710>
  inherited method OnShortUpKeyActivated()
  {
    var Enum::NaviZoomInOutStatusType ZoomInOutStatus = DeviceInterface::NavigationDevice.GetZoomInOutStatus();
    trace "ZoomInOutStatus: ", ZoomInOutStatus;
    trace "IsZoomInOutStatusReceived: ", DeviceInterface::NavigationDevice.IsZoomInOutStatusReceived;

    if( ZoomInButton.Visible &&
        DeviceInterface::NavigationDevice.IsZoomInOutStatusReceived &&
        Enum::NaviZoomInOutStatusType.REACH_MINIMUM != ZoomInOutStatus )
    {
      DeviceInterface::NavigationDevice.IsZoomInOutStatusReceived = false;
      ZoomButtonStatus = 0;
      StartHighlight();
      DeviceInterface::NavigationDevice.ZoomInRequest();
    }
  }

  $rect <720,710,940,750>
  inherited method OnLongEnterKeyActivated()
  {
    if( Components::ACTIVATE_LONG_PRESS_REPETITION_COUNT == KeyHandler.RepetitionCount )
    {
      if( !DeviceInterface::NavigationDevice.GetNaviConnectStatus() )
      {
        PresentDialog( new Pop::POP09_POP14_BleConnectionErrorUI, null, null, null, null, null, null, null, null, false );
      }
      else if( !DeviceInterface::NavigationDevice.GetNaviAppInitSettingStatus() )
      {
        PresentDialog( new Pop::POP17_AppInitSettingError, null, null, null, null, null, null, null, null, false );
      }
      else
      {
        // Leave navigation home screen so that stop map frame request.
        DeviceInterface::NavigationDevice.StopMapFrameRequest();
        PresentDialog( new Navigation::NAV06_NaviSettingMenu, null, null, null, null, null, null, null, null, false );
      }
    }
  }

  $rect <730,50,930,90>
  inherited var HomeType = Enum::HomeType.NAVI_DEFAULT_VIEW;

  $rect <20,20,160,60>
  object Views::Rectangle Background
  {
    preset Bounds = <0,38,480,272>;
    preset Color = #000000FF;
  }

  $rect <520,50,720,90>
  var int32 MapFrameIdx = 0;

  $rect <520,190,750,230>
  object Core::SystemEventHandler MapUpdateEventHandler
  {
    preset OnEvent = OnMapUpdateSlot;
    preset Event = DeviceInterface::NavigationDevice.MapUpdateEvent;
  }

  // This slot method is executed when the associated system event handler 'SystemEventHandler' \
  // receives an event.
  $rect <750,190,990,230>
  slot OnMapUpdateSlot
  {
    if( !Shadow.Visible )
    {
      Shadow.Visible = true;
    }

    MapFrameIdx = MapFrameIdx + 1;
    Resource::ExternBitmap.Name = "Map" + string( MapFrameIdx );
  }

  $rect <20,20,160,60>
  object Views::Image MapImage
  {
    preset Bounds = <0,0,480,272>;
    preset Alignment = Views::ImageAlignment[AlignHorzRight, AlignVertBottom];
    preset Bitmap = Resource::ExternBitmap;
  }

  $rect <20,20,160,60>
  object Views::Rectangle ArrivalBg
  {
    preset Bounds = <0,226,130,272>;
    preset Color = #161F3CFF;
    preset Visible = true;
  }

  $rect <20,20,160,60>
  object Navigation::NaviETA ETAComponent
  {
    preset Bounds = <10,228,120,259>;
    preset Visible = true;
  }

  $rect <20,20,160,60>
  object Views::Rectangle RoadNameBg
  {
    preset Bounds = <130,226,480,272>;
    preset Color = #020305E6;
  }

  $rect <20,20,160,60>
  object Navigation::NaviCurrentRoad CurrentRoadWithGuide
  {
    preset Bounds = Navigation::CURRENT_ROAD_W_NAVI_BOUNDS;
    preset Visible = false;
    preset RoadNameTextBounds = Navigation::ROADNAME_W_NAVI_BOUNDS;
  }

  $rect <20,20,160,60>
  object Navigation::NaviCurrentRoad CurrentRoadWithOutGuide
  {
    preset Bounds = Navigation::CURRENT_ROAD_WO_NAVI_BOUNDS;
    preset Visible = true;
    preset RoadNameTextBounds = Navigation::ROADNAME_WO_NAVI_BOUNDS;
  }

  $rect <20,20,160,60>
  object Views::Image Shadow
  {
    preset Bounds = <130,224,480,226>;
    preset Bitmap = Resource::NaviShadowLine;
    preset Visible = false;
  }

  $rect <20,20,160,60>
  object Views::Image ZoomInButton
  {
    preset Bounds = <9,122,49,162>;
    preset Bitmap = Resource::ZoomInDayIcon;
    preset Visible = true;
  }

  $rect <20,20,160,60>
  object Views::Image ZoomOutButton
  {
    preset Bounds = <9,170,49,210>;
    preset Bitmap = Resource::ZoomOutDayIcon;
    preset Visible = true;
  }

  $rect <20,20,160,60>
  object Views::Image SpeedLimitIcon
  {
    preset Bounds = <411,164,473,226>;
    preset Bitmap = Resource::SpeedLimitIcon;
    preset Visible = false;
  }

  $rect <20,20,160,60>
  object Views::Text SpeedLimitText
  {
    preset Bounds = <420,179,464,212>;
    preset String = "";
    preset Font = Fonts::NotoSansBold24pt;
    preset Color = #000000FF;
    preset Visible = false;
  }

  $rect <520,310,740,350>
  object Core::SystemEventHandler CurRdUpdateEventHandler
  {
    preset OnEvent = OnCurRdUpdateSlot;
    preset Event = DeviceInterface::NavigationDevice.CurRdUpdateEvent;
  }

  // This slot method is executed when the associated system event handler 'SystemEventHandler' \
  // receives an event.
  $rect <750,310,980,350>
  slot OnCurRdUpdateSlot
  {
    var DeviceInterface::NaviDataClass NaviData = DeviceInterface::NavigationDevice.GetNaviData( Enum::NaviDataType.CURRENT_ROAD );
    CurrentRoadWithGuide.RoadName = NaviData.CurrentRoad;
    CurrentRoadWithGuide.SetItemBounds( false );
    CurrentRoadWithOutGuide.RoadName = NaviData.CurrentRoad;
    CurrentRoadWithOutGuide.SetItemBounds( false );

  }

  $rect <520,230,740,270>
  object Core::SystemEventHandler ETAUpdateEventHandler
  {
    preset OnEvent = OnETAUpdateSlot;
    preset Event = DeviceInterface::NavigationDevice.ETAUpdateEvent;
  }

  // This slot method is executed when the associated system event handler 'SystemEventHandler' \
  // receives an event.
  $rect <750,230,980,270>
  slot OnETAUpdateSlot
  {
    var DeviceInterface::NaviDataClass NaviData = DeviceInterface::NavigationDevice.GetNaviData( Enum::NaviDataType.ETA );
    ETAComponent.ETA = NaviData.ETA;
  }

  $rect <520,270,740,310>
  object Core::SystemEventHandler DayNightModeUpdateEventHandler
  {
    preset OnEvent = OnDayNightModeUpdateSlot;
    preset Event = DeviceInterface::NavigationDevice.DayNightModeUpdateEvent;
  }

  // This slot method is executed when the associated system event handler 'SystemEventHandler' \
  // receives an event.
  $rect <750,270,970,310>
  slot OnDayNightModeUpdateSlot
  {
    var DeviceInterface::NaviDataClass NaviData = DeviceInterface::NavigationDevice.GetNaviData( Enum::NaviDataType.DAYNIGHT );
    if( Navigation::DAY_MODE == NaviData.DayNightMode )
    {
      ZoomInButton.Bitmap = Resource::ZoomInDayIcon;
      ZoomOutButton.Bitmap = Resource::ZoomOutDayIcon;
    }
    else if( Navigation::NIGHT_MODE == NaviData.DayNightMode )
    {
      ZoomInButton.Bitmap = Resource::ZoomInNightIcon;
      ZoomOutButton.Bitmap = Resource::ZoomOutNightIcon;
    }
    else
    {
      // empty.
    }
  }

  $rect <720,760,920,800>
  method void StartHighlight()
  {
    var DeviceInterface::NaviDataClass NaviData = DeviceInterface::NavigationDevice.GetNaviData( Enum::NaviDataType.DAYNIGHT );
    if( !ZoomButtonStatus )
    {
      if( Navigation::NIGHT_MODE == NaviData.DayNightMode )
      {
        ZoomInButton.Bitmap = Resource::ZoomInNightFocusIcon;
      }
      else if( Navigation::DAY_MODE == NaviData.DayNightMode )
      {
        ZoomInButton.Bitmap = Resource::ZoomInDayFocusIcon;
      }
      else
      {
        // empty.
      }
    }
    else
    {
      if( Navigation::NIGHT_MODE == NaviData.DayNightMode )
      {
        ZoomOutButton.Bitmap = Resource::ZoomOutNightFocusIcon;
      }
      else if( Navigation::DAY_MODE == NaviData.DayNightMode )
      {
        ZoomOutButton.Bitmap = Resource::ZoomOutDayFocusIcon;
      }
      else
      {
        // empty.
      }
    }
    HighlightTimer.Enabled = true;
  }

  $rect <520,760,710,800>
  object Core::Timer HighlightTimer
  {
    preset OnTrigger = OnHighlightEndSlot;
    preset Period = 100;
    preset Enabled = false;
  }

  $rect <930,760,1130,800>
  slot OnHighlightEndSlot
  {
    HighlightTimer.Enabled = false;
    var DeviceInterface::NaviDataClass NaviData = DeviceInterface::NavigationDevice.GetNaviData( Enum::NaviDataType.DAYNIGHT );
    if( !ZoomButtonStatus )
    {
      if( Navigation::NIGHT_MODE == NaviData.DayNightMode )
      {
        ZoomInButton.Bitmap = Resource::ZoomInNightIcon;
      }
      else if( Navigation::DAY_MODE == NaviData.DayNightMode )
      {
        ZoomInButton.Bitmap = Resource::ZoomInDayIcon;
      }
      else
      {
        // empty.
      }
    }
    else
    {
      if( Navigation::NIGHT_MODE == NaviData.DayNightMode )
      {
        ZoomOutButton.Bitmap = Resource::ZoomOutNightIcon;
      }
      else if( Navigation::DAY_MODE == NaviData.DayNightMode )
      {
        ZoomOutButton.Bitmap = Resource::ZoomOutDayIcon;
      }
      else
      {
        // empty.
      }
    }
  }

  $rect <940,50,1140,90>
  var int32 ZoomButtonStatus;

  $rect <520,350,730,390>
  object Core::SystemEventHandler SpeedLimitUpdateEventHandler
  {
    preset OnEvent = OnSpeedLimitUpdateSlot;
    preset Event = DeviceInterface::NavigationDevice.SpeedLimitUpdateEvent;
  }

  // This slot method is executed when the associated system event handler 'SystemEventHandler' \
  // receives an event.
  $rect <750,350,980,390>
  slot OnSpeedLimitUpdateSlot
  {
    var DeviceInterface::NaviDataClass NaviData = DeviceInterface::NavigationDevice.GetNaviData( Enum::NaviDataType.SPEED_LIMIT );

    if( NaviData.SpeedLimit > 0 )
    {
      SpeedLimitIcon.Visible = true;
      SpeedLimitText.String = string( NaviData.SpeedLimit );
      SpeedLimitText.Visible = true;

      var DeviceInterface::VehicleDataClass VehicleData = DeviceInterface::VehicleDevice.GetData( Enum::VehicleRxType.VEHICLE_SPEED_REAL );

      if( ( int32 )VehicleData.DataUInt32 > NaviData.SpeedLimit )
      {
        SpeedLimitFlickeringTimer.Enabled = true;
      }
      else
      {
        SpeedLimitFlickeringTimer.Enabled = false;
      }
    }
    else
    {
      SpeedLimitIcon.Visible = false;
      SpeedLimitText.Visible = false;
      SpeedLimitFlickeringTimer.Enabled = false;
    }
  }

  $rect <520,390,730,430>
  object Core::SystemEventHandler NaviIncidentUpdateEventHandler
  {
    preset OnEvent = OnNaviIncidentUpdateSlot;
    preset Event = DeviceInterface::NavigationDevice.NaviIncidentUpdateEvent;
  }

  // This slot method is executed when the associated system event handler 'SystemEventHandler' \
  // receives an event.
  $rect <750,390,990,430>
  slot OnNaviIncidentUpdateSlot
  {
    if( !IsEventDisplaying )
    {
      IsEventDisplaying = true;
      // If event is not displaying and receive event update, get event.
      var DeviceInterface::NaviDataClass NaviData = DeviceInterface::NavigationDevice.GetNaviData( Enum::NaviDataType.NAVI_EVENT );
      if( null != NaviData && NaviData.NaviEventVisibility )
      {
        NaviEventObject.SetAlert( NaviData.NaviEventType, NaviData.NaviCameraType, NaviData.NaviEventSpeed, NaviData.NaviEventDist );
        NaviEventEnLargeEffect.Enabled = true;
      }
      else
      {
        IsEventDisplaying = false;
      }
    }
  }

  $rect <1050,390,1250,430>
  object Effects::RectEffect CurrentRoadShiftEffect
  {
    preset OnFinished = OnCurrentRoadShiftEffectFinishSlot;
    preset NoOfCycles = 1;
    preset CycleDuration = 500;
    preset Value2;
    preset Value1;
    preset Outlet = ^CurrentRoadWithGuide.Bounds;
  }

  $rect <1050,430,1250,470>
  slot OnCurrentRoadShiftEffectFinishSlot
  {
    CurrentRoadWithGuide.Bounds = Navigation::CURRENT_ROAD_W_NAVI_BOUNDS;
    CurrentRoadWithGuide.UpdateItemBounds( Enum::NaviAlertAnimationType.Dismiss, CurrentRoadWithGuide.Bounds.w );
    CurrentRoadShiftEffect.Enabled = false;
  }

  $rect <20,20,160,60>
  object Navigation::NaviAlert NaviEventObject
  {
    preset Bounds = <480,226,480,272>;
    preset DismissAlertSignal = DismissAlert;
  }

  $rect <20,20,160,60>
  object Views::Wallpaper StatusBarShadowImage
  {
    preset Bounds = <0,38,480,49>;
    preset Bitmap = Resource::StatusBarShadow;
  }

  $rect <1050,230,1250,270>
  object Effects::RectEffect NaviEventEnLargeEffect
  {
    preset OnFinished = OnNaviEventEnlargeFinishSlot;
    preset NoOfCycles = 1;
    preset CycleDuration = 500;
    preset Value2 = <0,226,480,272>;
    preset Value1 = <480,226,480,272>;
    preset Outlet = ^NaviEventObject.Bounds;
  }

  $rect <1050,270,1250,310>
  slot OnNaviEventEnlargeFinishSlot
  {
    NaviEventEnLargeEffect.Enabled = false;

    // According to GUI spec, the current road area is loacted to a new position after shrinking the alert.
    // In this case, all items in current road object needs to be updated before shrinking the alert.
    CurrentRoadWithGuide.Bounds = Navigation::CURRENT_ROAD_SHRINK_ALERT;
    CurrentRoadWithGuide.UpdateItemBounds( Enum::NaviAlertAnimationType.Shrink, CurrentRoadWithGuide.Bounds.w );

    NaviEventObject.ShrinkAlert();


  }

  $rect <1050,310,1250,350>
  object Effects::RectEffect NaviEventDismissEffect
  {
    preset OnFinished = OnNaviEventDismissFinishSlot;
    preset NoOfCycles = 1;
    preset CycleDuration = 500;
    preset Value2 = <480,226,480,272>;
    preset Value1 = <370,226,480,272>;
    preset Outlet = ^NaviEventObject.Bounds;
  }

  $rect <1050,350,1250,390>
  slot OnNaviEventDismissFinishSlot
  {
    NaviEventDismissEffect.Enabled = false;
    // Reset Alert message bounds for next alert.
    NaviEventObject.AlertMessage.Bounds = Navigation::ALERT_MESSAGE_BOUNDS;
    IsEventDisplaying = false;
  }

  $rect <1050,190,1250,230>
  slot DismissAlert
  {
    // Need to adjust the position of CurrentRoadShiftEffect dynamically since the origin position of CurrentRoadObject content could be varied.
    CurrentRoadShiftEffect.Value1 = CurrentRoadWithGuide.Bounds;

    var rect NewCurrentRoadObjectBounds;
    NewCurrentRoadObjectBounds.x1 = CurrentRoadWithGuide.NaviIconX1Pos + ArrivalBg.Bounds.w;
    NewCurrentRoadObjectBounds.x2 = NewCurrentRoadObjectBounds.x1 + CurrentRoadWithGuide.Bounds.w;
    NewCurrentRoadObjectBounds.y1 = CurrentRoadWithGuide.Bounds.y1;
    NewCurrentRoadObjectBounds.y2 = CurrentRoadWithGuide.Bounds.y2;

    // No need to do animation when the calculated x1 coordinate is less than the x1 coordinate of CurrentRoadObject.
    if( NewCurrentRoadObjectBounds.x1 > CurrentRoadShiftEffect.Value1.x1 )
    {
      CurrentRoadShiftEffect.Value2 = NewCurrentRoadObjectBounds;
      CurrentRoadShiftEffect.Enabled = true;
    }
    else
    {
      // Reset the items of CurrentRoadObject to origin position.
      CurrentRoadShiftEffect.Enabled = false;
      CurrentRoadWithGuide.Bounds = <140,228,470,259>;
      CurrentRoadWithGuide.UpdateItemBounds( Enum::NaviAlertAnimationType.Dismiss, CurrentRoadWithGuide.Bounds.w );
    }

    NaviEventDismissEffect.Enabled = true;
  }

  // TODO:
  // 1. Integrate with navi protocol.
  // 2. Handle the route calculation failed case.
  // 3. Elaborate alert animation logic if possible.
  note group Note5
  {
    attr Bounds = <0,300,480,460>;
  }

  $rect <520,430,730,470>
  object Core::SystemEventHandler NavigatingStatusUpdateEventHandler
  {
    preset OnEvent = OnNavigatingStatusUpdateSlot;
    preset Event = DeviceInterface::NavigationDevice.NavigatingStatusUpdateEvent;
  }

  // This slot method is executed when the associated system event handler 'SystemEventHandler' \
  // receives an event.
  $rect <750,430,990,470>
  slot OnNavigatingStatusUpdateSlot
  {
    // TODO: Handle the route calculation failed case.
    SetItemBounds();
    signal OnCurRdUpdateSlot;
    signal OnETAUpdateSlot;
  }

  $rect <520,820,710,860>
  object Core::Timer SpeedLimitFlickeringTimer
  {
    preset OnTrigger = OnSpeedLimitFlickeringSlot;
    preset Period = 300;
  }

  $rect <720,820,920,860>
  slot OnSpeedLimitFlickeringSlot
  {
    SpeedLimitIcon.Visible = !SpeedLimitIcon.Visible;
    SpeedLimitText.Visible = !SpeedLimitText.Visible;
  }

  // Variable
  note group Note6
  {
    attr Bounds = <500,0,1380,140>;
  }

  // System Event
  note group Note7
  {
    attr Bounds = <500,150,1020,590>;
  }

  // Rider Alert Animation
  note group Note8
  {
    attr Bounds = <1030,150,1380,530>;
  }

  // Method
  note group Note9
  {
    attr Bounds = <500,620,1380,890>;
  }

  $rect <520,480,720,520>
  object Core::SystemEventHandler VehicleDataReceivedEventHandler
  {
    preset OnEvent = OnVehicleSpeedUpdateSlot;
    preset Event = DeviceInterface::VehicleDevice.VehicleDataReceivedSystemEvent;
  }

  // This slot method is executed when the associated system event handler 'SystemEventHandler' \
  // receives an event.
  $rect <740,480,980,520>
  slot OnVehicleSpeedUpdateSlot
  {
    var DeviceInterface::VehicleDataClass VehicleData = ( DeviceInterface::VehicleDataClass )VehicleDataReceivedEventHandler.Context;
    if( null != VehicleData &&
        Enum::VehicleRxType.VEHICLE_SPEED_REAL == VehicleData.RxType )
    {
      signal OnSpeedLimitUpdateSlot;
    }
  }

  $rect <1140,820,1340,860>
  method void SetItemBounds()
  {
    if( DeviceInterface::NavigationDevice.IsRouteGuidanceStarted() )
    {
      ZoomInButton.Bounds = Navigation::ZOOMIN_W_NAVI_BOUNDS;
      ZoomOutButton.Bounds = Navigation::ZOOMOUT_W_NAVI_BOUNDS;
      RoadNameBg.Bounds = Navigation::ROAD_BG_W_NAVI_BOUNDS;
      CurrentRoadWithGuide.Visible = true;
      ETAComponent.Visible = true;
      ArrivalBg.Visible = true;
      CurrentRoadWithOutGuide.Visible = false;
    }
    else
    {
      ZoomInButton.Bounds = Navigation::ZOOMIN_WO_NAVI_BOUNDS;
      ZoomOutButton.Bounds = Navigation::ZOOMOUT_WO_NAVI_BOUNDS;
      RoadNameBg.Bounds = Navigation::ROAD_BG_WO_NAVI_BOUNDS;
      CurrentRoadWithGuide.Visible = false;
      ETAComponent.Visible = false;
      ArrivalBg.Visible = false;
      CurrentRoadWithOutGuide.Visible = true;
    }
  }

  $rect <1150,50,1350,90>
  var bool IsEventDisplaying = false;

  $rect <520,530,720,570>
  object Core::SystemEventHandler NaviDialogEventHandler
  {
    preset OnEvent = OnNaviDialogEventUpdateSlot;
    preset Event = DeviceInterface::NavigationDevice.DialogEventUpdateEvent;
  }

  // This slot method is executed when the associated system event handler 'SystemEventHandler' \
  // receives an event.
  $rect <750,530,950,570>
  slot OnNaviDialogEventUpdateSlot
  {
    var Enum::NaviDialogType NaviDialog = DeviceInterface::NavigationDevice.GetNaviDialogType();
    var string NaviDialogMessage = DeviceInterface::NavigationDevice.GetNaviDialogMessage();
    switch( NaviDialog )
    {
      case Enum::NaviDialogType.DIALOG_YES_NO:
      {
        var Navigation::NaviDialog Dialog = new Navigation::NaviDialog;
        Dialog.DialogType = Enum::NaviDialogType.DIALOG_YES_NO;
        Dialog.DialogButton = Menu::UpDownPushButtonSet;
        Dialog.DialogMessage = NaviDialogMessage;
        Dialog.OnDialogDismiss = OnNaviDialogDismissSlot;
        PresentDialog( Dialog, null, null, null, null, null, null, null, null, false );
        Dialog.CountDownTimer.Enabled = true;
        Mask.Visible = true;
      }
      case Enum::NaviDialogType.DIALOG_OK:
      {
        var Navigation::NaviDialog Dialog = new Navigation::NaviDialog;
        Dialog.DialogType = Enum::NaviDialogType.DIALOG_OK;
        Dialog.DialogButton = Menu::PushButton;
        Dialog.DialogMessage = NaviDialogMessage;
        Dialog.OnDialogDismiss = OnNaviDialogDismissSlot;
        PresentDialog( Dialog, null, null, null, null, null, null, null, null, false );
        Mask.Visible = true;
      }
      default:;
    }
  }

  $rect <20,20,160,60>
  object Views::Rectangle Mask
  {
    preset Bounds = <0,0,480,272>;
    preset Color = #00000080;
    preset Visible = false;
  }

  $rect <930,820,1130,860>
  slot OnNaviDialogDismissSlot
  {
    Mask.Visible = false;

  }
}

$rect <20,80,260,120>
$output false
class NAV06_NaviSettingMenu : Menu::BaseMenuView
{
  $rect <10,360,210,400>
  inherited method Init()
  {
    SetNaviSettingMenuItem();
  }

  $rect <0,300,200,340>
  inherited property Bounds = <0,0,480,272>;

  $rect <250,300,480,340>
  inherited method OnShortHomeKeyActivated()
  {
    Owner.DismissDialog( this, null, null, null, null, null, false );
  }

  $rect <520,110,720,150>
  inherited method LoadItemClass()
  {
    var class ItemClass = null;
    if( aItemNo >= 0 )
    {
      ItemClass = Menu::ItemBase;
    }
    return ItemClass;
  }

  $rect <520,50,720,90>
  inherited method LoadItemTitle()
  {
    var string Title = "";
    switch( NaviSettings[aItemNo] )
    {
      case Enum::NaviSettingItem.StopNavigation: Title = Strings::NAV06_STOP_NAVIGATION;
      case Enum::NaviSettingItem.SkipNextStop: Title = Strings::NAV06_SKIP_NEXT_STOP;
      case Enum::NaviSettingItem.GoHome: Title = Strings::NAV06_GO_HOME;
      case Enum::NaviSettingItem.GoToWork: Title = Strings::NAV06_GO_TO_WORK;
      case Enum::NaviSettingItem.Favorites: Title = Strings::NAV06_FAVORITES;
      case Enum::NaviSettingItem.NearbyGasStations: Title = Strings::NAV06_NEARBY_GAS_STATIONS;
      case Enum::NaviSettingItem.ChangeView: Title = Strings::NAV06_CHANGE_VIEW;
      default:;
    }
    return Title;
  }

  $rect <520,230,720,270>
  inherited method OnItemActivate()
  {
    aMenuItem;
    var Menu::BaseMenuView MenuDialog = null;

    switch( NaviSettings[aItemNo] )
    {
      case Enum::NaviSettingItem.StopNavigation:
      {
        SelectedItem = Enum::NaviSettingItem.StopNavigation;
        DeviceInterface::NavigationDevice.StopRoute();
      }
      case Enum::NaviSettingItem.SkipNextStop:
      {
        SelectedItem = Enum::NaviSettingItem.SkipNextStop;
        DeviceInterface::NavigationDevice.SkipNextStop();
      }
      case Enum::NaviSettingItem.GoHome:
      {
        SelectedItem = Enum::NaviSettingItem.GoHome;
        DeviceInterface::NavigationDevice.GoHome();
      }
      case Enum::NaviSettingItem.GoToWork:
      {
        SelectedItem = Enum::NaviSettingItem.GoToWork;
        DeviceInterface::NavigationDevice.GoOffice();
      }
      case Enum::NaviSettingItem.Favorites:;
      case Enum::NaviSettingItem.NearbyGasStations:;
      case Enum::NaviSettingItem.ChangeView: MenuDialog = new Navigation::NAV08_NaviChageViewMenu;
      default:;
    }

    if( null != MenuDialog )
    {
      SlideInDialog( MenuDialog );
    }
  }

  $rect <520,170,720,210>
  inherited method LoadItemEnabled()
  {
    var bool ItemEnabled = true;
    switch( NaviSettings[aItemNo] )
    {
      case Enum::NaviSettingItem.StopNavigation:;
      case Enum::NaviSettingItem.SkipNextStop:;
      case Enum::NaviSettingItem.GoHome:;
      case Enum::NaviSettingItem.GoToWork:;
      case Enum::NaviSettingItem.Favorites:;
      case Enum::NaviSettingItem.NearbyGasStations:;
      case Enum::NaviSettingItem.ChangeView:
      {
        if( !DeviceInterface::NavigationDevice.IsRouteGuidanceStarted() )
        {
          ItemEnabled = false;
        }
      }
      default:;
    }
    return ItemEnabled;
  }

  $rect <20,20,160,60>
  inherited object Menu
  {
    preset NoOfItems = 7;
    preset ArrowScrollBarVisible = true;
  }

  $rect <750,50,950,90>
  array Enum::NaviSettingItem NaviSettings[ 7 ] =
  (
    Default[0] = Enum::NaviSettingItem.StopNavigation;
    Default[1] = Enum::NaviSettingItem.SkipNextStop;
    Default[2] = Enum::NaviSettingItem.GoHome;
    Default[3] = Enum::NaviSettingItem.GoToWork;
    Default[4] = Enum::NaviSettingItem.Favorites;
    Default[5] = Enum::NaviSettingItem.NearbyGasStations;
    Default[6] = Enum::NaviSettingItem.ChangeView;
  );

  $rect <730,130,930,170>
  object Core::SystemEventHandler HomeSettingUpdateSystemEventHandler
  {
    preset OnEvent = OnHomeSettingUpdateSlot;
    preset Event = DeviceInterface::NavigationDevice.HomeSettingUpdateEvent;
  }

  // This slot method is executed when the associated system event handler 'SystemEventHandler' \
  // receives an event.
  $rect <930,130,1130,170>
  slot OnHomeSettingUpdateSlot
  {
    var DeviceInterface::NaviDataClass NaviData = DeviceInterface::NavigationDevice.GetNaviData( Enum::NaviDataType.HOME );

    if( null != NaviData )
    {
      if( NaviData.IsHomeSet &&
          SelectedItem == Enum::NaviSettingItem.GoHome )
      {
        SelectedItem = Enum::NaviSettingItem.TOTAL;
        var Application::Application App = ( Application::Application )GetRoot();
        if( null != App )
        {
          DeviceInterface::NavigationDevice.CurrentHome = Enum::HomeType.NAVI_DEFAULT_VIEW;
          App.SwitchToHome( DeviceInterface::NavigationDevice.CurrentHome );
        }
      }
      else
      {
        var Pop::POP03_HomeOfficeSettingError HomeSettingError = new Pop::POP03_HomeOfficeSettingError;
        HomeSettingError.ErrorMessage = Strings::POP03_NO_HOME_LOCATION;
        PresentDialog( HomeSettingError, null, null, null, null, null, null, null, null, false );
      }
    }
    else
    {
      trace "HomeSetting navi data error";
    }
  }

  $rect <740,190,940,230>
  object Core::SystemEventHandler OfficeSettingUpdateEventHandler
  {
    preset OnEvent = OnOfficeSettingUpdateSlot;
    preset Event = DeviceInterface::NavigationDevice.OfficeSettingUpdateEvent;
  }

  // This slot method is executed when the associated system event handler 'SystemEventHandler' \
  // receives an event.
  $rect <940,190,1140,230>
  slot OnOfficeSettingUpdateSlot
  {
    var DeviceInterface::NaviDataClass NaviData = DeviceInterface::NavigationDevice.GetNaviData( Enum::NaviDataType.OFFICE );

    if( null != NaviData )
    {
      if( NaviData.IsOfficeSet &&
          SelectedItem == Enum::NaviSettingItem.GoToWork )
      {
        SelectedItem = Enum::NaviSettingItem.TOTAL;
        var Application::Application App = ( Application::Application )GetRoot();
        if( null != App )
        {
          DeviceInterface::NavigationDevice.CurrentHome = Enum::HomeType.NAVI_DEFAULT_VIEW;
          App.SwitchToHome( DeviceInterface::NavigationDevice.CurrentHome );
        }
      }
      else
      {
        var Pop::POP03_HomeOfficeSettingError OfficeSettingError = new Pop::POP03_HomeOfficeSettingError;
        OfficeSettingError.ErrorMessage = Strings::POP03_NO_OFFICE_LOCATION;
        PresentDialog( OfficeSettingError, null, null, null, null, null, null, null, null, false );
      }
    }
    else
    {
      trace "OfficeSetting navi data error";
    }
  }

  $rect <740,250,950,290>
  object Core::SystemEventHandler NavigatingStatusUpdateEventHandler
  {
    preset OnEvent = OnNavigatingStatusUpdateSlot;
    preset Event = DeviceInterface::NavigationDevice.NavigatingStatusUpdateEvent;
  }

  // This slot method is executed when the associated system event handler 'SystemEventHandler' \
  // receives an event.
  $rect <970,250,1130,290>
  slot OnNavigatingStatusUpdateSlot
  {
    if( !DeviceInterface::NavigationDevice.IsRouteGuidanceStarted() &&
        SelectedItem == Enum::NaviSettingItem.StopNavigation )
    {
      SelectedItem = Enum::NaviSettingItem.TOTAL;
      var Application::Application App = ( Application::Application )GetRoot();
      if( null != App )
      {
        DeviceInterface::NavigationDevice.CurrentHome = Enum::HomeType.NAVI_DEFAULT_VIEW;
        App.SwitchToHome( DeviceInterface::NavigationDevice.CurrentHome );
      }
    }
    else
    {
      SetNaviSettingMenuItem();
      Menu.InvalidateItems( 0, Menu.NoOfItems-1 );
    }
  }

  $rect <710,300,910,340>
  object Core::SystemEventHandler ViaPointUpdateEventHandler
  {
    preset OnEvent = OnViaPointUpdateSlot;
    preset Event = DeviceInterface::NavigationDevice.ViaPointUpdateEvent;
  }

  // This slot method is executed when the associated system event handler 'SystemEventHandler' \
  // receives an event.
  $rect <910,300,1110,340>
  slot OnViaPointUpdateSlot
  {
    if( SelectedItem == Enum::NaviSettingItem.SkipNextStop )
    {
      SelectedItem = Enum::NaviSettingItem.TOTAL;
      var Application::Application App = ( Application::Application )GetRoot();
      if( null != App )
      {
        App.SwitchToHome( DeviceInterface::NavigationDevice.CurrentHome );
      }
    }
    else
    {
      SetNaviSettingMenuItem();
      Menu.InvalidateItems( 0, Menu.NoOfItems-1 );
    }
  }

  $rect <10,420,210,460>
  var Enum::NaviSettingItem SelectedItem = Enum::NaviSettingItem.TOTAL;

  $rect <247,366,447,406>
  method void SetNaviSettingMenuItem()
  {
    var int32 i;
    var int32 NoOfItems = 0;
    var Enum::NaviSettingItem NaviSettingItem;

    for( i = 0; i < (int32)Enum::NaviSettingItem.TOTAL; i++ )
    {
      NaviSettingItem = (Enum::NaviSettingItem)i;
      switch( NaviSettingItem )
      {
        case Enum::NaviSettingItem.StopNavigation:
        {
          if( DeviceInterface::NavigationDevice.IsRouteGuidanceStarted() )
          {
            NaviSettings[NoOfItems] = NaviSettingItem;
            NoOfItems++;
          }
        }
        case Enum::NaviSettingItem.SkipNextStop:
        {
          var DeviceInterface::NaviDataClass NaviData = DeviceInterface::NavigationDevice.GetNaviData( Enum::NaviDataType.VIA_POINT );
          if( null != NaviData )
          {
            if( DeviceInterface::NavigationDevice.IsRouteGuidanceStarted() &&
                NaviData.ViaPoints > 0 )
            {
              NaviSettings[NoOfItems] = NaviSettingItem;
              NoOfItems++;
            }
          }
          else
          {
            trace "SkipNextStop: navi data error";
          }
        }
        default:
        {
          NaviSettings[NoOfItems] = NaviSettingItem;
          NoOfItems++;
        }
      }
    }

    Menu.NoOfItems = NoOfItems;
  }
}

$rect <20,140,260,180>
$output false
class NAV08_NaviChageViewMenu : Menu::BaseMenuView
{
  $rect <0,310,200,350>
  inherited property Bounds = <0,0,480,272>;

  $rect <0,360,200,400>
  inherited var SlideOutEffectEnabled = true;

  $rect <510,60,710,100>
  inherited method LoadItemClass()
  {
    var class ItemClass = null;
    if( aItemNo >= 0 )
    {
      ItemClass = Menu::ItemCheckMark;
    }
    return ItemClass;
  }

  $rect <510,110,710,150>
  inherited method LoadItemTitle()
  {
    var string title = "";
    if( aItemNo < ItemTitleArray.size )
      {
      title = ItemTitleArray[aItemNo];
      }
    return title;
  }

  $rect <510,160,710,200>
  inherited method OnItemActivate()
  {
    if( null == aMenuItem )
    {
      // empty body to suppress warning
    }

    NaviScreenIdx = aItemNo;
    switch( aItemNo )
    {
      case 0: DeviceInterface::NavigationDevice.CurrentHome = Enum::HomeType.NAVI_DEFAULT_VIEW;
      case 1: DeviceInterface::NavigationDevice.CurrentHome = Enum::HomeType.NAVI_NEXT_TURN;
      case 2: DeviceInterface::NavigationDevice.CurrentHome = Enum::HomeType.NAVI_TURN_BY_TURN;
      default:;
    }

    Menu.InvalidateItems( 0, ItemTitleArray.size - 1 );
    CheckMarkUpdateTimer.Enabled = true;
  }

  $rect <510,10,710,50>
  inherited method LoadItemChecked()
  {
    var bool IsChecked = false;
    switch( aItemNo )
    {
      case 0:
      {
        if( Enum::HomeType.NAVI_DEFAULT_VIEW == DeviceInterface::NavigationDevice.CurrentHome )
        {
          IsChecked = true;
        }
      }
      case 1:
      {
        if( Enum::HomeType.NAVI_NEXT_TURN == DeviceInterface::NavigationDevice.CurrentHome )
        {
          IsChecked = true;
        }
      }
      case 2:
      {
        if( Enum::HomeType.NAVI_TURN_BY_TURN == DeviceInterface::NavigationDevice.CurrentHome )
        {
          IsChecked = true;
        }
      }
      default:;
    }
    return IsChecked;
  }

  $rect <20,20,160,60>
  inherited object Menu
  {
    preset NoOfItems = 3;
  }

  $rect <750,10,950,50>
  array string ItemTitleArray[ 3 ] =
  (
    Default[0] = Strings::NAV08_DEFAULT_VIEW;
    Default[1] = Strings::NAV08_TURN_BY_TURN;
    Default[2] = Strings::NAV08_TURN_LIST;
  );

  $rect <510,240,740,280>
  object Core::Timer CheckMarkUpdateTimer
  {
    preset OnTrigger = OnCheckMarkUpdateSlot;
    preset Period = 450;
  }

  $rect <510,280,740,320>
  slot OnCheckMarkUpdateSlot
  {
    CheckMarkUpdateTimer.Enabled = false;

    if( DeviceInterface::NavigationDevice.CurrentHome != Enum::HomeType.TOTAL )
    {
      var Application::Application App = ( Application::Application )GetRoot();
      if( null != App )
      {
        App.SwitchToHome( DeviceInterface::NavigationDevice.CurrentHome );
      }
    }
  }

  $rect <750,110,950,150>
  var int32 NaviScreenIdx;
}

$rect <20,210,220,250>
$output false
class NaviCurrentRoad : Core::Group
{
  $rect <0,70,200,110>
  inherited property Bounds = <0,0,330,31>;

  $rect <20,20,160,60>
  object Views::Image NaviIconCurRd
  {
    preset Bounds = <0,8,20,28>;
    preset Bitmap = Resource::CurRdIcon;
    preset Visible = false;
  }

  $rect <20,20,160,60>
  object Views::Text RoadNameText
  {
    preset Bounds = <24,0,330,31>;
    preset Alignment = Views::TextAlignment[AlignHorzCenter, AlignVertCenter];
    preset String = "";
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <250,80,450,120>
  method void SetItemBounds( arg bool IsAnimationStarted )
  {
    // Normalize Current text & Navi Icon position to origin position based on the current Bounds.
    if( RoadNameText.Bounds != RoadNameTextBounds )
    {
      RoadNameText.Bounds = RoadNameTextBounds;
    }

    if( NaviIconCurRd.Bounds != NaviIconBounds )
    {
      NaviIconCurRd.Bounds = NaviIconBounds;
    }

    // Show Navi Icon.
    if( ! NaviIconCurRd.Visible )
    {
      NaviIconCurRd.Visible = true;
    }

    // Make sure the Ellipsis property is always false when set item bounds. Noted that the road name has to be displayed in the middle of current road text area.
    // If Ellipsis is set to true in the beginning, both side of current road text will have "..." when length of road name is longer than current road text area.
    RoadNameText.Ellipsis = false;

    // According to the content of RoadNameText, we have to adjust the position of road name text and current road icon dynamically.
    if( RoadNameText.GetContentArea().w < RoadNameText.Bounds.w )
    {
      var rect NewRoadNameBounds;
      NewRoadNameBounds.x1 = RoadNameText.GetContentArea().x1;
      NewRoadNameBounds.x2 = NewRoadNameBounds.x1 + RoadNameText.GetContentArea().w;
      NewRoadNameBounds.y1 = RoadNameText.Bounds.y1;
      NewRoadNameBounds.y2 = RoadNameText.Bounds.y2;

      RoadNameText.Bounds = NewRoadNameBounds;

      var rect NewCurIcnBounds;
      NewCurIcnBounds.x1 = RoadNameText.Bounds.x1 - 24;
      NewCurIcnBounds.x2 = NewCurIcnBounds.x1 + NaviIconCurRd.Bounds.w;
      NewCurIcnBounds.y1 = NaviIconCurRd.Bounds.y1;
      NewCurIcnBounds.y2 = NaviIconCurRd.Bounds.y2;

      NaviIconCurRd.Bounds = NewCurIcnBounds;
    }
    else
    {
      // To handle the case where length of road name is longer than current road text area, need to set like below in order to match GUI spec.
      RoadNameText.Alignment = Views::TextAlignment[AlignHorzLeft, AlignVertCenter];
      RoadNameText.Ellipsis = true;
    }

    // Save the origin navi icon relative x1 coordinate. It will be used for the animation of dismissing alert.
    if( !IsAnimationStarted )
    {
      NaviIconX1Pos = NaviIconCurRd.Bounds.x1;
    }
  }

  $rect <460,80,660,120>
  property string RoadName;

  $rect <460,120,660,160>
  onset RoadName
  {
    // Remember the property's new value.
    pure RoadName = value;

    RoadNameText.String = RoadName;

    if( RoadNameText.String == "" )
    {
      RoadNameText.String = "Road";
    }
  }

  $rect <10,170,210,210>
  var rect NaviIconBounds = <0,8,20,28>;

  $rect <250,130,450,170>
  method void UpdateItemBounds( arg Enum::NaviAlertAnimationType aAnimationType, arg int32 aNewWidth )
  {
    switch( aAnimationType )
    {
      case Enum::NaviAlertAnimationType.Shrink:RoadNameText.Alignment = Views::TextAlignment[AlignHorzLeft, AlignVertCenter];
      case Enum::NaviAlertAnimationType.Dismiss:RoadNameText.Alignment = Views::TextAlignment[AlignHorzCenter, AlignVertCenter];
      default:;
    }

    // According to GUI spec, 4 is the distance between Navi icon and Road name text.
    RoadNameTextBounds.x2 = RoadNameTextBounds.x1 + ( aNewWidth - ( NaviIconCurRd.Bounds.w + 4 ) );
    SetItemBounds( true );
  }

  $rect <0,230,200,270>
  var int32 NaviIconX1Pos;

  $rect <10,120,210,160>
  property rect RoadNameTextBounds;
}

$rect <20,260,220,300>
$output false
class NaviAlert : Core::Group
{
  $rect <0,90,200,130>
  inherited property Bounds = <0,0,480,46>;

  $rect <20,20,160,60>
  object Navigation::NaviAlertMessage AlertMessage
  {
    preset Bounds = Navigation::ALERT_MESSAGE_BOUNDS;
  }

  $rect <20,20,160,60>
  object Views::Rectangle NaviDistBg
  {
    preset Bounds = <405,0,480,46>;
    preset Color = #FFFFFFFF;
  }

  $rect <20,20,160,60>
  object Views::Text DistUnit
  {
    preset Bounds = <445,9,470,31>;
    preset Alignment = Views::TextAlignment[AlignHorzLeft, AlignVertCenter];
    preset String = "";
    preset Font = Fonts::NotoSansMedium16pt;
  }

  $rect <20,20,160,60>
  object Views::Text Distance
  {
    preset Bounds = <405,3,443,33>;
    preset Alignment = Views::TextAlignment[AlignHorzRight, AlignVertCenter];
    preset String = "";
    preset Font = Fonts::NotoSansMedium22pt;
  }

  $rect <240,90,440,130>
  method void ShrinkAlert()
  {
    IsEnlargeFinished = true;
    SuspendTimer.Enabled = true;
  }

  $rect <490,90,680,130>
  object Core::Timer SuspendTimer
  {
    preset OnTrigger = OnSuspendUpdateSlot;
    preset Period = 8000;
  }

  $rect <490,130,690,170>
  slot OnSuspendUpdateSlot
  {
    SuspendTimer.Enabled = false;
    if( IsEnlargeFinished )
    {
      IsEnlargeFinished = false;
      NaviEventShrinkEffect.Enabled = true;
    }
    else if( IsShrinkFinished )
    {
      IsShrinkFinished = false;
      SuspendTimer.Period = 8000;
      signal DismissAlertSignal;
    }
    else
    {
    }
  }

  $rect <10,150,210,190>
  var bool IsShrinkFinished = false;

  $rect <10,190,210,230>
  var bool IsEnlargeFinished = false;

  $rect <10,250,210,290>
  property slot DismissAlertSignal;

  $rect <240,140,440,180>
  method void SetAlert( arg Enum::NaviAlertType aNaviEventType, arg Enum::NaviCameraType aNaviCameraType, arg string aNaviEventSpeed, arg string aNaviEventDist )
  {
    switch( aNaviEventType )
    {
      case Enum::NaviAlertType.SCHOOL:
      {
        if( AlertMessage.NaviSpeed.Visible )
        {
          AlertMessage.NaviSpeed.Visible = false;
        }

        if( AlertMessage.NaviSpeedUnit.Visible )
        {
          AlertMessage.NaviSpeedUnit.Visible = false;
        }

        AlertMessage.NaviAlertIcon.Bitmap = Resource::SafeCamSchoolZone;
        AlertMessage.EventType.String = Strings::NAV01_SCHOOL_ZONE;
        AlertMessage.NaviEventBg.Color = #E27F07FF;
        NaviDistBg.Color = #E27F07FF;
      }
      case Enum::NaviAlertType.CAMERA:
      {
        if( !AlertMessage.NaviSpeed.Visible )
        {
          AlertMessage.NaviSpeed.Visible = true;
        }

        if( !AlertMessage.NaviSpeedUnit.Visible )
        {
          AlertMessage.NaviSpeedUnit.Visible = true;
        }

        SetCamera( aNaviCameraType );
        AlertMessage.NaviEventBg.Color = #AA1415FF;
        NaviDistBg.Color = #AA1415FF;
      }
      default:;
    }

    var int32 i;
    var int32 idx;

    if( aNaviEventSpeed != "" )
    {
      for( i = 0; i < SpeedUnitTextArray.size ; i++ )
      {
        idx = aNaviEventSpeed.find( SpeedUnitTextArray[i], 0 );
        if( idx > -1 )
        {
          AlertMessage.NaviSpeedUnit.String = SpeedUnitTextArray[i];
          aNaviEventSpeed = aNaviEventSpeed.remove( idx - 1 , SpeedUnitTextArray[i].length + 1 );
          break;
        }
      }
      AlertMessage.NaviSpeed.String = aNaviEventSpeed;
    }

    for( i = 0; i < DistUnitTextArray.size ; i++ )
    {
      idx = aNaviEventDist.find( DistUnitTextArray[i], 0 );
      if( idx > -1 )
      {
        DistUnit.String = DistUnitTextArray[i];
        aNaviEventDist = aNaviEventDist.remove( idx - 1 , DistUnitTextArray[i].length + 1 );
        break;
      }
    }

    Distance.String = aNaviEventDist;

  }

  $rect <720,90,920,130>
  array string DistUnitTextArray[ 2 ] =
  (
    Default[0] = "km";
    Default[1] = "m";
  );

  $rect <720,130,920,170>
  array string SpeedUnitTextArray[ 2 ] =
  (
    Default[0] = "km/h";
    Default[1] = "mile/h";
  );

  $rect <490,200,690,240>
  object Effects::RectEffect NaviEventShrinkEffect
  {
    preset OnFinished = OnNaviEventShrinkFinishSlot;
    preset NoOfCycles = 1;
    preset CycleDuration = 500;
    preset Value2 = <370,0,480,46>;
    preset Value1 = <0,0,480,46>;
    preset Outlet = ^AlertMessage.Bounds;
  }

  $rect <490,240,690,280>
  slot OnNaviEventShrinkFinishSlot
  {
    NaviEventShrinkEffect.Enabled = false;
    IsShrinkFinished = true;
    SuspendTimer.Period = 3000;
    SuspendTimer.Enabled = true;
  }

  $rect <240,190,440,230>
  method void SetCamera( arg Enum::NaviCameraType aNaviCameraType )
  {
    switch( aNaviCameraType )
    {
      case Enum::NaviCameraType.CHECK_FIXED:
      {
        AlertMessage.NaviAlertIcon.Bitmap = Resource::SafeCamEU;
        AlertMessage.EventType.String = Strings::NAV01_CHECK_FIXED;
      }
      case Enum::NaviCameraType.CHECK_TEMPORARY:
      {
        AlertMessage.NaviAlertIcon.Bitmap = Resource::SafeCamTempEU;
        AlertMessage.EventType.String = Strings::NAV01_CHECK_TEMPORARY;
      }
      case Enum::NaviCameraType.MOBILE:
      {
        AlertMessage.NaviAlertIcon.Bitmap = Resource::SafeCamMobileEU;
        AlertMessage.EventType.String = Strings::NAV01_MOBILE;
      }
      case Enum::NaviCameraType.AVERAGE:
      {
        AlertMessage.NaviAlertIcon.Bitmap = Resource::SafeAvrgCamEU;
        AlertMessage.EventType.String = Strings::NAV01_AVERAGE;
      }
      case Enum::NaviCameraType.VARIABLE:
      {
        AlertMessage.NaviAlertIcon.Bitmap = Resource::SafeCamVariableEU;
        AlertMessage.EventType.String = Strings::NAV01_VARIABLE;
      }
      case Enum::NaviCameraType.RED_LIGHT:
      {
        AlertMessage.NaviAlertIcon.Bitmap = Resource::SafeCamRedLight;
        AlertMessage.EventType.String = Strings::NAV01_RED_LIGHT;
      }
      case Enum::NaviCameraType.USER:
      {
        AlertMessage.NaviAlertIcon.Bitmap = Resource::SafeCamRealTimeEU;
        AlertMessage.EventType.String = Strings::NAV01_USER;
      }
      case Enum::NaviCameraType.MOBILE_ZONE:
      {
        AlertMessage.NaviAlertIcon.Bitmap = Resource::SafeCamLifemobileEU;
        AlertMessage.EventType.String = Strings::NAV01_MOBILE_ZONE;
      }
      case Enum::NaviCameraType.DANGEROUS_ZONE, Enum::NaviCameraType.DANGEROUS_POINT:
      {
        AlertMessage.NaviAlertIcon.Bitmap = Resource::SafeCamRiskZone;
        AlertMessage.EventType.String = Strings::NAV01_DANGEROUS_ZONE;
      }
      case Enum::NaviCameraType.RISK_ZONE:
      {
        AlertMessage.NaviAlertIcon.Bitmap = Resource::SafeCamRiskZone;
        AlertMessage.EventType.String = Strings::NAV01_RISK_ZONE;
      }
      case Enum::NaviCameraType.UNKNOWN:
      {
        AlertMessage.NaviAlertIcon.Bitmap = Resource::SafeCamMobileNA;
        AlertMessage.EventType.String = Strings::NAV01_UNKNOWN;
      }
      default:;
    }
  }

  $rect <500,310,700,350>
  object Core::SystemEventHandler AlertDistanceUpdate
  {
    preset OnEvent = OnAlertDistanceUpdateSlot;
    preset Event = DeviceInterface::NavigationDevice.AlertDistanceUpdateEvent;
  }

  // This slot method is executed when the associated system event handler 'SystemEventHandler' \
  // receives an event.
  $rect <700,310,900,350>
  slot OnAlertDistanceUpdateSlot
  {
    var string distance = DeviceInterface::NavigationDevice.GetAlertDistance();
    var int32 i;
    var int32 idx;
    for( i = 0; i < DistUnitTextArray.size ; i++ )
    {
      idx = distance.find( DistUnitTextArray[i], 0 );
      if( idx > -1 )
      {
        DistUnit.String = DistUnitTextArray[i];
        Distance.String = distance.remove( idx - 1 , DistUnitTextArray[i].length + 1 );
        break;
      }
    }
  }
}

$rect <20,310,220,350>
$output false
class NaviAlertMessage : Core::Group
{
  $rect <10,70,210,110>
  inherited property Bounds = <0,0,405,46>;

  $rect <20,20,160,60>
  object Views::Rectangle NaviEventBg
  {
    preset Bounds = <0,0,405,46>;
    preset Color = #FFFFFFFF;
    preset Visible = true;
  }

  $rect <20,20,160,60>
  object Views::Image NaviAlertIcon
  {
    preset Bounds = <10,8,30,28>;
    preset Bitmap = Resource::SafeCamTempEU;
  }

  $rect <20,20,160,60>
  object Views::Text EventType
  {
    preset Bounds = <34,2,315,33>;
    preset Alignment = Views::TextAlignment[AlignHorzLeft, AlignVertCenter];
    preset String = "";
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <20,20,160,60>
  object Views::Text NaviSpeed
  {
    preset Bounds = <315,3,352,33>;
    preset String = "";
    preset Font = Fonts::NotoSansMedium22pt;
    preset Visible = false;
  }

  $rect <20,20,160,60>
  object Views::Text NaviSpeedUnit
  {
    preset Bounds = <354,9,395,31>;
    preset String = "";
    preset Font = Fonts::NotoSansMedium16pt;
    preset Visible = false;
  }
}

$rect <20,360,220,400>
$output false
class NaviETA : Core::Group
{
  $rect <0,100,200,140>
  inherited property Bounds = <0,0,110,33>;

  $rect <20,20,160,60>
  object Views::Image NaviIconFlag
  {
    preset Bounds = <19,7,39,29>;
    preset Bitmap = Resource::FlagIcon;
    preset Visible = true;
  }

  $rect <20,20,160,60>
  object Views::Text TimeText
  {
    preset Bounds = <41,2,92,33>;
    preset Alignment = Views::TextAlignment[AlignHorzLeft, AlignVertCenter];
    preset String = "";
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
    preset Visible = false;
  }

  $rect <20,20,160,60>
  object Views::Text AmPmText
  {
    preset Bounds = <84,9,110,31>;
    preset Alignment = Views::TextAlignment[AlignHorzLeft, AlignVertCenter];
    preset String = "";
    preset Font = Fonts::NotoSansMedium16pt;
    preset Visible = false;
  }

  $rect <220,100,420,140>
  property int32 ETA;

  $rect <220,140,420,180>
  onset ETA
  {
    pure ETA = value;
    TimeText.Visible = true;

    if( value > 0 && DeviceInterface::NavigationDevice.IsRouteGuidanceStarted() )
    {
      FormatTime();
      TimeText.Alignment = Views::TextAlignment[AlignHorzRight, AlignVertCenter];
      TimeText.Bounds = Navigation::TIMETEXT_W_NAVI_BOUNDS;
      NaviIconFlag.Bounds = Navigation::NAVIFLAG_W_NAVI_BOUNDS;
      AmPmText.Visible = true;
    }
    else
    {
      TimeText.String = "--:--";
      AmPmText.Visible = false;
    }



  }

  $rect <440,100,640,140>
  method void FormatTime()
  {
    var string eta;
    var int32 hour;
    var int32 min;

    hour = ETA / 60;
    min = ETA % 60;

    if( hour > 0 )
    {
      if( hour < 12 )
      {
        AmPmText.String = "am";
      }
      else
      {
        AmPmText.String = "pm";
        if( hour > 12 )
        {
          hour = hour - 12;
        }
      }

      if( min < 10 )
      {
        eta = string( hour ) + ":0" + string( min );
      }
      else
      {
        eta = string( hour ) + ":" + string( min );
      }
    }
    else
    {
      if( min < 10 )
      {
        eta = "0:0" + string( min );
      }
      else
      {
        eta = "0:" + string( min );
      }
      AmPmText.String = "am";
    }

    TimeText.String = eta;
  }
}

$rect <290,20,490,60>
$output false
class NAV05_TBTView : Home::BaseHome
{
  $rect <520,530,720,570>
  inherited method Init()
  {
    signal OnNavigatingStatusUpdateSlot;
    signal OnTbtListUpdateSlot;
    signal OnSpeedLimitUpdateSlot;
  }

  $rect <0,300,200,340>
  inherited property Bounds = <0,0,480,272>;

  $rect <740,530,940,570>
  inherited method OnLongEnterKeyActivated()
  {
    if( Components::ACTIVATE_LONG_PRESS_REPETITION_COUNT == KeyHandler.RepetitionCount )
    {
      if( !DeviceInterface::NavigationDevice.GetNaviConnectStatus() )
      {
        PresentDialog( new Pop::POP09_POP14_BleConnectionErrorUI, null, null, null, null, null, null, null, null, false );
      }
      else if( !DeviceInterface::NavigationDevice.GetNaviAppInitSettingStatus() )
      {
        PresentDialog( new Pop::POP17_AppInitSettingError, null, null, null, null, null, null, null, null, false );
      }
      else
      {
        // Leave navigation home screen so that stop map frame request.
        DeviceInterface::NavigationDevice.StopMapFrameRequest();
        PresentDialog( new Navigation::NAV06_NaviSettingMenu, null, null, null, null, null, null, null, null, false );
      }
    }
  }

  $rect <540,50,740,90>
  inherited var HomeType = Enum::HomeType.NAVI_NEXT_TURN;

  $rect <20,20,160,60>
  object Views::Wallpaper NaviTBTViewBg
  {
    preset Bounds = <0,38,480,226>;
    preset Bitmap = Resource::NaviTBTViewBg;
  }

  $rect <20,20,160,60>
  object Views::Rectangle ArrivalBg
  {
    preset Bounds = <0,226,130,272>;
    preset Color = #161F3CFF;
    preset Visible = true;
  }

  $rect <20,20,160,60>
  object Navigation::NaviETA ETAComponent
  {
    preset Bounds = <10,228,120,259>;
  }

  $rect <20,20,160,60>
  object Views::Rectangle RoadNameBg
  {
    preset Bounds = <130,226,480,272>;
    preset Color = #020305E6;
  }

  $rect <20,20,160,60>
  object Navigation::NaviCurrentRoad CurrentRoadComponent
  {
    preset Bounds = <140,228,470,259>;
  }

  $rect <20,20,160,60>
  object Views::Image SpeedLimitIcon
  {
    preset Bounds = <411,164,473,226>;
    preset Bitmap = Resource::SpeedLimitIcon;
    preset Visible = false;
  }

  $rect <20,20,160,60>
  object Views::Text SpeedLimitText
  {
    preset Bounds = <420,179,464,212>;
    preset String = "";
    preset Font = Fonts::NotoSansBold24pt;
    preset Color = #000000FF;
    preset Visible = false;
  }

  $rect <20,20,160,60>
  object Views::Text NextTurnDist
  {
    preset Bounds = <186,68,270,116>;
    preset Font = Fonts::NotoSansBold38pt;
    preset Visible = false;
  }

  $rect <20,20,160,60>
  object Views::Text NextTurnDistUnit
  {
    preset Bounds = <270,82,318,112>;
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
    preset Visible = false;
  }

  $rect <20,20,160,60>
  object Views::Text NextTurnDescription
  {
    preset Bounds = <186,117,408,210>;
    preset Ellipsis = true;
    preset WrapText = true;
    preset Alignment = Views::TextAlignment[AlignHorzLeft, AlignVertCenter];
    preset String = "";
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
    preset Color = #CFCFCFFF;
    preset Visible = false;
  }

  $rect <20,20,160,60>
  object Views::Image NextTurnIcon
  {
    preset Bounds = <28,54,178,204>;
    preset Visible = false;
  }

  // Variable
  note group Note6
  {
    attr Bounds = <500,0,1380,140>;
  }

  // System Event
  note group Note7
  {
    attr Bounds = <500,170,1380,470>;
  }

  $rect <520,210,740,250>
  object Core::SystemEventHandler ETAUpdateEventHandler
  {
    preset OnEvent = OnETAUpdateSlot;
    preset Event = DeviceInterface::NavigationDevice.ETAUpdateEvent;
  }

  // This slot method is executed when the associated system event handler 'SystemEventHandler' \
  // receives an event.
  $rect <740,210,970,250>
  slot OnETAUpdateSlot
  {
    var DeviceInterface::NaviDataClass NaviData = DeviceInterface::NavigationDevice.GetNaviData( Enum::NaviDataType.ETA );
    ETAComponent.ETA = NaviData.ETA;
  }

  $rect <520,260,740,300>
  object Core::SystemEventHandler CurRdUpdateEventHandler
  {
    preset OnEvent = OnCurRdUpdateSlot;
    preset Event = DeviceInterface::NavigationDevice.CurRdUpdateEvent;
  }

  // This slot method is executed when the associated system event handler 'SystemEventHandler' \
  // receives an event.
  $rect <740,260,970,300>
  slot OnCurRdUpdateSlot
  {
    var DeviceInterface::NaviDataClass NaviData = DeviceInterface::NavigationDevice.GetNaviData( Enum::NaviDataType.CURRENT_ROAD );
    SetItemBounds();
    CurrentRoadComponent.RoadName = NaviData.CurrentRoad;
    CurrentRoadComponent.SetItemBounds( false );


  }

  $rect <20,20,160,60>
  object Views::Text RecalculateMessage
  {
    preset Bounds = <104,75,376,199>;
    preset Ellipsis = true;
    preset WrapText = true;
    preset String = "";
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
    preset Color = #CFCFCFFF;
    preset Visible = false;
  }

  // Method
  note group Note8
  {
    attr Bounds = <500,490,1380,670>;
  }

  $rect <520,310,720,350>
  object Core::SystemEventHandler TbtListUpdateEventHandler
  {
    preset OnEvent = OnTbtListUpdateSlot;
    preset Event = DeviceInterface::NavigationDevice.TbtListUpdateEvent;
  }

  // This slot method is executed when the associated system event handler 'SystemEventHandler' \
  // receives an event.
  $rect <730,310,960,350>
  slot OnTbtListUpdateSlot
  {
    // The top item of tbt list is always the active tbt item.
    var DeviceInterface::NaviTbtDataClass NaviTbtData = DeviceInterface::NavigationDevice.GetNaviTbtData( 0 );
    ShowNextTurnIcon( NaviTbtData.IconIdx );

    if( !NextTurnDist.Visible )
    {
      NextTurnDist.Visible = true;
    }

    if( !NextTurnDistUnit.Visible )
    {
      NextTurnDistUnit.Visible = true;
    }

    if( !NextTurnDescription.Visible )
    {
      NextTurnDescription.Visible = true;
    }

    NextTurnDistUnit.String = NaviTbtData.DistUnit;

    if( 0.0 == NaviTbtData.Distance.fract )
    {
      NextTurnDist.String = string( (int32)NaviTbtData.Distance );
    }
    else
    {
      NextTurnDist.String = string( NaviTbtData.Distance, 0 , 1 );
    }

    NextTurnDescription.String = NaviTbtData.TbtDescription;
  }

  $rect <950,530,1150,570>
  method void ShowNextTurnIcon( arg int32 index )
  {
    if( !NextTurnIcon.Visible )
    {
      NextTurnIcon.Visible = true;
    }

    var Enum::NaviTurnStatusType NaviTurnStatus = ( Enum::NaviTurnStatusType ) index;
    switch( NaviTurnStatus )
    {
      case Enum::NaviTurnStatusType.ARRVIAL_LEFT: NextTurnIcon.Bitmap = Resource::NaviTurnArrwArvngLIrgTbt;
      case Enum::NaviTurnStatusType.ARRIVAL_RIGHT: NextTurnIcon.Bitmap = Resource::NaviTurnArrwArvngRIrgTbt;
      case Enum::NaviTurnStatusType.ARRIVAL_VIA_LEFT: NextTurnIcon.Bitmap = Resource::NaviTurnArrwArvngViaLIrgTbt;
      case Enum::NaviTurnStatusType.ARRIVAL_VIA_RIGHT: NextTurnIcon.Bitmap = Resource::NaviTurnArrwArvngViaRIrgTbt;
      case Enum::NaviTurnStatusType.CONTINUE: NextTurnIcon.Bitmap = Resource::NaviTurnArrwContinueIrgTbt;
      case Enum::NaviTurnStatusType.DRIVETO: NextTurnIcon.Bitmap = Resource::NaviTurnArrwDrivetoIrgTbt;
      case Enum::NaviTurnStatusType.DEST_FLAG: NextTurnIcon.Bitmap = Resource::NaviTurnArrwDstntnFlgIrgTbt;
      case Enum::NaviTurnStatusType.DEST_VIA_FLAG: NextTurnIcon.Bitmap = Resource::NaviTurnArrwViaFlgIrgTbt;
      case Enum::NaviTurnStatusType.EXIT_LEFT: NextTurnIcon.Bitmap = Resource::NaviTurnArrwExitLIrgTbt;
      case Enum::NaviTurnStatusType.EXIT_RIGHT: NextTurnIcon.Bitmap = Resource::NaviTurnArrwExitRIrgTbt;
      case Enum::NaviTurnStatusType.FERRY: NextTurnIcon.Bitmap = Resource::NaviTurnarrwFerryIrgTbt;
      case Enum::NaviTurnStatusType.KEEP_LEFT: NextTurnIcon.Bitmap = Resource::NaviTurnArrwKeepLIrgTbt;
      case Enum::NaviTurnStatusType.KEEP_RIGHT: NextTurnIcon.Bitmap = Resource::NaviTurnArrwKeepRIrgTbt;
      case Enum::NaviTurnStatusType.ROUNDABOUT_45: NextTurnIcon.Bitmap = Resource::NaviTurnArrwRoundabout45IrgTbt;
      case Enum::NaviTurnStatusType.ROUNDABOUT_90: NextTurnIcon.Bitmap = Resource::NaviTurnArrwRoundabout90IrgTbt;
      case Enum::NaviTurnStatusType.ROUNDABOUT_135: NextTurnIcon.Bitmap = Resource::NaviTurnArrwRoundabout135IrgTbt;
      case Enum::NaviTurnStatusType.ROUNDABOUT_180: NextTurnIcon.Bitmap = Resource::NaviTurnArrwRoundabout180IrgTbt;
      case Enum::NaviTurnStatusType.ROUNDABOUT_225: NextTurnIcon.Bitmap = Resource::NaviTurnArrwRoundabout225IrgTbt;
      case Enum::NaviTurnStatusType.ROUNDABOUT_270: NextTurnIcon.Bitmap = Resource::NaviTurnArrwRoundabout270IrgTbt;
      case Enum::NaviTurnStatusType.ROUNDABOUT_315: NextTurnIcon.Bitmap = Resource::NaviTurnArrwRoundabout315IrgTbt;
      case Enum::NaviTurnStatusType.ROUNDABOUT_360: NextTurnIcon.Bitmap = Resource::NaviTurnArrwRoundabout360IrgTbt;
      case Enum::NaviTurnStatusType.ROUNDABOUT_EU_45: NextTurnIcon.Bitmap = Resource::NaviTurnArrwRoundaboutEuro45IrgTbt;
      case Enum::NaviTurnStatusType.ROUNDABOUT_EU_90: NextTurnIcon.Bitmap = Resource::NaviTurnArrwRoundaboutEuro90IrgTbt;
      case Enum::NaviTurnStatusType.ROUNDABOUT_EU_135: NextTurnIcon.Bitmap = Resource::NaviTurnArrwRoundaboutEuro135IrgTbt;
      case Enum::NaviTurnStatusType.ROUNDABOUT_EU_180: NextTurnIcon.Bitmap = Resource::NaviTurnArrwRoundaboutEuro180IrgTbt;
      case Enum::NaviTurnStatusType.ROUNDABOUT_EU_225: NextTurnIcon.Bitmap = Resource::NaviTurnArrwRoundaboutEuro225IrgTbt;
      case Enum::NaviTurnStatusType.ROUNDABOUT_EU_270: NextTurnIcon.Bitmap = Resource::NaviTurnArrwRoundaboutEuro270IrgTbt;
      case Enum::NaviTurnStatusType.ROUNDABOUT_EU_315: NextTurnIcon.Bitmap = Resource::NaviTurnArrwRoundaboutEuro315IrgTbt;
      case Enum::NaviTurnStatusType.ROUNDABOUT_EU_360: NextTurnIcon.Bitmap = Resource::NaviTurnArrwRoundaboutEuro360IrgTbt;
      case Enum::NaviTurnStatusType.ROUNDABOUT_EU_GEN: NextTurnIcon.Bitmap = Resource::NaviTurnArrwRoundaboutEuroGenericIrgTbt;
      case Enum::NaviTurnStatusType.ROUNDABOUT_GEN: NextTurnIcon.Bitmap = Resource::NaviTurnArrwRoundaboutGenericIrgTbt;
      case Enum::NaviTurnStatusType.SHARP_TURN_LEFT: NextTurnIcon.Bitmap = Resource::NaviTurnArrwShrpturnLIrgTbt;
      case Enum::NaviTurnStatusType.SHARP_TURN_RIGHT: NextTurnIcon.Bitmap = Resource::NaviTurnArrwShrpturnRIrgTbt;
      case Enum::NaviTurnStatusType.TURN_LEFT: NextTurnIcon.Bitmap = Resource::NaviTurnArrwTurnLIrgTbt;
      case Enum::NaviTurnStatusType.TURN_RIGHT: NextTurnIcon.Bitmap = Resource::NaviTurnArrwTurnRIrgTbt;
      case Enum::NaviTurnStatusType.UTURN_LEFT: NextTurnIcon.Bitmap = Resource::NaviTurnArrwUturnLIrgTbt;
      case Enum::NaviTurnStatusType.UTURN_RIGHT: NextTurnIcon.Bitmap = Resource::NaviTurnArrwUturnRIrgTbt;
      case Enum::NaviTurnStatusType.EXIT_UNSPEC: NextTurnIcon.Bitmap = null;
      default:;
    }
  }

  $rect <520,360,730,400>
  object Core::SystemEventHandler SpeedLimitUpdateEventHandler
  {
    preset OnEvent = OnSpeedLimitUpdateSlot;
    preset Event = DeviceInterface::NavigationDevice.SpeedLimitUpdateEvent;
  }

  // This slot method is executed when the associated system event handler 'SystemEventHandler' \
  // receives an event.
  $rect <740,360,970,400>
  slot OnSpeedLimitUpdateSlot
  {
    var DeviceInterface::NaviDataClass NaviData = DeviceInterface::NavigationDevice.GetNaviData( Enum::NaviDataType.SPEED_LIMIT );

    if( NaviData.SpeedLimit > 0 )
    {
      SpeedLimitIcon.Visible = true;
      SpeedLimitText.String = string( NaviData.SpeedLimit );
      SpeedLimitText.Visible = true;

      var DeviceInterface::VehicleDataClass VehicleData = DeviceInterface::VehicleDevice.GetData( Enum::VehicleRxType.VEHICLE_SPEED_REAL );

      if( ( int32 )VehicleData.DataUInt32 > NaviData.SpeedLimit )
      {
        SpeedLimitFlickeringTimer.Enabled = true;
      }
      else
      {
        SpeedLimitFlickeringTimer.Enabled = false;
      }
    }
    else
    {
      SpeedLimitIcon.Visible = false;
      SpeedLimitText.Visible = false;
      SpeedLimitFlickeringTimer.Enabled = false;
    }
  }

  $rect <520,590,710,630>
  object Core::Timer SpeedLimitFlickeringTimer
  {
    preset OnTrigger = OnSpeedLimitFlickeringSlot;
    preset Period = 300;
  }

  $rect <720,590,920,630>
  slot OnSpeedLimitFlickeringSlot
  {
    SpeedLimitIcon.Visible = !SpeedLimitIcon.Visible;
    SpeedLimitText.Visible = !SpeedLimitText.Visible;
  }

  $rect <520,410,720,450>
  object Core::SystemEventHandler VehicleDataReceivedEventHandler
  {
    preset OnEvent = OnVehicleSpeedUpdateSlot;
    preset Event = DeviceInterface::VehicleDevice.VehicleDataReceivedSystemEvent;
  }

  // This slot method is executed when the associated system event handler 'SystemEventHandler' \
  // receives an event.
  $rect <740,410,980,450>
  slot OnVehicleSpeedUpdateSlot
  {
    var DeviceInterface::VehicleDataClass VehicleData = ( DeviceInterface::VehicleDataClass )VehicleDataReceivedEventHandler.Context;
    if( null != VehicleData &&
        Enum::VehicleRxType.VEHICLE_SPEED_REAL == VehicleData.RxType )
    {
      signal OnSpeedLimitUpdateSlot;
    }
  }

  // TODO:
  // 1. Integrate with navi protocol.
  // 2. Define Enum for all Turn arrow icon(wait for spec).
  note group Note5
  {
    attr Bounds = <0,350,480,480>;
  }

  $rect <980,210,1180,250>
  object Core::SystemEventHandler RouteCalProgressUpdateEventHandler
  {
    preset OnEvent = OnRouteCalProgressUpdateSlot;
    preset Event = DeviceInterface::NavigationDevice.RouteCalProgressUpdateEvent;
  }

  // This slot method is executed when the associated system event handler 'SystemEventHandler' \
  // receives an event.
  $rect <1180,210,1380,250>
  slot OnRouteCalProgressUpdateSlot
  {
    var DeviceInterface::NaviDataClass NaviData = DeviceInterface::NavigationDevice.GetNaviData( Enum::NaviDataType.NAVI_ROUTE_CAL_PROGRESS );
    var int32 RouteCalProgress = NaviData.RouteCalProgress;
    SetRecalculatingStatus( RouteCalProgress );
  }

  $rect <940,590,1140,630>
  method void SetRecalculatingStatus( arg int32 aNewRouteCalProgress )
  {
    NextTurnIcon.Visible = false;
    NextTurnDescription.Visible = false;
    NextTurnDistUnit.Visible = false;
    NextTurnDist.Visible = false;
    SpeedLimitText.Visible = false;
    SpeedLimitIcon.Visible = false;
    ETAComponent.ETA = 0;
    RecalculateMessage.String = "Recalculating " + string( aNewRouteCalProgress ) + " %%";
    RecalculateMessage.Visible = true;
  }

  $rect <990,270,1200,310>
  object Core::SystemEventHandler NavigatingStatusUpdateEventHandler
  {
    preset OnEvent = OnNavigatingStatusUpdateSlot;
    preset Event = DeviceInterface::NavigationDevice.NavigatingStatusUpdateEvent;
  }

  // This slot method is executed when the associated system event handler 'SystemEventHandler' \
  // receives an event.
  $rect <1220,270,1380,310>
  slot OnNavigatingStatusUpdateSlot
  {
    if( !DeviceInterface::NavigationDevice.IsRouteGuidanceStarted() )
    {
      NextTurnDist.Visible = false;
      NextTurnIcon.Visible = false;
      NextTurnDistUnit.Visible = false;
      NextTurnDescription.Visible = false;
    }
    else
    {
      NextTurnDist.Visible = true;
      NextTurnIcon.Visible = true;
      NextTurnDistUnit.Visible = true;
      NextTurnDescription.Visible = true;
      RecalculateMessage.Visible = false;
    }

    signal OnCurRdUpdateSlot;
    signal OnETAUpdateSlot;
  }

  $rect <1160,530,1360,570>
  method void SetItemBounds()
  {
    if( DeviceInterface::NavigationDevice.IsRouteGuidanceStarted() )
    {
      RoadNameBg.Bounds = Navigation::ROAD_BG_W_NAVI_BOUNDS;
      CurrentRoadComponent.Bounds = Navigation::CURRENT_ROAD_W_NAVI_BOUNDS;
      CurrentRoadComponent.RoadNameTextBounds = Navigation::ROADNAME_W_NAVI_BOUNDS;
      ETAComponent.Visible = true;
      ArrivalBg.Visible = true;
    }
    else
    {
      RoadNameBg.Bounds = Navigation::ROAD_BG_WO_NAVI_BOUNDS;
      CurrentRoadComponent.Bounds = Navigation::CURRENT_ROAD_WO_NAVI_BOUNDS;
      CurrentRoadComponent.RoadNameTextBounds = Navigation::ROADNAME_WO_NAVI_BOUNDS;
      ETAComponent.Visible = false;
      ArrivalBg.Visible = false;
    }
  }
}

$rect <290,70,490,110>
$output false
class NAV03_TBTListView : Home::BaseHome
{
  $rect <530,240,730,280>
  inherited method Init()
  {
    trace "TBT List View init";
    signal OnTbtListUpdateSlot;
  }

  $rect <740,290,940,330>
  inherited method OnShortDownKeyActivated()
  {
    TbtList.ScrollDown();
  }

  $rect <530,290,730,330>
  inherited method OnShortUpKeyActivated()
  {
    TbtList.ScrollUp();
  }

  $rect <740,240,940,280>
  inherited method OnLongEnterKeyActivated()
  {
    if( Components::ACTIVATE_LONG_PRESS_REPETITION_COUNT == KeyHandler.RepetitionCount )
    {
      if( !DeviceInterface::NavigationDevice.GetNaviConnectStatus() )
      {
        PresentDialog( new Pop::POP09_POP14_BleConnectionErrorUI, null, null, null, null, null, null, null, null, false );
      }
      else if( !DeviceInterface::NavigationDevice.GetNaviAppInitSettingStatus() )
      {
        PresentDialog( new Pop::POP17_AppInitSettingError, null, null, null, null, null, null, null, null, false );
      }
      else
      {
        // Leave navigation home screen so that stop map frame request.
        DeviceInterface::NavigationDevice.StopMapFrameRequest();
        PresentDialog( new Navigation::NAV06_NaviSettingMenu, null, null, null, null, null, null, null, null, false );
      }
    }
  }

  $rect <20,20,160,60>
  inherited object MainBottomBG;

  $rect <20,20,160,60>
  inherited object BlackBG
  {
    preset Bounds = <0,38,480,272>;
  }

  $rect <530,90,730,130>
  inherited var HomeType = Enum::HomeType.NAVI_TURN_BY_TURN;

  // Method
  note group Note8
  {
    attr Bounds = <510,200,1230,360>;
  }

  $rect <20,20,160,60>
  object Navigation::TbtListMenu TbtList
  {
    preset Bounds = <0,36,480,272>;
    preset ArrowScrollBarVisible = true;
  }

  // System Event
  note group Note7
  {
    attr Bounds = <510,380,1230,550>;
  }

  $rect <530,420,730,460>
  object Core::SystemEventHandler TbtListUpdateEventHandler
  {
    preset OnEvent = OnTbtListUpdateSlot;
    preset Event = DeviceInterface::NavigationDevice.TbtListUpdateEvent;
  }

  // This slot method is executed when the associated system event handler 'SystemEventHandler' \
  // receives an event.
  $rect <740,420,940,460>
  slot OnTbtListUpdateSlot
  {
    if( DeviceInterface::NavigationDevice.IsTbtMessageDisplayed() )
    {
    // TODO: show message to inform user that there are more TBT items.
    }
    TbtList.NoOfItems = DeviceInterface::NavigationDevice.GetTbtListSize();
    TbtList.InvalidateItems( 0, TbtList.NoOfItems-1 );
  }

  // TODO:
  // 1. Integrate with navi protocol.
  note group Note5
  {
    attr Bounds = <0,310,480,400>;
  }

  // Variable
  note group Note6
  {
    attr Bounds = <510,50,1230,160>;
  }

  $rect <530,470,740,510>
  object Core::SystemEventHandler NavigatingStatusUpdateEventHandler
  {
    preset OnEvent = OnNavigatingStatusUpdateSlot;
    preset Event = DeviceInterface::NavigationDevice.NavigatingStatusUpdateEvent;
  }

  // This slot method is executed when the associated system event handler 'SystemEventHandler' \
  // receives an event.
  $rect <750,470,990,510>
  slot OnNavigatingStatusUpdateSlot
  {
    // Clear all items displayed on the tbt list.
    if( !DeviceInterface::NavigationDevice.IsRouteGuidanceStarted() )
    {
      TbtList.NoOfItems = 0;
    }
  }

  $rect <20,20,160,60>
  object Views::Image Divider
  {
    preset Bounds = <0,36,480,38>;
    preset Alignment = Views::ImageAlignment[AlignVertBottom, ScaleToFit];
    preset Bitmap = Resource::StatusBarDivider;
  }
}

$rect <500,20,700,60>
$output false
class TbtInfoItem : Core::Group
{
  $rect <10,140,210,180>
  inherited property Bounds = <0,0,480,74>;

  $rect <20,20,160,60>
  object Views::Rectangle TbtItemBg
  {
    preset Bounds = <20,0,440,72>;
    preset Color = #1E478CFF;
    preset Visible = false;
  }

  $rect <20,20,160,60>
  object Views::Image NextTurnIcon
  {
    preset Bounds = <30,22,58,50>;
  }

  $rect <20,20,160,60>
  object Views::Text NextTurnDist
  {
    preset Bounds = <58,19,117,53>;
    preset Alignment = Views::TextAlignment[AlignHorzCenter, AlignVertCenter];
    preset Font = Fonts::NotoSansBold24pt;
  }

  $rect <20,20,160,60>
  object Views::Text NextTurnDistUnit
  {
    preset Bounds = <117,19,154,53>;
    preset Alignment = Views::TextAlignment[AlignHorzCenter, AlignVertCenter];
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <20,20,160,60>
  object Views::Text NextTurnDescription
  {
    preset Bounds = <155,5,430,72>;
    preset Ellipsis = true;
    preset WrapText = true;
    preset Alignment = Views::TextAlignment[AlignHorzLeft, AlignVertTop];
    preset String = "";
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
    preset Color = #C8C8C8FF;
  }

  $rect <20,20,160,60>
  object Views::Image ListDivider
  {
    preset Bounds = <0,72,480,74>;
    preset Alignment = Views::ImageAlignment[ScaleToFit];
    preset Bitmap = Resource::ListDivider3;
  }
}

$rect <240,210,440,250>
$output false
class NaviDialog : Core::Group
{
  $rect <10,280,210,320>
  inherited property Bounds = <0,0,340,252>;

  $rect <20,20,160,60>
  object Views::Frame DialogBackground
  {
    preset Bounds = <0,0,340,252>;
    preset Bitmap = Resource::DialogBackground;
  }

  $rect <440,10,640,50>
  property class DialogButton;

  $rect <440,50,640,90>
  onset DialogButton
  {
    if( pure DialogButton != value )
    {
      // Remember the property's new value.
      pure DialogButton = value;

      switch( DialogType )
      {
        case Enum::NaviDialogType.DIALOG_YES_NO:
        {
          ButtonSet = (Menu::UpDownPushButtonSet)new value;
          ButtonSet.OnUpButtonActivated = OnOkActivatedSlot;
          ButtonSet.OnDownButtonActivated = OnNoActivatedSlot;

          ButtonSet.UpButtonTitle = Strings::GEN_YES;
          ButtonSet.DownButtonTitle = Strings::GEN_NO + " (" + string( CountDownTime ) + ")";
          ButtonSet.Bounds = <69,154,271,240>;
          Add( ButtonSet, 0 );
          DialogContent.Bounds = <15,13,325,144>;
        }
        case Enum::NaviDialogType.DIALOG_OK:
        {
          var Menu::PushButton Button = (Menu::PushButton)new value;
          Button.OnActivate = OnOkActivatedSlot;
          Button.Bounds = <69,200,271,240>;
          Button.Title = Strings::GEN_OK;
          Add( Button, 0 );
          DialogContent.Bounds = <15,13,325,190>;
        }
        default:;
      }
    }
  }

  $rect <660,10,860,50>
  property string DialogMessage;

  $rect <660,50,860,90>
  onset DialogMessage
  {
    // The value doesn't change - nothing to do.
    if( pure DialogMessage != value )
    {
      // Remember the property's new value.
      pure DialogMessage = value;
      DialogContent.String = DialogMessage;
    }
  }

  $rect <20,20,160,60>
  object Views::Text DialogContent
  {
    preset Bounds = <15,13,325,190>;
    preset WrapText = true;
    preset String = "";
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <440,130,640,170>
  property Enum::NaviDialogType DialogType;

  $rect <440,170,640,210>
  onset DialogType
  {
    // The value doesn't change - nothing to do.
    if( pure DialogType != value )
    {
      // Remember the property's new value.
      pure DialogType = value;
      /*switch( DialogType )
      {
        case Enum::NaviDialogType.DIALOG_YES_NO:;
        //{
          //DialogContent.Bounds = <15,13,325,144>;
          //DialogButton.Bounds = <69,154,271,240>;
        //}
        case Enum::NaviDialogType.DIALOG_OK:
        {
          DialogContent.Bounds = <15,13,325,190>;
          DialogButton.Bounds = <69,200,271,240>;
        }
        default:;
      }*/
    }
  }

  $rect <350,280,550,320>
  slot OnOkActivatedSlot
  {
    if( DialogType == Enum::NaviDialogType.DIALOG_OK )
    {
      DeviceInterface::NavigationDevice.SendSelectedDialog( Enum::NaviButtonType.OK );
    }
    else if( DialogType == Enum::NaviDialogType.DIALOG_YES_NO )
    {
      DeviceInterface::NavigationDevice.SendSelectedDialog( Enum::NaviButtonType.YES );
    }
    else
    {
      // empty
    }
    Owner.DismissDialog( this, null, null, null, null, null, false );
    signal OnDialogDismiss;
  }

  $rect <10,330,210,370>
  property slot OnDialogDismiss;

  $rect <670,170,860,210>
  object Core::Timer CountDownTimer
  {
    preset OnTrigger = UpdateCountDownTimeSlot;
  }

  $rect <670,210,870,250>
  slot UpdateCountDownTimeSlot
  {
    if( null != ButtonSet && CountDownTime > 0 )
    {
      CountDownTime--;
      ButtonSet.DownButtonTitle = Strings::GEN_NO + " (" + string( CountDownTime ) + ")";
      InvalidateViewState();
    }
    else
    {
      CountDownTimer.Enabled = false;
      CountDownTime = 10;
      signal OnNoActivatedSlot;
    }
  }

  $rect <10,380,210,420>
  var Menu::UpDownPushButtonSet ButtonSet;

  $rect <10,430,210,470>
  var int32 CountDownTime = 10;

  $rect <340,330,550,370>
  slot OnNoActivatedSlot
  {
    DeviceInterface::NavigationDevice.SendSelectedDialog( Enum::NaviButtonType.NO );
    Owner.DismissDialog( this, null, null, null, null, null, false );
    signal OnDialogDismiss;
  }
}

$rect <720,30,920,70>
$output false
const rect TIMETEXT_W_NAVI_BOUNDS = <22,2,84,33>;

$rect <720,70,920,110>
$output false
const rect NAVIFLAG_W_NAVI_BOUNDS = <0,6,20,28>;

$rect <720,150,920,190>
$output false
const rect ZOOMIN_W_NAVI_BOUNDS = <130,122,170,162>;

$rect <720,200,920,240>
$output false
const rect ZOOMOUT_W_NAVI_BOUNDS = <130,170,170,210>;

$rect <720,250,920,290>
$output false
const rect ZOOMIN_WO_NAVI_BOUNDS = <9,122,49,162>;

$rect <720,300,920,340>
$output false
const rect ZOOMOUT_WO_NAVI_BOUNDS = <9,170,49,210>;

$rect <930,150,1130,190>
$output false
const rect CURRENT_ROAD_W_NAVI_BOUNDS = <140,228,470,259>;

$rect <930,200,1130,240>
$output false
const rect CURRENT_ROAD_WO_NAVI_BOUNDS = <10,228,470,259>;

$rect <930,250,1130,290>
$output false
const rect ROAD_BG_W_NAVI_BOUNDS = <130,226,480,272>;

$rect <930,300,1130,340>
$output false
const rect ROAD_BG_WO_NAVI_BOUNDS = <0,226,480,272>;

$rect <930,30,1130,70>
$output false
const rect ROADNAME_W_NAVI_BOUNDS = <24,0,330,31>;

$rect <930,70,1130,110>
$output false
const rect ROADNAME_WO_NAVI_BOUNDS = <24,0,460,31>;

$rect <1150,30,1350,70>
$output false
const rect CURRENT_ROAD_SHRINK_ALERT = <134,228,310,259>;

$rect <1150,70,1350,110>
$output false
const rect ALERT_MESSAGE_BOUNDS = <0,0,405,46>;

$rect <500,70,700,110>
$output false
class TbtListMenu : Core::Group
{
  $rect <10,250,210,290>
  inherited property Bounds = <0,0,480,236>;

  $rect <20,300,220,340>
  inherited method UpdateViewState()
  {
    super( aState );
    // set arrow scroll bar
    if( ArrowScrollBarVisible )
    {
      var int32 NoOfPages = NoOfItems / 3;
      if( NoOfItems > ( NoOfPages * 3 ) )
      {
        NoOfPages++;
      }
      ArrowScrollBar.NoOfPages = NoOfPages;
    }
  }

  $rect <20,20,160,60>
  object Core::VerticalList VerticalList
  {
    preset Bounds = <0,2,444,224>;
    preset OnLoadItem = OnLoadItem;
    preset SelectedItem = 0;
    preset ItemHeight = Menu::ItemHeightTall;
    preset ItemClass = Navigation::TbtInfoItem;
  }

  // This method is called by 'VerticalList' every time the list loads or updates \
  // an item.
  $rect <560,50,760,90>
  slot OnLoadItem
  {
    var Navigation::TbtInfoItem item = ( Navigation::TbtInfoItem )VerticalList.View;
    if( item != null )
    {
      var DeviceInterface::NaviTbtDataClass NaviTbtData = DeviceInterface::NavigationDevice.GetNaviTbtData( VerticalList.Item );

      ShowTbtListItemIcon( NaviTbtData.IconIdx );

      item.NextTurnDistUnit.String = NaviTbtData.DistUnit;

      if( 0.0 == NaviTbtData.Distance.fract )
      {
        item.NextTurnDist.String = string( (int32)NaviTbtData.Distance );
      }
      else
      {
        item.NextTurnDist.String = string( NaviTbtData.Distance, 0 , 1 );
      }
      item.NextTurnDescription.String = NaviTbtData.TbtDescription;

      item.TbtItemBg.Visible = false;
      if( 0 == VerticalList.Item )
      {
        item.TbtItemBg.Visible = true;
      }

      item.Bounds.size = point( VerticalList.Bounds.w, VerticalList.ItemHeight );
    }
  }

  $rect <560,130,760,170>
  method void ScrollUp()
  {
    var int32 PrevItemIdx = VerticalList.SelectedItem - 3;
    if( PrevItemIdx >= 0 )
    {
      VerticalList.SelectedItem = PrevItemIdx;
      SwitchToPageOfSelectedItem();
    }
  }

  $rect <560,180,760,220>
  method void ScrollDown()
  {
    var int32 NextItemIdx = VerticalList.SelectedItem + 3;
    if( NextItemIdx < VerticalList.NoOfItems )
    {
      VerticalList.SelectedItem = NextItemIdx;
      SwitchToPageOfSelectedItem();
    }
  }

  $rect <810,110,1010,150>
  method void ShowTbtListItemIcon( arg int32 index )
  {
    var Navigation::TbtInfoItem item = ( Navigation::TbtInfoItem )VerticalList.View;
    if( item != null )
    {
      var Enum::NaviTurnStatusType NaviTurnStatus = ( Enum::NaviTurnStatusType ) index;
      switch( NaviTurnStatus )
      {
        case Enum::NaviTurnStatusType.ARRVIAL_LEFT: item.NextTurnIcon.Bitmap = Resource::NaviTurnArrwArvngLIrg28;
        case Enum::NaviTurnStatusType.ARRIVAL_RIGHT: item.NextTurnIcon.Bitmap = Resource::NaviTurnArrwArvngRIrg28;
        case Enum::NaviTurnStatusType.ARRIVAL_VIA_LEFT: item.NextTurnIcon.Bitmap = Resource::NaviTurnArrwArvngViaLIrg28;
        case Enum::NaviTurnStatusType.ARRIVAL_VIA_RIGHT: item.NextTurnIcon.Bitmap = Resource::NaviTurnArrwArvngViaRIrg28;
        case Enum::NaviTurnStatusType.CONTINUE: item.NextTurnIcon.Bitmap = Resource::NaviTurnArrwContinuelrg28;
        case Enum::NaviTurnStatusType.DRIVETO: item.NextTurnIcon.Bitmap = Resource::NaviTurnArrwDriveTolrg28;
        case Enum::NaviTurnStatusType.DEST_FLAG: item.NextTurnIcon.Bitmap = Resource::NaviTurnArrwDstntnFlgIrg28;
        case Enum::NaviTurnStatusType.DEST_VIA_FLAG: item.NextTurnIcon.Bitmap = Resource::NaviTurnArrwViaflgIrg28;
        case Enum::NaviTurnStatusType.EXIT_LEFT: item.NextTurnIcon.Bitmap = Resource::NaviTurnArrwExitLIrg28;
        case Enum::NaviTurnStatusType.EXIT_RIGHT: item.NextTurnIcon.Bitmap = Resource::NaviTurnArrwExitRIrg28;
        case Enum::NaviTurnStatusType.FERRY: item.NextTurnIcon.Bitmap = Resource::NaviTurnArrwFerryIrg28;
        case Enum::NaviTurnStatusType.KEEP_LEFT: item.NextTurnIcon.Bitmap = Resource::NaviTurnArrwKeepLIrg28;
        case Enum::NaviTurnStatusType.KEEP_RIGHT: item.NextTurnIcon.Bitmap = Resource::NaviTurnArrwKeepRIrg28;
        case Enum::NaviTurnStatusType.ROUNDABOUT_45: item.NextTurnIcon.Bitmap = Resource::NaviTurnArrwRoundabout45Irg28;
        case Enum::NaviTurnStatusType.ROUNDABOUT_90: item.NextTurnIcon.Bitmap = Resource::NaviTurnArrwRoundabout90Irg28;
        case Enum::NaviTurnStatusType.ROUNDABOUT_135: item.NextTurnIcon.Bitmap = Resource::NaviTurnArrwRoundabout135Irg28;
        case Enum::NaviTurnStatusType.ROUNDABOUT_180: item.NextTurnIcon.Bitmap = Resource::NaviTurnArrwRoundabout180Irg28;
        case Enum::NaviTurnStatusType.ROUNDABOUT_225: item.NextTurnIcon.Bitmap = Resource::NaviTurnArrwRoundabout225Irg28;
        case Enum::NaviTurnStatusType.ROUNDABOUT_270: item.NextTurnIcon.Bitmap = Resource::NaviTurnArrwRoundabout270Irg28;
        case Enum::NaviTurnStatusType.ROUNDABOUT_315: item.NextTurnIcon.Bitmap = Resource::NaviTurnArrwRoundabout315Irg28;
        case Enum::NaviTurnStatusType.ROUNDABOUT_360: item.NextTurnIcon.Bitmap = Resource::NaviTurnArrwRoundabout360Irg28;
        case Enum::NaviTurnStatusType.ROUNDABOUT_EU_45: item.NextTurnIcon.Bitmap = Resource::NaviTurnArrwRoundaboutEuro45Irg28;
        case Enum::NaviTurnStatusType.ROUNDABOUT_EU_90: item.NextTurnIcon.Bitmap = Resource::NaviTurnArrwRoundaboutEuro90Irg28;
        case Enum::NaviTurnStatusType.ROUNDABOUT_EU_135: item.NextTurnIcon.Bitmap = Resource::NaviTurnArrwRoundaboutEuro135Irg28;
        case Enum::NaviTurnStatusType.ROUNDABOUT_EU_180: item.NextTurnIcon.Bitmap = Resource::NaviTurnArrwRoundaboutEuro180Irg28;
        case Enum::NaviTurnStatusType.ROUNDABOUT_EU_225: item.NextTurnIcon.Bitmap = Resource::NaviTurnArrwRoundaboutEuro225Irg28;
        case Enum::NaviTurnStatusType.ROUNDABOUT_EU_270: item.NextTurnIcon.Bitmap = Resource::NaviTurnArrwRoundaboutEuro270Irg28;
        case Enum::NaviTurnStatusType.ROUNDABOUT_EU_315: item.NextTurnIcon.Bitmap = Resource::NaviTurnArrwRoundaboutEuro315Irg28;
        case Enum::NaviTurnStatusType.ROUNDABOUT_EU_360: item.NextTurnIcon.Bitmap = Resource::NaviTurnArrwRoundaboutEuro360Irg28;
        case Enum::NaviTurnStatusType.ROUNDABOUT_EU_GEN: item.NextTurnIcon.Bitmap = Resource::NaviTurnArrwRoundaboutEuroGenericIrg28;
        case Enum::NaviTurnStatusType.ROUNDABOUT_GEN: item.NextTurnIcon.Bitmap = Resource::NaviTurnArrwRoundaboutGenericIrg28;
        case Enum::NaviTurnStatusType.SHARP_TURN_LEFT: item.NextTurnIcon.Bitmap = Resource::NaviTurnArrwShrpturnLIrg28;
        case Enum::NaviTurnStatusType.SHARP_TURN_RIGHT: item.NextTurnIcon.Bitmap = Resource::NaviTurnArrwShrpturnRIrg28;
        case Enum::NaviTurnStatusType.TURN_LEFT: item.NextTurnIcon.Bitmap = Resource::NaviTurnArrwTurnLIrg28;
        case Enum::NaviTurnStatusType.TURN_RIGHT: item.NextTurnIcon.Bitmap = Resource::NaviTurnArrwTurnRIrg28;
        case Enum::NaviTurnStatusType.UTURN_LEFT: item.NextTurnIcon.Bitmap = Resource::NaviTurnArrwUturnLIrg28;
        case Enum::NaviTurnStatusType.UTURN_RIGHT: item.NextTurnIcon.Bitmap = Resource::NaviTurnArrwUturnRIrg28;
        case Enum::NaviTurnStatusType.EXIT_UNSPEC: item.NextTurnIcon.Bitmap = null;
        default:;
      }
    }
  }

  $rect <10,420,210,460>
  method void InvalidateItems( arg int32 aStart, arg int32 aEnd )
  {
    VerticalList.InvalidateItems( aStart, aEnd );
  }

  $rect <260,260,460,300>
  property int32 NoOfItems = 0;

  $rect <260,300,460,340>
  onset NoOfItems
  {
    if( pure NoOfItems != value )
    {
      pure NoOfItems = value;
      VerticalList.NoOfItems = value;

      // move focus to the item before the last item when the last item is deleted
      if( 0 < VerticalList.NoOfItems &&
          VerticalList.SelectedItem >= VerticalList.NoOfItems )
      {
        VerticalList.SelectedItem = VerticalList.NoOfItems - 1;
        SwitchToPageOfSelectedItem();
      }

      InvalidateViewState();
    }
  }

  $rect <20,20,160,60>
  object Menu::ArrowScrollBar ArrowScrollBar
  {
    preset Bounds = <441,5,473,221>;
    preset Visible = false;
  }

  $rect <270,350,510,390>
  property bool ArrowScrollBarVisible = false;

  $rect <270,390,510,430>
  onset ArrowScrollBarVisible
  {
    if( pure ArrowScrollBarVisible != value )
    {
      pure ArrowScrollBarVisible = value;
      ArrowScrollBar.Visible = value;
    }
  }

  $rect <800,280,1050,320>
  slot OnPageScrolledSlot
  {
    if( ArrowScrollBarVisible )
    {
      var int32 PageIdxOfSelectedItem = VerticalList.SelectedItem / 3;
      ArrowScrollBar.CurrentPageIdx = PageIdxOfSelectedItem;
    }
  }

  $rect <800,240,1050,280>
  object Effects::Int32Effect PageScrollEffect
  {
    preset OnFinished = OnPageScrolledSlot;
    preset Exponent = 4.19;
    preset Timing = Effects::Timing.Exp_Out;
    preset NoOfCycles = 1;
    preset CycleDuration = 200;
    preset InitialDelay = 50;
    preset Outlet = ^VerticalList.ScrollOffset;
  }

  $rect <810,170,1060,210>
  method void SwitchToPageOfSelectedItem()
  {
    var int32 CurrentPageIdx = ( -1 ) * VerticalList.ScrollOffset / VerticalList.Bounds.h;
    var int32 PageIdxOfSelectedItem = VerticalList.SelectedItem / 3;

    if( CurrentPageIdx != PageIdxOfSelectedItem )
    {
      PageScrollEffect.Value1 = VerticalList.ScrollOffset;
      PageScrollEffect.Value2 = ( -1 ) * PageIdxOfSelectedItem * VerticalList.Bounds.h;
      PageScrollEffect.Enabled = true;
    }
  }
}

$rect <720,360,920,400>
$output false
const string DISTANCE_UNIT_MILE = "mi";

$rect <720,430,920,470>
$output false
const int32 DAY_MODE = 1;

$rect <720,480,920,520>
$output false
const int32 NIGHT_MODE = 2;
