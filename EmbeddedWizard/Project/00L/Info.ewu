$version 11.00

$rect <10,10,280,50>
$output false
class INF01_MeterDisplaySettingMenu : Menu::BaseMenuView
{
  $rect <0,290,180,330>
  inherited method Init()
  {
    trace "Init INF01";
  }

  $rect <220,290,400,330>
  inherited method UpdateViewState()
  {
    super( aState );

    // disable slide-out effect if this menu is presented from Home
    if( aState.contains( Core::ViewState[Visible] ) )
    {
      var Home::BaseHome HomeDialog = ( Home::BaseHome )Owner;
      if( null != HomeDialog )
      {
        SlideOutEffectEnabled = false;
      }
    }
  }

  $rect <0,340,200,380>
  inherited var SlideOutEffectEnabled = true;

  $rect <510,20,710,60>
  inherited method LoadItemClass()
  {
    // suppress warning
    if( aItemNo )
    {
      // empty body
    }
    return Menu::ItemCheckMark;
  }

  $rect <510,70,710,110>
  inherited method LoadItemTitle()
  {
    var string title = "";
    if( aItemNo < ItemTitleArray.size )
      {
      title = ItemTitleArray[aItemNo];
      }
    return title;
  }

  $rect <510,170,710,210>
  inherited method OnItemActivate()
  {
    if( null == aMenuItem )
    {
      // empty body to suppress warning
    }

    SelectedHomeType = Enum::HomeType.TOTAL;
    switch( aItemNo )
    {
      case 0:
      {
        DeviceInterface::VehicleDevice.CurrentMeterDisplay = Enum::MeterDisplay.TACHOMETER;
        SelectedHomeType = Enum::HomeType.TACHO_VISUALIZER;
      }
      case 1:
      {
        DeviceInterface::VehicleDevice.CurrentMeterDisplay = Enum::MeterDisplay.ECHO_METER;
        SelectedHomeType = Enum::HomeType.ECO_VISUALIZER;
      }
      case 2:
      {
        DeviceInterface::VehicleDevice.CurrentMeterDisplay = Enum::MeterDisplay.SPEED_METER;
        SelectedHomeType = Enum::HomeType.SPEED_VISUALIZER;
      }
      default:;
    }

    Menu.InvalidateItems( 0, Menu.NoOfItems - 1 );
    CheckMarkUpdateTimer.Enabled = true;
  }

  $rect <510,120,710,160>
  inherited method LoadItemChecked()
  {
    var bool checked = false;
    switch( aItemNo )
    {
      case 0:
      {
        if( Enum::MeterDisplay.TACHOMETER == DeviceInterface::VehicleDevice.CurrentMeterDisplay )
        {
          checked = true;
        }
      }
      case 1:
      {
        if( Enum::MeterDisplay.ECHO_METER == DeviceInterface::VehicleDevice.CurrentMeterDisplay )
        {
          checked = true;
        }
      }
      case 2:
      {
        if( Enum::MeterDisplay.SPEED_METER == DeviceInterface::VehicleDevice.CurrentMeterDisplay )
        {
          checked = true;
        }
      }
      default:;
    }

    return checked;
  }

  $rect <20,20,160,60>
  inherited object Menu
  {
    preset NoOfItems = 3;
  }

  $rect <730,70,930,110>
  array string ItemTitleArray[ 3 ] =
  (
    Default[0] = Strings::INF01_TACHO_VISUALIZER;
    Default[1] = Strings::INF01_ECHO_VISUALIZER;
    Default[2] = Strings::INF01_SPEED_VISUALIZER;
  );

  $rect <510,270,730,310>
  object Core::Timer CheckMarkUpdateTimer
  {
    preset OnTrigger = OnCheckMarkUpdateSlot;
    preset Period = 0;
    preset Begin = Menu::DELAY_TIME_CHECKMARK;
  }

  $rect <510,320,730,360>
  slot OnCheckMarkUpdateSlot
  {
    if( SelectedHomeType != Enum::HomeType.TOTAL )
    {
      var Application::Application App = ( Application::Application )GetRoot();
      if( null != App )
      {
        App.SwitchToHome( SelectedHomeType );
      }
    }
  }

  $rect <510,220,730,260>
  var Enum::HomeType SelectedHomeType;
}

$rect <10,60,280,100>
$output false
class INF26_ODO_TRIP_SettingMenu : Menu::BaseMenuView
{
  $rect <0,290,200,330>
  inherited method Init()
  {
    trace "Init INF26";

    SetNoOfMenuItems();
    GetMileageSetting();
    GetSelectedOdoTrip();
  }

  $rect <510,20,710,60>
  inherited method LoadItemClass()
  {
    aItemNo; //suppress warning
    return Menu::ItemValueUnitCheckmark;
  }

  $rect <510,70,710,110>
  inherited method LoadItemTitle()
  {
    var string Title = "";
    switch( SupportedSetting[aItemNo] )
    {
      case Enum::MeterInfo.ODO: Title = Strings::INF26_ODO;
      case Enum::MeterInfo.TRIP1: Title = Strings::INF26_TRIP_1;
      case Enum::MeterInfo.TRIP2: Title = Strings::INF26_TRIP_2;
      case Enum::MeterInfo.TRIP_F: Title = Strings::INF26_TRIP_F;
      default:;
    }
    return Title;
  }

  $rect <510,320,710,360>
  inherited method OnItemActivate()
  {
    aMenuItem; // suppress warning

    if( SelectedItem == SupportedSetting[aItemNo] )
    {
      CheckMarkUpdateTimer.Enabled = true;
    }
    else
    {
      IsWaitingForResponse = true;
      DeviceInterface::VehicleDevice.SetData( Enum::VehicleTxType.CHG_METER_INFO, (uint32)SupportedSetting[aItemNo] );
    }
  }

  $rect <510,120,710,160>
  inherited method LoadItemChecked()
  {
    var bool checked = false;
    if( SelectedItem == SupportedSetting[aItemNo] )
    {
      checked = true;
    }
    return checked;
  }

  $rect <510,270,710,310>
  inherited method LoadItemEnabled()
  {
    var bool ItemEnabled = true;
    if( Enum::MeterInfo.TRIP_F == SupportedSetting[aItemNo] )
    {
      var DeviceInterface::VehicleDataClass VehicleData = DeviceInterface::VehicleDevice.GetData( Enum::VehicleRxType.LOW_FUEL_WARNING );
      if( VehicleData.Valid )
      {
        // enabled TRIP-F only when the low fuel warning is on.
        // (disable TRIP-F when the low fuel warning is off.)
        if( false == (bool)VehicleData.DataUInt32 )
        {
          ItemEnabled = false;
        }
      }
    }
    return ItemEnabled;
  }

  $rect <20,20,160,60>
  inherited object Menu
  {
    preset ItemHeight = Menu::ItemHeightSmall;
    preset ItemNumPerPage = 4;
  }

  $rect <510,220,710,260>
  inherited method LoadItemUnit()
  {
    aItemNo; // suppress warning

    var string UnitString;
    switch( MileageSetting )
    {
      case Enum::MileageSettingItem.KM: UnitString = Strings::UNT02_UNIT_MILEAGE_KILOMETER;
      case Enum::MileageSettingItem.MILE: UnitString = Strings::UNT02_UNIT_MILEAGE_MILE;
      default:;
    }

    return UnitString;
  }

  $rect <510,170,710,210>
  inherited method LoadItemValue()
  {
    var string Value;
    var DeviceInterface::VehicleDataClass VehicleData;
    var int32 NumOfDecimalDigits = 1;

    // get value
    switch( SupportedSetting[aItemNo] )
    {
      case Enum::MeterInfo.ODO: VehicleData = DeviceInterface::VehicleDevice.GetData( Enum::VehicleRxType.ODOMETER_VALUE );
      case Enum::MeterInfo.TRIP1: VehicleData = DeviceInterface::VehicleDevice.GetData( Enum::VehicleRxType.TRIP1_VALUE );
      case Enum::MeterInfo.TRIP2: VehicleData = DeviceInterface::VehicleDevice.GetData( Enum::VehicleRxType.TRIP2_VALUE );
      case Enum::MeterInfo.TRIP_F:
      {
        // display value of TRIP-F when low fuel warning is on, otherwise, display "---"
        if( DeviceInterface::VehicleDevice.LowFuelWarning )
        {
          VehicleData = DeviceInterface::VehicleDevice.GetData( Enum::VehicleRxType.TRIP_F_VALUE );
        }
        else
        {
          VehicleData = new DeviceInterface::VehicleDataClass;
          VehicleData.Valid = false;
        }
      }
      default: VehicleData.Valid = false;
    }

    // set display limit and format
    if( VehicleData.Valid )
    {
      if( Enum::MileageSettingItem.MILE == MileageSetting )
      {
        VehicleData.DataFloat *= Unit::KM_TO_MILE_SCALE;
      }

      switch( SupportedSetting[aItemNo] )
      {
        case Enum::MeterInfo.ODO:
        {
          VehicleData.DataFloat = DeviceInterface::VehicleDevice.ClampDataFloat( VehicleData.DataFloat, 0, Settings::MAX_METER_ODO );
          NumOfDecimalDigits = 0;
        }
        case Enum::MeterInfo.TRIP1: VehicleData.DataFloat = DeviceInterface::VehicleDevice.ClampDataFloat( VehicleData.DataFloat, 0, Settings::MAX_METER_TRIP_1 );
        case Enum::MeterInfo.TRIP2: VehicleData.DataFloat = DeviceInterface::VehicleDevice.ClampDataFloat( VehicleData.DataFloat, 0, Settings::MAX_METER_TRIP_2 );
        case Enum::MeterInfo.TRIP_F: VehicleData.DataFloat = DeviceInterface::VehicleDevice.ClampDataFloat( VehicleData.DataFloat, 0, Settings::MAX_METER_TRIP_F );
        default:;
      }

      Value = string( VehicleData.DataFloat, 0, NumOfDecimalDigits );
    }
    else
    {
      Value = Strings::GEN_THREE_HYPHENS;
    }

    return Value;
  }

  $rect <510,370,760,410>
  inherited method OnItemLongEnterKeyActivate()
  {
    aMenuItem; // suppress warning

    if( Enum::MeterInfo.TRIP1 == SupportedSetting[aItemNo] ||
        Enum::MeterInfo.TRIP2 == SupportedSetting[aItemNo] ||
        Enum::MeterInfo.TRIP_F == SupportedSetting[aItemNo] )
    {
      var Pop::POP04_Reset ResetDialog = new Pop::POP04_Reset;
      ResetDialog.SelectedMeterInfo = SupportedSetting[aItemNo];
      PresentDialog( ResetDialog, null, null, null, null, null, null, null, null, false );
    }
  }

  $rect <220,340,440,380>
  object Core::Timer CheckMarkUpdateTimer
  {
    preset OnTrigger = OnCheckMarkUpdateSlot;
    preset Period = 0;
    preset Begin = Menu::DELAY_TIME_CHECKMARK;
  }

  $rect <220,390,440,430>
  slot OnCheckMarkUpdateSlot
  {
    DismissThisDialog();
  }

  $rect <720,70,920,110>
  array Enum::MeterInfo SupportedSetting[ 4 ];

  $rect <0,390,200,430>
  method void GetMileageSetting()
  {
    var DeviceInterface::VehicleDataClass VehicleData = DeviceInterface::VehicleDevice.GetData( Enum::VehicleRxType.MILEAGE_UNIT );
    if( Enum::MileageSettingItem.MILE == VehicleData.DataUInt32 )
    {
      MileageSetting = Enum::MileageSettingItem.MILE;
    }
    else
    {
      MileageSetting = Enum::MileageSettingItem.KM;
    }
  }

  $rect <0,440,200,480>
  var Enum::MileageSettingItem MileageSetting;

  $rect <0,340,200,380>
  method void SetNoOfMenuItems()
  {
    var int32 i;
    var int32 NoOfItems;
    var Enum::MeterInfo SettingItem;

    for( i = 0; i < AllSettings.size; i++ )
    {
      SettingItem = AllSettings[i];
      switch( SettingItem )
      {
        case Enum::MeterInfo.TRIP1:
        {
          if( DeviceInterface::VehicleDevice.IsVehicleFunctionSupported( Enum::VehicleSupportedFunction.TRIP1 ) )
          {
            SupportedSetting[NoOfItems] = SettingItem;
            NoOfItems++;
          }
        }
        case Enum::MeterInfo.TRIP2:
        {
          if( DeviceInterface::VehicleDevice.IsVehicleFunctionSupported( Enum::VehicleSupportedFunction.TRIP2 ) )
          {
            SupportedSetting[NoOfItems] = SettingItem;
            NoOfItems++;
          }
        }
        case Enum::MeterInfo.TRIP_F:
        {
          if( DeviceInterface::VehicleDevice.IsVehicleFunctionSupported( Enum::VehicleSupportedFunction.F_TRIP ) )
          {
            SupportedSetting[NoOfItems] = SettingItem;
            NoOfItems++;
          }
        }
        default:
        {
          SupportedSetting[NoOfItems] = SettingItem;
          NoOfItems++;
        }
      }
    }

    Menu.NoOfItems = NoOfItems;
  }

  $rect <0,490,200,530>
  method void GetSelectedOdoTrip()
  {
    var DeviceInterface::VehicleDataClass VehicleData = DeviceInterface::VehicleDevice.GetData( Enum::VehicleRxType.ODO_TRIP_DISPLAY );
    if( (int32)Enum::OdoTripSettingItem.TOTAL > VehicleData.DataUInt32 )
    {
      var Enum::OdoTripSettingItem SettingItem = (Enum::OdoTripSettingItem)VehicleData.DataUInt32;
      switch( SettingItem )
      {
        case Enum::OdoTripSettingItem.ODO: SelectedItem = Enum::MeterInfo.ODO;
        case Enum::OdoTripSettingItem.TRIP1: SelectedItem = Enum::MeterInfo.TRIP1;
        case Enum::OdoTripSettingItem.TRIP2: SelectedItem = Enum::MeterInfo.TRIP2;
        case Enum::OdoTripSettingItem.TRIP_F: SelectedItem = Enum::MeterInfo.TRIP_F;
        default:;
      }
    }
  }

  $rect <0,540,200,580>
  var Enum::MeterInfo SelectedItem = Enum::MeterInfo.TOTAL;

  $rect <220,440,440,480>
  var bool IsWaitingForResponse;

  $rect <220,490,500,530>
  object Core::SystemEventHandler VehicleDataReceivedEventHandler
  {
    preset OnEvent = OnVehicleDataReceivedSlot;
    preset Event = DeviceInterface::VehicleDevice.VehicleDataReceivedSystemEvent;
  }

  // This slot method is executed when the associated system event handler 'SystemEventHandler' \
  // receives an event.
  $rect <220,540,480,580>
  slot OnVehicleDataReceivedSlot
  {
    var DeviceInterface::VehicleDataClass VehicleData = (DeviceInterface::VehicleDataClass)VehicleDataReceivedEventHandler.Context;
    if( null != VehicleData )
    {
      switch( VehicleData.RxType )
      {
        case Enum::VehicleRxType.ODO_TRIP_DISPLAY:
        {
          if( IsWaitingForResponse )
          {
            GetSelectedOdoTrip();
            Menu.InvalidateItems( 0, Menu.NoOfItems - 1 );
            CheckMarkUpdateTimer.Enabled = true;
          }
        }
        case Enum::VehicleRxType.ODOMETER_VALUE,
             Enum::VehicleRxType.TRIP1_VALUE,
             Enum::VehicleRxType.TRIP2_VALUE,
             Enum::VehicleRxType.TRIP_F_VALUE,
             Enum::VehicleRxType.LOW_FUEL_WARNING:
        {
          Menu.InvalidateItems( 0, Menu.NoOfItems - 1 );
        }
        default:;
      }
    }
  }

  $rect <940,70,1140,110>
  array Enum::MeterInfo AllSettings[ 4 ] =
  (
    Default[0] = Enum::MeterInfo.ODO;
    Default[1] = Enum::MeterInfo.TRIP1;
    Default[2] = Enum::MeterInfo.TRIP2;
    Default[3] = Enum::MeterInfo.TRIP_F;
  );
}
