$version 10.00

$rect <20,20,260,60>
$output false
class BaseComponent : Core::Group
{
  $rect <40,57,240,97>
  object Core::KeyPressHandler KeyHandler
  {
    preset OnRelease = OnKeyReleaseSlot;
    preset OnPress = OnKeyPressSlot;
    preset OnHold = OnKeyHoldSlot;
  }

  $rect <40,110,240,150>
  slot OnKeyPressSlot
  {
    trace "OnKeyPressSlot", KeyHandler.Code;
    switch( KeyHandler.Code )
    {
      case Core::KeyCode.Up:
      {
        if( PassUpKey )
        {
          KeyHandler.Continue = true;
        }
        else
        {
          if( Enum::KeyTriggerMode.ON == UpKeyTriggerMode )
          {
            OnShortUpKeyActivated();
          }
        }
      }
      case Core::KeyCode.Down:
      {
        if( PassDownKey )
        {
          KeyHandler.Continue = true;
        }
        else
        {
          if( Enum::KeyTriggerMode.ON == DownKeyTriggerMode )
          {
            OnShortDownKeyActivated();
          }
        }
      }
      case Core::KeyCode.Ok:
      {
        if( PassEnterKey )
        {
          KeyHandler.Continue = true;
        }
        else
        {
          if( Enum::KeyTriggerMode.ON == EnterKeyTriggerMode )
          {
            OnShortEnterKeyActivated();
          }
        }
      }
      case Core::KeyCode.Home:
      {
        if( PassHomeKey )
        {
          KeyHandler.Continue = true;
        }
        else
        {
          if( Enum::KeyTriggerMode.ON == HomeKeyTriggerMode )
          {
            OnShortHomeKeyActivated();
          }
        }
      }
      default:;
    }
  }

  $rect <40,160,240,200>
  slot OnKeyHoldSlot
  {
    trace "OnKeyHoldSlot", KeyHandler.Code;
    switch( KeyHandler.Code )
    {
      case Core::KeyCode.Up: OnLongUpKeyActivated();
      case Core::KeyCode.Down: OnLongDownKeyActivated();
      case Core::KeyCode.Ok: OnLongEnterKeyActivated();
      case Core::KeyCode.Home: OnLongHomeKeyActivated();
      default:;
    }
  }

  $rect <40,210,240,250>
  slot OnKeyReleaseSlot
  {
    trace "OnKeyReleaseSlot", KeyHandler.Code;
    trace "classof this: ", classof this;
    if( !KeyHandler.Repetition )
    {
      switch( KeyHandler.Code )
      {
        case Core::KeyCode.Up:
        {
          if( Enum::KeyTriggerMode.OFF == UpKeyTriggerMode )
          {
            OnShortUpKeyActivated();
          }
        }
        case Core::KeyCode.Down:
        {
          if( Enum::KeyTriggerMode.OFF == DownKeyTriggerMode )
          {
            OnShortDownKeyActivated();
          }
        }
        case Core::KeyCode.Ok:
        {
          if( Enum::KeyTriggerMode.OFF == EnterKeyTriggerMode )
          {
            OnShortEnterKeyActivated();
          }
        }
        case Core::KeyCode.Home:
        {
          if( Enum::KeyTriggerMode.OFF == HomeKeyTriggerMode )
          {
            OnShortHomeKeyActivated();
          }
        }
        default:;
      }
    }
  }

  $rect <260,110,490,150>
  method void OnShortDownKeyActivated()
  {
  }

  $rect <260,60,490,100>
  method void OnShortUpKeyActivated()
  {
  }

  $rect <260,160,490,200>
  method void OnShortEnterKeyActivated()
  {
  }

  $rect <50,430,260,470>
  slot OnSlideEffectCompletedSlot
  {
    IsSlideEffectPresenting = false;
  }

  $rect <280,430,490,470>
  var bool IsSlideEffectPresenting = false;

  // Key Handle
  note group Note5
  {
    attr Bounds = <20,10,1230,280>;
  }

  // Slide Effect
  note group Note6
  {
    attr Bounds = <20,320,730,490>;
  }

  $rect <50,370,250,410>
  method void SlideInDialog( arg Core::Group aView )
  {
    if( null != aView &&
        IsCurrentDialog() &&
        false == IsSlideEffectPresenting )
    {
      IsSlideEffectPresenting = true;
      PresentDialog( aView, Effect::LeftSlideTransition, null, null, null, null, null, OnSlideEffectCompletedSlot, null, false );
    }



  }

  $rect <280,370,480,410>
  method void SlideOutDialog( arg Core::Group aView )
  {
    if( null != aView &&
        false == IsSlideEffectPresenting )
    {
      IsSlideEffectPresenting = true;
      Owner.DismissDialog( this, Effect::RightSlideTransition, null, null, OnSlideEffectCompletedSlot, null, false );
    }
  }

  $rect <260,210,490,250>
  method void OnShortHomeKeyActivated()
  {
  }

  $rect <770,60,970,100>
  property Enum::KeyTriggerMode UpKeyTriggerMode = Enum::KeyTriggerMode.ON;

  $rect <770,110,970,150>
  property Enum::KeyTriggerMode DownKeyTriggerMode = Enum::KeyTriggerMode.ON;

  $rect <770,160,970,200>
  property Enum::KeyTriggerMode EnterKeyTriggerMode = Enum::KeyTriggerMode.OFF;

  $rect <770,210,970,250>
  property Enum::KeyTriggerMode HomeKeyTriggerMode = Enum::KeyTriggerMode.OFF;

  $rect <510,110,740,150>
  method void OnLongDownKeyActivated()
  {
  }

  $rect <510,60,740,100>
  method void OnLongUpKeyActivated()
  {
  }

  $rect <510,160,740,200>
  method void OnLongEnterKeyActivated()
  {
  }

  $rect <510,210,740,250>
  method void OnLongHomeKeyActivated()
  {
  }

  $rect <990,60,1190,100>
  property bool PassUpKey = false;

  $rect <990,110,1190,150>
  property bool PassDownKey = false;

  $rect <991,160,1191,200>
  property bool PassHomeKey = false;

  $rect <990,210,1190,250>
  property bool PassEnterKey = false;
}

$rect <20,200,260,240>
$output false
class DisclaimerView : Components::BaseComponent
{
  $rect <10,290,210,330>
  inherited property Bounds = <0,0,480,272>;

  $rect <20,20,160,60>
  object Views::Rectangle Rectangle
  {
    preset Bounds = <0,0,480,272>;
    preset Color = #000000FF;
  }

  $rect <20,20,160,60>
  object Views::Text Text
  {
    preset Bounds = <10,51,470,206>;
    preset RowDistance = 31;
    preset WrapText = true;
    preset String = Strings::TOP01_disclaimer;
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton PushButton
  {
    preset Bounds = <150,200,330,260>;
    preset OnActivate = OnAcceptedSlot;
    preset Label = "Accept";
    preset Appearance = UIConfig::PushButtonConfig;
  }

  $rect <240,290,440,330>
  slot OnAcceptedSlot
  {
    signal OnYesClicked, this;
  }

  $rect <240,350,440,390>
  property slot OnYesClicked;

  $rect <20,20,160,60>
  object Views::Rectangle Rectangle1
  {
    preset Bounds = <0,0,480,32>;
    preset Color = #ED962BFF;
  }

  $rect <20,20,160,60>
  object Views::Image IconWarning
  {
    preset Bounds = <174,0,204,30>;
    preset Alignment = Views::ImageAlignment[AlignHorzCenter, AlignVertCenter, ScaleToFit];
    preset Bitmap = Resource::IconWarning;
    preset Visible = true;
  }

  $rect <20,20,160,60>
  object Views::Text WarningText
  {
    preset Bounds = <221,0,431,30>;
    preset Alignment = Views::TextAlignment[AlignHorzLeft, AlignVertCenter];
    preset String = "Warning";
    preset Font = Fonts::NotoSansCjkJpMedium28pt;
    preset Color = #000000FF;
    preset Visible = true;
  }
}

$rect <20,140,260,180>
$output false
class StatusBar : Core::Group
{
  $rect <0,70,200,110>
  inherited property Bounds = <0,0,480,32>;

  $rect <20,20,160,60>
  object Views::Rectangle Background
  {
    preset Bounds = <0,0,480,32>;
    preset Color = #000000FF;
  }

  $rect <20,20,160,60>
  object Views::Text TitleText
  {
    preset Bounds = <50,0,420,30>;
    preset Alignment = Views::TextAlignment[AlignHorzLeft, AlignVertCenter];
    preset String = "";
    preset Font = Fonts::NotoSansCjkJpMedium28pt;
  }

  $rect <20,20,160,60>
  object Views::Image Divider
  {
    preset Bounds = <0,30,480,32>;
    preset Alignment = Views::ImageAlignment[AlignVertBottom, ScaleToFit];
    preset Bitmap = Resource::ListDivider4;
  }

  $rect <20,20,160,60>
  object Views::Image IconWarning
  {
    preset Bounds = <174,0,204,30>;
    preset Alignment = Views::ImageAlignment[AlignHorzCenter, AlignVertCenter, ScaleToFit];
    preset Bitmap = Resource::IconWarning;
    preset Visible = false;
  }

  $rect <20,20,160,60>
  object Views::Text TimeText
  {
    preset Bounds = <2,0,80,30>;
    preset Alignment = Views::TextAlignment[AlignHorzLeft, AlignVertCenter];
    preset String = "";
    preset Font = Fonts::NotoSansCjkJpMedium28pt;
    preset Color = #FFFFFFFF;
    preset Visible = true;
  }

  $rect <220,120,510,160>
  slot OnUpdateLocalTimeSlot
  {
    var DeviceInterface::RtcTime CurrentTime = ( DeviceInterface::RtcTime )OnUpdateLocalTimeEventHandler.Context;
    if( null != CurrentTime )
    {
      TimeText.String = string( CurrentTime.Hour, 2 ) + ":" + string( CurrentTime.Minute, 2 );
    }
  }

  $rect <220,70,510,110>
  object Core::SystemEventHandler OnUpdateLocalTimeEventHandler
  {
    preset OnEvent = OnUpdateLocalTimeSlot;
    preset Event = DeviceInterface::SystemDevice.UpdateLocalTimeSystemEvent;
  }
}

$rect <60,70,300,110>
$output false
class BaseMainBG : Components::BaseComponent
{
  $rect <0,280,200,320>
  inherited property Bounds = <0,0,480,272>;

  $rect <20,20,160,60>
  object Views::Image MainBottomBG
  {
    preset Bounds = <0,182,480,272>;
    preset Bitmap = Resource::MainBG;
  }

  $rect <20,20,160,60>
  object Views::Rectangle BlackBG
  {
    preset Bounds = <0,32,480,182>;
    preset Color = #000000FF;
  }
}
