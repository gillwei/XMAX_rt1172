$version 10.00

$rect <20,20,260,60>
$output false
class BaseComponent : Core::Group
{
  $rect <40,57,240,97>
  object Core::KeyPressHandler KeyHandler
  {
    preset OnRelease = OnKeyReleaseSlot;
    preset OnPress = OnKeyPressSlot;
    preset OnHold = OnKeyHoldSlot;
  }

  $rect <40,110,240,150>
  slot OnKeyPressSlot
  {
    trace "key event to: ", classof this;
    switch( KeyHandler.Code )
    {
      case Core::KeyCode.Up:
      {
        if( PassUpKey )
        {
          KeyHandler.Continue = true;
        }
        else
        {
          if( ( Enum::KeyTriggerMode.ON == UpKeyTriggerMode ) && !IsDDModeEffected() )
          {
            OnShortUpKeyActivated();
          }
        }
      }
      case Core::KeyCode.Down:
      {
        if( PassDownKey )
        {
          KeyHandler.Continue = true;
        }
        else
        {
          if( ( Enum::KeyTriggerMode.ON == DownKeyTriggerMode ) && !IsDDModeEffected() )
          {
            OnShortDownKeyActivated();
          }
        }
      }
      case Core::KeyCode.Ok:
      {
        if( PassEnterKey )
        {
          KeyHandler.Continue = true;
        }
        else
        {
          if( ( Enum::KeyTriggerMode.ON == EnterKeyTriggerMode ) && !IsDDModeEffected() )
          {
            OnShortEnterKeyActivated();
          }
        }
      }
      case Core::KeyCode.Home:
      {
        if( PassHomeKey )
        {
          KeyHandler.Continue = true;
        }
        else
        {
          if( Enum::KeyTriggerMode.ON == HomeKeyTriggerMode )
          {
            OnShortHomeKeyActivated();
          }
        }
      }
      case Core::KeyCode.F9:
      {
        if( PassMagicKey )
        {
          KeyHandler.Continue = true;
        }
        else
        {
          OnShortMagicKeyActivated();
        }
      }
      default:;
    }
  }

  $rect <40,160,240,200>
  slot OnKeyHoldSlot
  {
    if( !IsDDModeEffected() )
    {
      switch( KeyHandler.Code )
      {
        case Core::KeyCode.Up: OnLongUpKeyActivated();
        case Core::KeyCode.Down: OnLongDownKeyActivated();
        case Core::KeyCode.Ok: OnLongEnterKeyActivated();
        case Core::KeyCode.Home: OnLongHomeKeyActivated();
        default:;
      }
    }
  }

  $rect <40,210,240,250>
  slot OnKeyReleaseSlot
  {
    if( !KeyHandler.Repetition )
    {
      switch( KeyHandler.Code )
      {
        case Core::KeyCode.Up:
        {
          if( ( Enum::KeyTriggerMode.OFF == UpKeyTriggerMode ) && !IsDDModeEffected() )
          {
            OnShortUpKeyActivated();
          }
        }
        case Core::KeyCode.Down:
        {
          if( ( Enum::KeyTriggerMode.OFF == DownKeyTriggerMode ) && !IsDDModeEffected() )
          {
            OnShortDownKeyActivated();
          }
        }
        case Core::KeyCode.Ok:
        {
          if( ( Enum::KeyTriggerMode.OFF == EnterKeyTriggerMode ) && !IsDDModeEffected() )
          {
            OnShortEnterKeyActivated();
          }
        }
        case Core::KeyCode.Home:
        {
          if( Enum::KeyTriggerMode.OFF == HomeKeyTriggerMode )
          {
            OnShortHomeKeyActivated();
          }
        }
        default:;
      }
    }
  }

  $rect <260,110,490,150>
  method void OnShortDownKeyActivated()
  {
  }

  $rect <260,60,490,100>
  method void OnShortUpKeyActivated()
  {
  }

  $rect <260,160,490,200>
  method void OnShortEnterKeyActivated()
  {
  }

  $rect <50,480,260,520>
  slot OnSlideEffectCompletedSlot
  {
    IsSlideEffectPresenting = false;
  }

  $rect <280,480,490,520>
  var bool IsSlideEffectPresenting = false;

  // Key Handle
  note group Note5
  {
    attr Bounds = <20,10,1230,320>;
  }

  // Slide Effect
  note group Note6
  {
    attr Bounds = <20,370,530,540>;
  }

  $rect <50,420,250,460>
  method void SlideInDialog( arg Core::Group aView )
  {
    if( null != aView &&
        IsCurrentDialog() &&
        false == IsSlideEffectPresenting )
    {
      IsSlideEffectPresenting = true;
      PresentDialog( aView, Effect::LeftSlideTransition, null, null, null, null, null, OnSlideEffectCompletedSlot, null, false );
    }



  }

  $rect <280,420,480,460>
  method void SlideOutDialog( arg Core::Group aView )
  {
    if( null != aView &&
        false == IsSlideEffectPresenting )
    {
      IsSlideEffectPresenting = true;
      Owner.DismissDialog( this, Effect::RightSlideTransition, null, null, OnSlideEffectCompletedSlot, null, false );
    }
  }

  $rect <260,210,490,250>
  method void OnShortHomeKeyActivated()
  {
  }

  $rect <770,60,970,100>
  property Enum::KeyTriggerMode UpKeyTriggerMode = Enum::KeyTriggerMode.ON;

  $rect <770,110,970,150>
  property Enum::KeyTriggerMode DownKeyTriggerMode = Enum::KeyTriggerMode.ON;

  $rect <770,160,970,200>
  property Enum::KeyTriggerMode EnterKeyTriggerMode = Enum::KeyTriggerMode.OFF;

  $rect <770,210,970,250>
  property Enum::KeyTriggerMode HomeKeyTriggerMode = Enum::KeyTriggerMode.OFF;

  $rect <510,110,740,150>
  method void OnLongDownKeyActivated()
  {
  }

  $rect <510,60,740,100>
  method void OnLongUpKeyActivated()
  {
  }

  $rect <510,160,740,200>
  method void OnLongEnterKeyActivated()
  {
  }

  $rect <510,210,740,250>
  method void OnLongHomeKeyActivated()
  {
  }

  $rect <990,60,1190,100>
  property bool PassUpKey = false;

  $rect <990,110,1190,150>
  property bool PassDownKey = false;

  $rect <991,160,1191,200>
  property bool PassHomeKey = false;

  $rect <990,210,1190,250>
  property bool PassEnterKey = false;

  $rect <260,260,490,300>
  method void OnShortMagicKeyActivated()
  {
  }

  $rect <990,260,1190,300>
  property bool PassMagicKey = false;

  $rect <560,420,760,460>
  property bool DDModeEnabled = false;

  $rect <560,520,760,560>
  method bool IsDDModeEffected()
  {
    return ( DDModeEnabled && DeviceInterface::VehicleDevice.DDModeActivated );
  }

  // Driver Distraction Mode
  note group Note7
  {
    attr Bounds = <540,370,780,580>;
  }

  $rect <560,470,760,510>
  onset DDModeEnabled
  {
    if( pure DDModeEnabled != value )
    {
      pure DDModeEnabled = value;
    }
  }
}

$rect <20,140,260,180>
$output false
class StatusBar : Core::Group
{
  $rect <0,70,200,110>
  inherited property Bounds = <0,0,480,32>;

  $rect <20,20,160,60>
  object Views::Rectangle Background
  {
    preset Bounds = <0,0,480,32>;
    preset Color = #000000FF;
  }

  $rect <20,20,160,60>
  object Views::Text TitleText
  {
    preset Bounds = <50,0,420,30>;
    preset Alignment = Views::TextAlignment[AlignHorzLeft, AlignVertCenter];
    preset String = "";
    preset Font = Fonts::NotoSansCjkJpMedium28pt;
  }

  $rect <20,20,160,60>
  object Views::Image Divider
  {
    preset Bounds = <0,30,480,32>;
    preset Alignment = Views::ImageAlignment[AlignVertBottom, ScaleToFit];
    preset Bitmap = Resource::ListDivider4;
  }

  $rect <20,20,160,60>
  object Views::Image IconWarning
  {
    preset Bounds = <174,0,204,30>;
    preset Alignment = Views::ImageAlignment[AlignHorzCenter, AlignVertCenter, ScaleToFit];
    preset Bitmap = Resource::IconWarning;
    preset Visible = false;
  }

  $rect <20,20,160,60>
  object Views::Text TimeText
  {
    preset Bounds = <2,0,80,30>;
    preset Alignment = Views::TextAlignment[AlignHorzLeft, AlignVertCenter];
    preset String = "";
    preset Font = Fonts::NotoSansCjkJpMedium28pt;
    preset Color = #FFFFFFFF;
    preset Visible = true;
  }

  $rect <220,120,510,160>
  slot OnUpdateLocalTimeSlot
  {
    var DeviceInterface::RtcTime CurrentTime = ( DeviceInterface::RtcTime )OnUpdateLocalTimeEventHandler.Context;
    if( null != CurrentTime )
    {
      TimeText.String = string( CurrentTime.Hour, 2 ) + ":" + string( CurrentTime.Minute, 2 );
    }
  }

  $rect <220,70,510,110>
  object Core::SystemEventHandler OnUpdateLocalTimeEventHandler
  {
    preset OnEvent = OnUpdateLocalTimeSlot;
    preset Event = DeviceInterface::SystemDevice.UpdateLocalTimeSystemEvent;
  }
}

$rect <60,70,300,110>
$output false
class BaseMainBG : Components::BaseComponent
{
  $rect <220,280,400,320>
  inherited method Init()
  {
    DDModeStateChangedHandler.Enabled = DDModeEnabled;
    UpdateDDModeMask();
  }

  $rect <0,280,200,320>
  inherited property Bounds = <0,0,480,272>;

  $rect <220,330,450,370>
  inherited method OnShortHomeKeyActivated()
  {
    if( IsDDModeEffected() )
    {
      var Application::Application App = ( Application::Application )GetRoot();
      if( null != App )
      {
        App.ReturnToLauncher();
      }
    }
    else
    {
      Owner.DismissDialog( this, null, null, null, null, null, false );
    }
  }

  $rect <540,170,740,210>
  inherited onset DDModeEnabled
  {
    super( value );
    DDModeStateChangedHandler.Enabled = value;
  }

  $rect <20,20,160,60>
  object Views::Image MainBottomBG
  {
    preset Bounds = <0,182,480,272>;
    preset Bitmap = Resource::MainBG;
  }

  $rect <20,20,160,60>
  object Views::Rectangle BlackBG
  {
    preset Bounds = <0,32,480,182>;
    preset Color = #000000FF;
  }

  $rect <540,70,790,110>
  object Core::SystemEventHandler DDModeStateChangedHandler
  {
    preset OnEvent = OnDDModeStateChangedSlot;
    preset Enabled = false;
    preset Event = DeviceInterface::VehicleDevice.DDModeStateChangedSystemEvent;
  }

  // This slot method is executed when the associated system event handler 'SystemEventHandler' \
  // receives an event.
  $rect <540,120,790,160>
  slot OnDDModeStateChangedSlot
  {
    UpdateDDModeMask();
  }

  $rect <20,20,160,60>
  object Components::DDModeMask DDModeMask
  {
    preset StackingPriority = 1;
    preset Bounds = <0,36,480,272>;
    preset Enabled = false;
    preset Visible = false;
  }

  $rect <540,220,740,260>
  method void UpdateDDModeMask()
  {
    if( IsCurrentDialog() && DDModeEnabled )
    {
      DDModeMask.Visible = DeviceInterface::VehicleDevice.DDModeActivated;
      trace "DDModeMask Visible: ", DDModeMask.Visible, "in ", classof this;
    }
  }

  // Driver Distraction Mode
  note group Note5
  {
    attr Bounds = <510,30,820,280>;
  }
}

$rect <20,190,220,230>
$output false
class DDModeMask : Core::Group
{
  $rect <10,320,210,360>
  inherited property Bounds = <0,0,480,236>;

  $rect <20,20,160,60>
  object Views::Rectangle DDModeBG
  {
    preset StackingPriority = 0;
    preset Bounds = <0,0,480,236>;
    preset Color = #000000CD;
  }

  $rect <20,20,160,60>
  object Views::Image DDModeIcon
  {
    preset StackingPriority = 0;
    preset Bounds = <195,62,285,152>;
    preset Bitmap = Resource::IconDDActive;
  }
}
