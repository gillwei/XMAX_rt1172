$version 10.00

// This is the root component of the entire GUI application.
$rect <20,20,220,60>
$output false
class Application : Core::Root
{
  $rect <10,340,200,380>
  inherited method Init()
  {
    ShowDisclaimer();
  }

  $rect <10,290,200,330>
  inherited property Bounds = <0,0,480,272>;

  $rect <230,290,440,330>
  slot ProcKeyHoldSlot
  {
    var Core::KeyPressHandler handler = ( Core::KeyPressHandler ) sender;
    switch( handler.Code )
    {
      case Core::KeyCode.Down:;
      case Core::KeyCode.Up:;
      case Core::KeyCode.Ok:;
      default:;
    }
  }

  $rect <40,490,270,530>
  slot OnDisclaimerAcceptedSlot
  {
    var Top::TOP01_Disclaimer Disclaimer = ( Top::TOP01_Disclaimer )sender;
    if( null != Disclaimer )
    {
      GetRoot().EndModal( Disclaimer );
      GetRoot().Remove( Disclaimer );
    }

    StatusBar.StackingPriority = 1;

    //TODO: switch to the last page saved in EEPROM
    GetRoot().SwitchToDialog( new Home::HOM11_tachometer, null, null, null, null, null, null, null, null, null, false );
  }

  $rect <40,430,270,470>
  method void ShowDisclaimer()
  {
    var Top::TOP01_Disclaimer Disclaimer = new Top::TOP01_Disclaimer;
    Disclaimer.OnAcceptButtonClicked = OnDisclaimerAcceptedSlot;
    GetRoot().Add( Disclaimer, 0 );
    GetRoot().BeginModal( Disclaimer );
  }

  // For disclaimer
  note group Note
  {
    attr Bounds = <10,390,300,550>;
  }

  // Factory Test
  note group Note2
  {
    attr Bounds = <10,570,320,780>;
  }

  $rect <40,610,290,650>
  object Core::SystemEventHandler FactoryTestEventHandler
  {
    preset OnEvent = OnFactoryTestEventSlot;
    preset Event = DeviceInterface::SystemDevice.FactoryTestSystemEvent;
  }

  // This slot method is executed when the associated system event handler 'SystemEventHandler' \
  // receives an event.
  $rect <40,660,290,700>
  slot OnFactoryTestEventSlot
  {
    var Factory::TestContext TestContext = ( Factory::TestContext )FactoryTestEventHandler.Context;
    if( null != TestContext )
    {
      switch( TestContext.TestItem )
      {
        case Enum::FactoryTest.Display:
        {
          StatusBarVisible = false;
          var Factory::DisplayManual FactoryTestDialog = ( Factory::DisplayManual )this.FindDialogByClass( Factory::DisplayManual );
          if( null == FactoryTestDialog )
          {
            FactoryTestDialog = new Factory::DisplayManual;
            PresentDialog( FactoryTestDialog, null, null, null, null, null, null, null, null, false );
          }
          FactoryTestDialog.PatternIdx = TestContext.Data;
        }
        case Enum::FactoryTest.BurnInStart:
        {
          StatusBarVisible = false;
          var Factory::DisplayAutoRun DisplayAutoRunDialog = new Factory::DisplayAutoRun;
          DisplayAutoRunDialog.BurnInEnabled = true;
          PresentDialog( DisplayAutoRunDialog, null, null, null, null, null, null, null, null, false );
        }
        case Enum::FactoryTest.Quit:
        {
          DismissFactoryTestDialog();
          StatusBarVisible = true;
        }
        default:;
      }
    }
  }

  $rect <20,20,160,60>
  object Components::StatusBar StatusBar
  {
    preset Bounds = <0,0,480,32>;
  }

  // For status bar
  note group Note3
  {
    attr Bounds = <330,570,620,730>;
  }

  $rect <360,620,590,660>
  property bool StatusBarVisible = true;

  $rect <360,670,590,710>
  onset StatusBarVisible
  {
    if ( pure StatusBarVisible != value )
    {
      pure StatusBarVisible = value;
      StatusBar.Visible = value;
      trace "StatusBar Visible: ", value;
    }
  }

  // BT FW Update
  note group Note4
  {
    attr Bounds = <660,570,930,730>;
  }

  $rect <690,620,910,660>
  object Core::PropertyObserver BtFwStatusObserver
  {
    preset OnEvent = OnBtFwStatusUpdteSlot;
    preset Outlet = ^DeviceInterface::BluetoothDevice.BtFwStatus;
  }

  // This slot method is executed when the associated property observer 'PropertyObserver' \
  // is notified.
  $rect <690,670,910,710>
  slot OnBtFwStatusUpdteSlot
  {
    if( Enum::BtFwStatus.UPDATE_START == DeviceInterface::BluetoothDevice.BtFwStatus )
    {
      var Settings::BtFwUpdateDialog BtFwDialog = new Settings::BtFwUpdateDialog;
      GetRoot().Add( BtFwDialog, 0 );
      GetRoot().BeginModal( BtFwDialog );
    }
  }

  $rect <40,710,290,750>
  method void DismissFactoryTestDialog()
  {
    var Core::Group FactoryTestDialog = this.FindDialogByClass( Factory::DisplayAutoRun );
    if( null != FactoryTestDialog )
    {
      DismissDialog( FactoryTestDialog, null, null, null, null, null, false );
    }

    FactoryTestDialog = this.FindDialogByClass( Factory::DisplayManual );
    if( null != FactoryTestDialog )
    {
      DismissDialog( FactoryTestDialog, null, null, null, null, null, false );
    }
  }
}
