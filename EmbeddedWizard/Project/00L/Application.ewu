$version 10.00

// This is the root component of the entire GUI application.
$rect <20,20,220,60>
$output false
class Application : Core::Root
{
  $rect <10,340,200,380>
  inherited method Init()
  {
    $if $prototyper
      signal OnStartBootupAnimationSlot;
    $endif
  }

  $rect <10,290,200,330>
  inherited property Bounds = <0,0,480,272>;

  $rect <40,490,270,530>
  slot OnDisclaimerAcceptedSlot
  {
    var Top::TOP01_Disclaimer Disclaimer = ( Top::TOP01_Disclaimer )sender;
    if( null != Disclaimer )
    {
      GetRoot().EndModal( Disclaimer );
      GetRoot().Remove( Disclaimer );
    }

    //TODO: switch to the last page saved in EEPROM
    GetRoot().SwitchToDialog( new Home::HOM11_TachoVisualizer, null, null, null, null, null, null, null, null, null, false );
  }

  $rect <40,430,270,470>
  method void ShowDisclaimer()
  {
    var Top::TOP01_Disclaimer Disclaimer = new Top::TOP01_Disclaimer;
    Disclaimer.OnAcceptButtonClicked = OnDisclaimerAcceptedSlot;
    GetRoot().Add( Disclaimer, 0 );
    GetRoot().BeginModal( Disclaimer );
  }

  // For disclaimer
  note group Note
  {
    attr Bounds = <10,390,300,550>;
  }

  // Factory Test
  note group Note2
  {
    attr Bounds = <10,570,320,780>;
  }

  $rect <40,610,290,650>
  object Core::SystemEventHandler FactoryTestEventHandler
  {
    preset OnEvent = OnFactoryTestEventSlot;
    preset Event = DeviceInterface::SystemDevice.FactoryTestSystemEvent;
  }

  // This slot method is executed when the associated system event handler 'SystemEventHandler' \
  // receives an event.
  $rect <40,660,290,700>
  slot OnFactoryTestEventSlot
  {
    var Factory::TestContext TestContext = ( Factory::TestContext )FactoryTestEventHandler.Context;
    if( null != TestContext )
    {
      switch( TestContext.TestItem )
      {
        case Enum::FactoryTest.Display:
        {
          StatusBarVisible = false;
          var Factory::DisplayManual FactoryTestDialog = ( Factory::DisplayManual )this.FindDialogByClass( Factory::DisplayManual );
          if( null == FactoryTestDialog )
          {
            FactoryTestDialog = new Factory::DisplayManual;
            PresentDialog( FactoryTestDialog, null, null, null, null, null, null, null, null, false );
          }
          FactoryTestDialog.PatternIdx = TestContext.Data;
        }
        case Enum::FactoryTest.BurnInStart:
        {
          StatusBarVisible = false;
          var Factory::DisplayAutoRun DisplayAutoRunDialog = new Factory::DisplayAutoRun;
          DisplayAutoRunDialog.BurnInEnabled = true;
          PresentDialog( DisplayAutoRunDialog, null, null, null, null, null, null, null, null, false );
        }
        case Enum::FactoryTest.Quit:
        {
          DismissFactoryTestDialog();
          StatusBarVisible = true;
        }
        default:;
      }
    }
  }

  // For status bar
  note group Note3
  {
    attr Bounds = <330,570,620,730>;
  }

  $rect <360,620,590,660>
  property bool StatusBarVisible = true;

  $rect <360,670,590,710>
  onset StatusBarVisible
  {
    if ( pure StatusBarVisible != value )
    {
      pure StatusBarVisible = value;
      StatusBar.Visible = value;
      trace "StatusBar Visible: ", value;
    }
  }

  // BT FW Update
  note group Note4
  {
    attr Bounds = <660,570,930,730>;
  }

  $rect <690,620,910,660>
  object Core::PropertyObserver BtFwStatusObserver
  {
    preset OnEvent = OnBtFwStatusUpdteSlot;
    preset Outlet = ^DeviceInterface::BluetoothDevice.BtFwStatus;
  }

  // This slot method is executed when the associated property observer 'PropertyObserver' \
  // is notified.
  $rect <690,670,910,710>
  slot OnBtFwStatusUpdteSlot
  {
    if( Enum::BtFwStatus.UPDATE_START == DeviceInterface::BluetoothDevice.BtFwStatus )
    {
      var Settings::BtFwUpdateDialog BtFwDialog = new Settings::BtFwUpdateDialog;
      GetRoot().Add( BtFwDialog, 0 );
      GetRoot().BeginModal( BtFwDialog );
    }
  }

  $rect <40,710,290,750>
  method void DismissFactoryTestDialog()
  {
    var Core::Group FactoryTestDialog = this.FindDialogByClass( Factory::DisplayAutoRun );
    if( null != FactoryTestDialog )
    {
      DismissDialog( FactoryTestDialog, null, null, null, null, null, false );
    }

    FactoryTestDialog = this.FindDialogByClass( Factory::DisplayManual );
    if( null != FactoryTestDialog )
    {
      DismissDialog( FactoryTestDialog, null, null, null, null, null, false );
    }
  }

  // Switch to home/launcher
  note group Note1
  {
    attr Bounds = <330,390,1030,550>;
  }

  $rect <360,440,560,480>
  method void SwitchToHome( arg Enum::HomeType aHomeType )
  {
    var class HomeClass = HomeClassOfHomeType( aHomeType );

    if( null != HomeClass )
    {
      // check if Home is already in the dialog stack
      var bool IsInDialogStack = false;
      var int32 DialogIdx = 0;
      for( DialogIdx = 0; DialogIdx < CountDialogs(); DialogIdx++ )
      {
        if( HomeClass == classof GetDialogAtIndex( DialogIdx ) )
        {
          IsInDialogStack = true;
          break;
        }
      }

      if( IsInDialogStack )
      {
        // Dismiss the dialogs on the top of the current home dialog
        for( DialogIdx = 0; DialogIdx < CountDialogs(); DialogIdx++ )
        {
          // The dialog lying top-most (the active dialog in context of this component) has the index 0 (zero).
          if( HomeClass == classof GetDialogAtIndex( 0 ) )
          {
            var Home::BaseHome HomeDialog = ( Home::BaseHome )GetDialogAtIndex( 0 );
            if( null != HomeDialog )
            {
              HomeDialog.ReturnToHome();
            }
            break;
          }
          else
          {
            DismissDialog( GetDialogAtIndex( 0 ), null, null, null, null, null, false );
          }
        }
      }
      else
      {
        var Core::Group HomeDialog = HomeDialogOfHomeType( aHomeType );
        if( null != HomeDialog )
        {
          // dismiss all dialogs
          while( CountDialogs() > 0 )
          {
            DismissDialog( GetDialogAtIndex( 0 ), null, null, null, null, null, false );
          }
          // show the home dialog
          SwitchToDialog( HomeDialog, null, null, null, null, null, null, null, null, null, false );
        }
      }
    }
  }

  // Unit test to toggle DD mode every 3 second
  $rect <380,780,580,820>
  object Core::Timer DDModeTestTimer
  {
    preset OnTrigger = OnDDModeTestSlot;
    preset Period = 3000;
    preset Enabled = false;
  }

  $rect <380,830,580,870>
  slot OnDDModeTestSlot
  {
    DeviceInterface::VehicleDevice.DDModeActivated = !DeviceInterface::VehicleDevice.DDModeActivated;
    trace "Test DDMode ", DeviceInterface::VehicleDevice.DDModeActivated;
    DeviceInterface::VehicleDevice.NotifyDDModeStateChanged();
  }

  // Unit Test for DD Mode
  note group Note5
  {
    attr Bounds = <330,740,620,890>;
  }

  // Return from the DD mode forbidden UI to the launcher
  $rect <360,490,560,530>
  method void ReturnToLauncher()
  {
    var int32 NoOfDialogs = CountDialogs();
    var int32 i;
    for( i = 0; i < NoOfDialogs; i++ )
    {
      var Launcher::LNC_Main LauncherMain = ( Launcher::LNC_Main )GetDialogAtIndex( i );
      if( null != LauncherMain )
      {
        LauncherMain.DismissChildDialogs();
        break;
      }
    }
  }

  $rect <570,440,790,480>
  method class HomeClassOfHomeType( arg Enum::HomeType aHomeType )
  {
    var class HomeClass = null;
    switch( aHomeType )
    {
      case Enum::HomeType.TACHO_VISUALIZER: HomeClass = Home::HOM11_TachoVisualizer;
      case Enum::HomeType.ECO_VISUALIZER: HomeClass = Home::HOM12_EcoVisualizer;
      case Enum::HomeType.SPEED_VISUALIZER: HomeClass = Home::HOM13_SpeedVisualizer;
      case Enum::HomeType.NAVI_DEFAULT_VIEW: HomeClass = Navigation::NAV01_DefaultView;
      case Enum::HomeType.NAVI_TURN_BY_TURN:;
      case Enum::HomeType.NAVI_NEXT_TURN:;
      case Enum::HomeType.VEHICLE_INFO:;
      default:;
    }
    return HomeClass;
  }

  $rect <570,490,790,530>
  method Core::Group HomeDialogOfHomeType( arg Enum::HomeType aHomeType )
  {
    var Core::Group aHomeDialog = null;
    switch( aHomeType )
    {
      case Enum::HomeType.TACHO_VISUALIZER: aHomeDialog = new Home::HOM11_TachoVisualizer;
      case Enum::HomeType.ECO_VISUALIZER: aHomeDialog = new Home::HOM12_EcoVisualizer;
      case Enum::HomeType.SPEED_VISUALIZER: aHomeDialog = new Home::HOM13_SpeedVisualizer;
      case Enum::HomeType.NAVI_DEFAULT_VIEW: aHomeDialog = new Navigation::NAV01_DefaultView;
      case Enum::HomeType.NAVI_TURN_BY_TURN:;
      case Enum::HomeType.NAVI_NEXT_TURN:;
      case Enum::HomeType.VEHICLE_INFO:;
      default:;
    }
    return aHomeDialog;
  }

  $rect <530,140,800,180>
  slot OnBootupAnimationFinishedSlot
  {
    var Core::Group BootupAnimationDialog = ( Core::Group )sender;
    if( null != BootupAnimationDialog )
    {
      DismissDialog( BootupAnimationDialog, null, null, null, null, null, false );
    }
    DeviceInterface::BluetoothDevice.GetBluetoothEnable();
    StatusBar.Visible = true;
    ShowDisclaimer();
  }

  $rect <530,40,830,80>
  object Core::SystemEventHandler BootupAnimationSystemEventHandler
  {
    preset OnEvent = OnStartBootupAnimationSlot;
    preset Event = DeviceInterface::SystemDevice.BootupAnimationSystemEvent;
  }

  // This slot method is executed when the associated system event handler 'SystemEventHandler' \
  // receives an event.
  $rect <530,90,780,130>
  slot OnStartBootupAnimationSlot
  {
    var Open::OPN01_BootupAnimation BootupAnimationDialog = new Open::OPN01_BootupAnimation;
    BootupAnimationDialog.OnBootupAnimationFinished = OnBootupAnimationFinishedSlot;
    SwitchToDialog( BootupAnimationDialog, null, null, null, null, null, null, null, null, null, false );
  }

  // Bootup Animation
  note group Note6
  {
    attr Bounds = <500,0,860,200>;
  }

  $rect <20,20,160,60>
  object StatusBar::Main StatusBar
  {
    preset Bounds = <0,0,480,38>;
    preset Visible = false;
  }

  // Return from the DD mode forbidden UI to the launcher
  $rect <810,440,1010,480>
  method void ReturnToHome()
  {
    trace "ReturnToHome";
    var int32 NoOfDialogs = CountDialogs();
    var int32 i;
    for( i = 0; i < NoOfDialogs; i++ )
    {
      var Home::BaseHome Dialog = ( Home::BaseHome )GetDialogAtIndex( 0 );
      if( null != Dialog )
      {
        Dialog.ReturnToHome();
      }
      else
      {
        DismissDialog( GetDialogAtIndex( 0 ), null, null, null, null, null, false );
      }
    }
  }
}
