$version 11.00

$rect <20,10,220,50>
inline Inline
{
  #include "ew_priv.h"
}

$rect <20,60,260,100>
$output false
class SET01_MainSettingMenu : Menu::BaseMenuView
{
  $rect <510,10,710,50>
  inherited method Init()
  {
    trace "SET01";

    var int32 i;
    var int32 NoOfItems;
    var Enum::MainSettingItem SettingItem;

    for( i = 0; i < (int32)Enum::MainSettingItem.TOTAL; i++ )
    {
      SettingItem = (Enum::MainSettingItem)i;
      switch( SettingItem )
      {
        case Enum::MainSettingItem.TRACTION_CONTROL:
        {
          if( DeviceInterface::VehicleDevice.IsVehicleFunctionSupported( Enum::VehicleSupportedFunction.TCS ) )
          {
            Settings[NoOfItems] = SettingItem;
            NoOfItems++;
          }
        }
        case Enum::MainSettingItem.GRIP_WARMER:
        {
          if( DeviceInterface::VehicleDevice.IsVehicleFunctionSupported( Enum::VehicleSupportedFunction.GRIP_WARMER ) )
          {
            Settings[NoOfItems] = SettingItem;
            NoOfItems++;
          }
        }
        case Enum::MainSettingItem.SEAT_HEATER:
        {
          if( DeviceInterface::VehicleDevice.IsVehicleFunctionSupported( Enum::VehicleSupportedFunction.SEAT_HEATER ) )
          {
            Settings[NoOfItems] = SettingItem;
            NoOfItems++;
          }
        }
        default:
        {
          Settings[NoOfItems] = SettingItem;
          NoOfItems++;
        }
      }
    }

    Menu.NoOfItems = NoOfItems;
  }

  $rect <10,290,210,330>
  inherited property DDModeEnabled = true;

  $rect <510,60,710,100>
  inherited method LoadItemClass()
  {
    var class ItemClass = null;
    if( aItemNo >= 0 )
    {
      ItemClass = Menu::ItemBase;
    }
    return ItemClass;
  }

  $rect <510,110,710,150>
  inherited method LoadItemTitle()
  {
    var string Title = "";
    switch( Settings[aItemNo] )
    {
      case Enum::MainSettingItem.TRACTION_CONTROL: Title = Strings::SET01_TRACTION_CONTROL;
      case Enum::MainSettingItem.CONNECTION: Title = Strings::SET01_CONNECTION;
      case Enum::MainSettingItem.CLOCK: Title = Strings::SET01_CLOCK;
      case Enum::MainSettingItem.BRIGHTNESS: Title = Strings::SET01_BRIGHTNESS;
      case Enum::MainSettingItem.UNIT: Title = Strings::SET01_UNIT;
      case Enum::MainSettingItem.GRIP_WARMER: Title = Strings::SET01_GRIP_WARMER_SETTINGS;
      case Enum::MainSettingItem.SEAT_HEATER: Title = Strings::SET01_SEAT_HEATER_SETTINGS;
      case Enum::MainSettingItem.SYSTEM_INFO: Title = Strings::SET01_SYSTEM_INFO;
      case Enum::MainSettingItem.LEGAL_INFO: Title = Strings::SET01_LEGAL_INFO;
      case Enum::MainSettingItem.INFORMATION_RESET: Title = Strings::SET01_INFO_RESET;
      default:;
    }
    return Title;
  }

  $rect <510,160,710,200>
  inherited method OnItemActivate()
  {
    aMenuItem; //suppress warning
    var Components::BaseComponent Dialog = null;

    switch( Settings[aItemNo] )
    {
      case Enum::MainSettingItem.TRACTION_CONTROL: Dialog = new TCS::TCS01_Main;
      case Enum::MainSettingItem.CONNECTION:
      {
        if( !DeviceInterface::SystemDevice.IsHopperTestMode )
        {
          Dialog = new Settings::SET03_ConnectionSettingMenu;
        }
      }
      case Enum::MainSettingItem.INFORMATION_RESET: Dialog = new Settings::SET43_ResetMenu;
      case Enum::MainSettingItem.CLOCK: Dialog = new Clock::CLK01_ClockSettingMenu;
      case Enum::MainSettingItem.BRIGHTNESS: Dialog = new Brightness::BRT01_BrightnessSettingMenu;
      case Enum::MainSettingItem.UNIT: Dialog = new Unit::UNT01_UnitSettingMenu;
      case Enum::MainSettingItem.GRIP_WARMER:
      {
        DeviceInterface::VehicleDevice.CurrentVehicleFunction = Enum::VehicleSupportedFunction.GRIP_WARMER;
        DeviceInterface::VehicleDevice.SetData( Enum::VehicleTxType.HEATER_SELECT, SeatHeater_GripWarmer::GRIP_WARMER );
        Dialog = new SeatHeater_GripWarmer::SHT02_GPW02_Main;
      }
      case Enum::MainSettingItem.SEAT_HEATER:
      {
        DeviceInterface::VehicleDevice.CurrentVehicleFunction = Enum::VehicleSupportedFunction.SEAT_HEATER;
        DeviceInterface::VehicleDevice.SetData( Enum::VehicleTxType.HEATER_SELECT, SeatHeater_GripWarmer::RIDER_SEAT_HEATER );
        Dialog = new SeatHeater_GripWarmer::SHT02_GPW02_Main;
      }
      case Enum::MainSettingItem.SYSTEM_INFO: Dialog = new Settings::SET28_SystemInfo;
      case Enum::MainSettingItem.LEGAL_INFO: Dialog = new Settings::SET35_LegalMenu;
      default:;
    }

    if( null != Dialog )
    {
      var Menu::BaseMenuView MenuDialog = ( Menu::BaseMenuView )Dialog;
      if( null != MenuDialog )
      {
        SlideInDialog( MenuDialog );
      }
      else
      {
        PresentDialog( Dialog, null, null, null, null, null, null, null, null, false );
      }
    }
  }

  $rect <20,20,160,60>
  inherited object Menu
  {
    preset DDModeEnabled = true;
    preset NoOfItems = 9;
    preset ArrowScrollBarVisible = true;
  }

  $rect <730,110,930,150>
  array Enum::MainSettingItem Settings[ 10 ];

  $reorder OnSetDDModeEnabled 1
  $reorder LoadItemClass 3
  $reorder LoadItemTitle 3
  $reorder OnItemActivate 2
  $reorder LoadItemChecked 2
  $reorder LoadItemEnabled 2
}

$rect <20,110,260,150>
$output false
class SET03_ConnectionSettingMenu : Menu::BaseMenuView
{
  $rect <10,290,190,330>
  inherited method Init()
  {
    trace "SET03";
  }

  $rect <10,340,210,380>
  inherited property DDModeEnabled = true;

  $rect <10,390,210,430>
  inherited var SlideOutEffectEnabled = true;

  $rect <510,20,710,60>
  inherited method LoadItemClass()
  {
    aItemNo; // suppress warning
    return Menu::ItemBase;
  }

  $rect <510,70,710,110>
  inherited method LoadItemTitle()
  {
    var string Title = "";
    switch( aItemNo )
    {
      case 0: Title = Strings::GEN_BLUETOOTH;
      case 1: Title = Strings::SET03_Y_CONNECT_APP_PAIRING;
      default:;
    }
    return Title;
  }

  $rect <510,120,710,160>
  inherited method OnItemActivate()
  {
    // suppress warning
    aMenuItem;

    switch( aItemNo )
    {
      case 0: SlideInDialog( new Settings::SET04_BtSettingMenu );
      default :;
    }
  }

  $rect <20,20,160,60>
  inherited object Menu
  {
    preset DDModeEnabled = true;
    preset NoOfItems = 1;
  }
}

$rect <20,160,260,200>
$output false
class SET04_BtSettingMenu : Menu::BaseMenuView
{
  $rect <10,290,190,330>
  inherited method Init()
  {
    trace "SET04";
    IsBtEnabled = DeviceInterface::BluetoothDevice.BluetoothEnabled;
  }

  $rect <10,340,210,380>
  inherited property DDModeEnabled = true;

  $rect <10,390,210,430>
  inherited var SlideOutEffectEnabled = true;

  $rect <490,30,690,70>
  inherited method LoadItemClass()
  {
    var class ClassType = null;
    if( aItemNo < ItemClassArray.size )
    {
      ClassType = ItemClassArray[aItemNo];
    }
    return ClassType;
  }

  $rect <490,80,690,120>
  inherited method LoadItemTitle()
  {
    var string Title = "";
    switch( aItemNo )
    {
      case 0: Title = Strings::GEN_BLUETOOTH;
      case 1: Title = Strings::SET04_DISCOVERY_MODE;
      case 2: Title = Strings::SET04_PAIRED_DEVICES;
      case 3: Title = Strings::SET04_BT_AUTO_CONNECT;
      default:;
    }
    return Title;
  }

  $rect <490,230,690,270>
  inherited method OnItemActivate()
  {
    var bool IsChecked = false;
    var Menu::ItemCheckbox CheckBoxItem = ( Menu::ItemCheckbox )aMenuItem;
    if( null != CheckBoxItem )
    {
      IsChecked = CheckBoxItem.Checked;
    }

    switch( aItemNo )
    {
      case 0:
      {
        IsBtEnabled = IsChecked;
        DeviceInterface::BluetoothDevice.BluetoothEnabled = IsChecked;
        Menu.InvalidateItems( 1, 4 );
      }
      case 1:
      {
        if( DeviceInterface::BluetoothDevice.IsPairedDeviceNumMax )
        {
          PresentDialog( new Settings::SET05_BtcMaxPairedDevice, null, null, null, null, null, null, null, null, false );
        }
        else
        {
          PresentDialog( new Settings::SET06_BtcDiscovarable, null, null, null, null, null, null, null, null, false );
        }
      }
      case 2: SlideInDialog( new Settings::SET17_BtcPairedDeviceList );
      case 3: DeviceInterface::BluetoothDevice.AutoConnect = IsChecked;
      default:;
    }
  }

  $rect <490,130,690,170>
  inherited method LoadItemChecked()
  {
    var bool IsChecked = false;
    switch( aItemNo )
    {
      case 0: IsChecked = DeviceInterface::BluetoothDevice.BluetoothEnabled;
      case 3: IsChecked = DeviceInterface::BluetoothDevice.AutoConnect;
      default:;
    }
    return IsChecked;
  }

  $rect <490,180,690,220>
  inherited method LoadItemEnabled()
  {
    var bool ItemEnabled = true;
    if( aItemNo > 0 )
    {
      ItemEnabled = IsBtEnabled;
    }
    return ItemEnabled;
  }

  $rect <20,20,160,60>
  inherited object Menu
  {
    preset DDModeEnabled = true;
    preset NoOfItems = 4;
    preset ItemHeight = Menu::ItemHeightSmall;
    preset ItemNumPerPage = 4;
  }

  $rect <710,30,910,70>
  array class ItemClassArray[ 4 ] =
  (
    Default[0] = Menu::ItemCheckbox;
    Default[1] = Menu::ItemBase;
    Default[2] = Menu::ItemBase;
    Default[3] = Menu::ItemCheckbox;
  );

  $rect <710,130,910,170>
  var bool IsBtEnabled = false;

  $rect <230,290,480,330>
  method void PresentPairedDeviceList()
  {
    var int32 i = 0;
    for( i = 0; i < CountDialogs(); i++ )
    {
      DismissDialog( GetDialogAtIndex( 0 ), null, null, null, null, null, true );
    }
    PresentDialog( new Settings::SET17_BtcPairedDeviceList, null, null, null, null, null, null, null, null, false );
  }
}

// System Settings UI
note group Note
{
  attr Bounds = <580,10,1070,680>;
}

$rect <600,160,800,200>
$output false
class SET35_LegalMenu : Menu::BaseMenuView
{
  $rect <237,310,417,350>
  inherited method Init()
  {
    trace "SET35";
  }

  $rect <10,360,210,400>
  inherited property DDModeEnabled = true;

  $rect <10,310,210,350>
  inherited var SlideOutEffectEnabled = true;

  $rect <520,110,720,150>
  inherited method LoadItemClass()
  {
    var class ItemClass = null;
    if( aItemNo >= 0 )
    {
    ItemClass = Menu::ItemBase;
    }
    return ItemClass;
  }

  $rect <520,60,720,100>
  inherited method LoadItemTitle()
  {
    var string Title = "";
    if( aItemNo >= 0 )
    {
      Title = Strings::SET35_LICENSE;
    }
    return Title;
  }

  $rect <520,200,720,240>
  inherited method OnItemActivate()
  {
    aItemNo;   // suppress warning
    aMenuItem; // suppress warning
    SlideInDialog( new Settings::SET37_3rdPartyLicenses );
  }

  $rect <20,20,160,60>
  inherited object Menu
  {
    preset DDModeEnabled = true;
    preset NoOfItems = 1;
  }

  $reorder LoadItemBaseValue 4
}

$rect <600,480,810,520>
$output false
$multilingual true
class SET38_ConfirmAllReset : Components::BaseMainBG
{
  $rect <10,400,190,440>
  inherited method Init()
  {
    trace "SET38";
  }

  $rect <10,300,210,340>
  inherited property Bounds = <0,0,480,272>;

  $rect <10,350,210,390>
  inherited property DDModeEnabled = true;

  $rect <20,20,160,60>
  object Components::BaseText Text
  {
    preset Bounds = <10,46,470,170>;
    preset String = Strings::SET38_RESET_TO_FACTORY;
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <220,350,430,390>
  slot OnOkActivatedSlot
  {
    if( 0 < DeviceInterface::BluetoothDevice.PairedDeviceNum )
    {
      Owner.SwitchToDialog( new Settings::SET39_DeletePairedDevice, null, null, null, null, null, null, null, null, null, false );
    }
    else
    {
      Owner.SwitchToDialog( new Settings::SET41_ResetInProgress, null, null, null, null, null, null, null, null, null, false );
    }
  }

  $rect <220,300,430,340>
  slot OnCancelActivatedSlot
  {
    OnShortHomeKeyActivated();
  }

  $rect <20,20,160,60>
  object Menu::UpDownPushButtonSet UpDownPushButtonSet
  {
    preset Bounds = <165,176,315,259>;
    preset PassHomeKey = true;
    preset PassMagicKey = true;
    preset DDModeEnabled = true;
    preset OnUpButtonActivated = OnCancelActivatedSlot;
    preset OnDownButtonActivated = OnOkActivatedSlot;
    preset UpButtonTitle = Strings::GEN_CANCEL;
    preset DownButtonTitle = Strings::GEN_OK;
    preset DownButtonEnabled = true;
  }
}

$rect <600,530,830,570>
$output false
class SET39_DeletePairedDevice : Components::BaseMainBG
{
  $rect <10,340,210,380>
  inherited method ReInit()
  {
    Text.String = Strings::SET39_DELETE_PAIRING;
    PushButton.Title = Strings::GEN_OK;
  }

  $rect <10,290,210,330>
  inherited method Init()
  {
    trace "SET39";
  }

  $rect <10,390,210,430>
  inherited property DDModeEnabled = true;

  $rect <230,290,430,330>
  slot OnOkSelectedSlot
  {
    Owner.SwitchToDialog( new Settings::SET41_ResetInProgress, null, null, null, null, null, null, null, null, null, false );
  }

  $rect <20,20,160,60>
  object Menu::PushButton PushButton
  {
    preset Bounds = <165,219,315,259>;
    preset DDModeEnabled = true;
    preset Title = Strings::GEN_OK;
    preset OnActivate = OnOkSelectedSlot;
  }

  $rect <20,20,160,60>
  object Components::BaseText Text
  {
    preset Bounds = <10,46,470,201>;
    preset WrapText = true;
    preset String = Strings::SET39_DELETE_PAIRING;
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }
}

$rect <600,580,810,620>
$output false
$multilingual true
class SET41_ResetInProgress : Components::BaseMainBG
{
  $rect <10,300,190,340>
  inherited method Init()
  {
    trace "SET41";
    if( DeviceInterface::VehicleDevice.DDModeActivated )
    {
      var Settings::TimeoutDialog Dialog = new Settings::TimeoutDialog;
      Dialog.Message = Strings::SET40_CANNOT_EXECUTE;
      Dialog.DismissAfterTimeout = true;
      Owner.SwitchToDialog( Dialog, null, null, null, null, null, null, null, null, null, false );
    }
    else
    {
      DeviceInterface::SystemDevice.ResetToFactoryDefault();
    }
  }

  $rect <210,300,440,340>
  inherited method OnShortHomeKeyActivated()
  {
    // neglect home key event
  }

  $rect <210,350,440,390>
  inherited method OnLongHomeKeyActivated()
  {
    // neglect home key event
  }

  $rect <10,350,190,390>
  inherited property DDModeEnabled = true;

  $rect <20,20,160,60>
  object Views::Image LoadingAnimation
  {
    preset Bounds = <193,54,287,148>;
    preset Animated = true;
    preset Bitmap = Resource::LoadingAnimation;
  }

  $rect <20,20,160,60>
  object Components::BaseText LoadingText
  {
    preset Bounds = <10,156,470,187>;
    preset String = Strings::GEN_PLEASE_WAIT;
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <470,300,730,340>
  object Core::SystemEventHandler ReceivedSystemEventHandler
  {
    preset OnEvent = OnSystemEventReceived;
    preset Event = DeviceInterface::SystemDevice.SystemDataReceivedSystemEvent;
  }

  // This slot method is executed when the associated system event handler 'SystemEventHandler' \
  // receives an event.
  $rect <470,350,730,390>
  slot OnSystemEventReceived
  {
    var DeviceInterface::SystemData SystemData = ( DeviceInterface::SystemData )ReceivedSystemEventHandler.Context;
    if( null != SystemData )
    {
      switch( SystemData.RxEvent )
      {
        case Enum::SystemRxEvent.FACTORY_RESET_COMPLETED:
        {
          PresentDialog( new Settings::SET42_ResetCompleted, null, null, null, null, null, null, null, null, false );
        }
        default:;
      }
    }
  }
}

$rect <600,210,800,250>
$output false
class SET37_3rdPartyLicenses : Components::BaseMainBG
{
  $rect <240,300,440,340>
  inherited method Init()
  {
    trace "SET37";
    $if !$prototyper
      var int32 i;
      var string CopyRightTitle;
      var string CopyRightContent;
      var int32 NumberOfLicenses;

      native( NumberOfLicenses )
      {
        NumberOfLicenses = ew_get_num_of_licenses();
      }

      for( i = 0; i < NumberOfLicenses; i++ )
      {
        native( i, CopyRightTitle, CopyRightContent )
        {
          uint8_t* copyright_title;
          uint8_t* copyright_content;
          ew_get_copyright( i, &copyright_title, &copyright_content );
          CopyRightTitle = EwNewStringUtf8( ( const unsigned char* )copyright_title, ( int )strlen( ( char* )copyright_title ) );
          CopyRightContent = EwNewStringUtf8( ( const unsigned char* )copyright_content, ( int )strlen( ( char* )copyright_content ) );
        }

        ThirdPartyLicenseText.LicenseText.String += ( CopyRightTitle + "\n" + CopyRightContent + "\n" );
        ThirdPartyLicenseText.LicenseText.String += "\n";
      }
      ThirdPartyLicenseText.UpdateLineNum();
      ThirdPartyLicenseText.LicenseInitBounds = ThirdPartyLicenseText.LicenseText.Bounds;
    $endif
  }

  $rect <520,140,720,180>
  inherited method OnShortDownKeyActivated()
  {
    Scrollbar.ViewIdx = ThirdPartyLicenseText.ScrollDownPage();
  }

  $rect <520,90,720,130>
  inherited method OnShortUpKeyActivated()
  {
    Scrollbar.ViewIdx = ThirdPartyLicenseText.ScrollUpPage();
  }

  $rect <520,210,720,250>
  inherited method OnShortEnterKeyActivated()
  {
    OnShortHomeKeyActivated();
  }

  $rect <10,300,210,340>
  inherited property DDModeEnabled = true;

  $rect <10,350,210,390>
  inherited var SlideOutEffectEnabled = true;

  $rect <20,20,160,60>
  object Menu::Scrollbar Scrollbar
  {
    preset Bounds = <453,44,461,254>;
    preset ViewIdx = 0;
    preset PageItems = Settings::DETAIL_TOTAL_LINE_NUM;
    preset ListItems = 1;
  }

  $rect <20,20,160,60>
  object Settings::LicenseDetail ThirdPartyLicenseText
  {
    preset Bounds = <33,47,421,258>;
    preset OnLineNumUpdated = OnLineNumUpdatedSlot;
  }

  $rect <520,270,730,310>
  slot OnLineNumUpdatedSlot
  {
    Scrollbar.ListItems = ThirdPartyLicenseText.NoOfLines;
  }
}

$rect <20,260,260,300>
$output false
$multilingual true
class SET06_BtcDiscovarable : Components::BaseMainBG
{
  $rect <0,290,180,330>
  inherited method Init()
  {
    trace "SET06";
    DeviceInterface::BluetoothDevice.Discoverable = true;
    DisplayLocalDeviceName();
    DisplayTimeLeft();
  }

  $rect <250,440,480,480>
  inherited method OnShortUpKeyActivated()
  {
    /* debug UI flow in prototyper */
    $if $prototyper
      Owner.SwitchToDialog( new Settings::SET08_BtcPairDevice, null, null, null, null, null, null, null, null, null, false );
    $endif
  }

  $rect <250,340,480,380>
  inherited method OnShortHomeKeyActivated()
  {
    DeviceInterface::BluetoothDevice.Discoverable = false;
    super();
  }

  $rect <250,390,480,430>
  inherited method OnLongHomeKeyActivated()
  {
    DeviceInterface::BluetoothDevice.Discoverable = false;
    super();
  }

  $rect <0,340,180,380>
  inherited property DDModeEnabled = true;

  $rect <20,20,160,60>
  object Components::BaseText DiscoverableText
  {
    preset Bounds = <10,42,470,104>;
    preset WrapText = true;
    preset Alignment = Views::TextAlignment[AlignHorzCenter, AlignVertTop];
    preset String = Strings::SET06_DISCOVERABLE;
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <250,290,450,330>
  slot OnCancelSlot
  {
    CountDownTimer.Enabled = false;
    DeviceInterface::BluetoothDevice.Discoverable = false;
    Owner.DismissDialog( this, null, null, null, null, null, false );
  }

  $rect <20,20,160,60>
  object Components::BaseText TimeLeftText
  {
    preset Bounds = <10,169,470,200>;
    preset WrapText = true;
    preset Alignment = Views::TextAlignment[AlignHorzCenter, AlignVertCenter];
    preset String = "";
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <20,20,160,60>
  object Components::BaseText NameText
  {
    preset Bounds = <10,104,470,166>;
    preset Ellipsis = true;
    preset WrapText = true;
    preset Alignment = Views::TextAlignment[AlignHorzCenter, AlignVertTop];
    preset String = Strings::SET06_NAME;
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <500,50,720,90>
  object Core::Timer CountDownTimer
  {
    preset OnTrigger = UpdateCountDownTimeSlot;
    preset Period = 1000;
    preset Enabled = true;
  }

  $rect <500,100,740,140>
  slot UpdateCountDownTimeSlot
  {
    if( CountDownTimeSec > 0)
    {
      CountDownTimeSec = CountDownTimeSec - 1;
      DisplayTimeLeft();
    }
    else
    {
      var Settings::TimeoutDialog PairingFailDialog = new Settings::TimeoutDialog;
      PairingFailDialog.Message = Strings::SET07_PAIRING_FAILED;
      PairingFailDialog.DismissAfterTimeout = true;
      Owner.SwitchToDialog( PairingFailDialog, null, null, null, null, null, null, null, null, null, false );
    }
  }

  $rect <500,0,720,40>
  var int32 CountDownTimeSec = 180;

  $rect <20,20,160,60>
  object Menu::PushButton PushButton
  {
    preset Bounds = <165,219,315,259>;
    preset DDModeEnabled = true;
    preset Title = Strings::GEN_CANCEL;
    preset OnActivate = OnCancelSlot;
  }

  $rect <500,200,790,240>
  object Core::SystemEventHandler ConnectionStatusEventHandler
  {
    preset OnEvent = OnConnectoinStatusReceivedSlot;
    preset Event = DeviceInterface::BluetoothDevice.ConnectionStatusEvent;
  }

  // This slot method is executed when the associated system event handler 'SystemEventHandler' \
  // receives an event.
  $rect <500,250,790,290>
  slot OnConnectoinStatusReceivedSlot
  {
    if( null != Owner )
    {
      var DeviceInterface::ConnectionStatusContext ConnectionStatusContext = (DeviceInterface::ConnectionStatusContext)ConnectionStatusEventHandler.Context;
      switch( ConnectionStatusContext.Status )
      {
        case Enum::ConnectionStatus.PAIRING_FAILED:
        {
          var Settings::TimeoutDialog PairingFailDialog = new Settings::TimeoutDialog;
          PairingFailDialog.Message = Strings::SET07_PAIRING_FAILED;
          PairingFailDialog.DismissAfterTimeout = true;
          DeviceInterface::BluetoothDevice.Discoverable = false;
          Owner.SwitchToDialog( PairingFailDialog, null, null, null, null, null, null, null, null, null, false );
        }
        case Enum::ConnectionStatus.CONFIRM_PASSKEY:
        {
          DeviceInterface::BluetoothDevice.Discoverable = false;
          Owner.SwitchToDialog( new Settings::SET08_BtcPairDevice, null, null, null, null, null, null, null, null, null, false );
        }
        default:;
      }
    }
  }

  $rect <0,390,220,430>
  method void DisplayLocalDeviceName()
  {
    var Utility::String StringUtil = new Utility::String;
    NameText.String = StringUtil.ReplaceString( Strings::SET06_NAME, DeviceInterface::BluetoothDevice.LocalDeviceName );
  }

  $rect <500,150,700,190>
  method void DisplayTimeLeft()
  {
    var int32 Second = CountDownTimeSec % 60;
    var string SecondStr;
    if( Second < 10 )
    {
      SecondStr = "0" + string( Second );
    }
    else
    {
      SecondStr = string( Second );
    }

    var string LeftTime = string( CountDownTimeSec / 60 ) + ":" + SecondStr;
    var Utility::String StringUtil = new Utility::String;
    TimeLeftText.String = StringUtil.ReplaceString( Strings::SET06_TIME_LEFT, LeftTime );
  }
}

$rect <20,460,260,500>
$output false
class SET10_11_12_BtConnectionResult : Components::BaseMainBG
{
  $rect <0,390,180,430>
  inherited method Init()
  {
    trace "SET12";
  }

  $rect <0,290,200,330>
  inherited property DDModeEnabled = true;

  $rect <20,20,160,60>
  object Components::BaseText Message
  {
    preset Bounds = <10,50,470,236>;
    preset Ellipsis = true;
    preset WrapText = true;
    preset Alignment = Views::TextAlignment[AlignHorzCenter, AlignVertTop];
    preset String = "";
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <0,340,200,380>
  property string DeviceName;

  $rect <210,290,490,330>
  object Core::SystemEventHandler ConnectionStatusEventHandler
  {
    preset OnEvent = OnConnectoinStatusReceivedSlot;
    preset Event = DeviceInterface::BluetoothDevice.ConnectionStatusEvent;
  }

  // This slot method is executed when the associated system event handler 'SystemEventHandler' \
  // receives an event.
  $rect <210,340,490,380>
  slot OnConnectoinStatusReceivedSlot
  {
    var DeviceInterface::ConnectionStatusContext ConnectionStatusContext = (DeviceInterface::ConnectionStatusContext)ConnectionStatusEventHandler.Context;
    switch( ConnectionStatusContext.Status )
    {
      case Enum::ConnectionStatus.NAVI_APP_CONNECTED:
      {
        Owner.SwitchToDialog( new Settings::SET49_OnlyNaviAppConnected, null, null, null, null, null, null, null, null, null, false );
      }
      case Enum::ConnectionStatus.YAMAHA_APP_CONNECTED:
      {
        Owner.SwitchToDialog( new Settings::SET50_OnlyYahamaAppConnected, null, null, null, null, null, null, null, null, null, false );
      }
      case Enum::ConnectionStatus.YAMAHA_APP_BLE_NOT_CONNECTED:
      {
        Owner.SwitchToDialog( new Settings::SET22_WaitingConnection, null, null, null, null, null, null, null, null, null, false );
      }
      case Enum::ConnectionStatus.BOTH_APP_CONNECTED:
      {
        Owner.SwitchToDialog( new Settings::SET51_BothAppConnected, null, null, null, null, null, null, null, null, null, false );
      }
      case Enum::ConnectionStatus.CONNECTION_FAILED:
      {
        HideLoadingUI();
        var Utility::String StringUtil = new Utility::String;
        Message.String = StringUtil.ReplaceString( Strings::SET10_CONNECTION_FAILED, DeviceName );
      }
      case Enum::ConnectionStatus.AUTHENTICATION_ERR:
      {
        HideLoadingUI();
        var Utility::String StringUtil = new Utility::String;
        Message.String = StringUtil.ReplaceString( Strings::SET11_NO_LONGER_PAIRED, DeviceName );
      }
      default: Message.String = "";
    }
    DismissTimer.Enabled = true;
  }

  $rect <510,290,710,330>
  object Core::Timer DismissTimer
  {
    preset OnTrigger = OnDismissSlot;
    preset Period = 0;
    preset Begin = 2000;
  }

  $rect <510,340,710,380>
  slot OnDismissSlot
  {
    Owner.DismissDialog( this, null, null, null, null, null, false );
  }

  $rect <20,20,160,60>
  object Views::Image Divider
  {
    preset Bounds = <0,36,480,38>;
    preset Alignment = Views::ImageAlignment[AlignVertBottom, ScaleToFit];
    preset Bitmap = Resource::StatusBarDivider;
  }

  $rect <20,20,160,60>
  object Views::Image LoadingAnimation
  {
    preset Bounds = <193,54,287,148>;
    preset Animated = true;
    preset Bitmap = Resource::LoadingAnimation;
  }

  $rect <20,20,160,60>
  object Components::BaseText LoadingText
  {
    preset Bounds = <10,156,470,187>;
    preset String = Strings::GEN_PLEASE_WAIT;
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <210,390,410,430>
  method void HideLoadingUI()
  {
    LoadingText.Visible = false;
    LoadingAnimation.Visible = false;
  }

  $reorder UpdateDDModeMask 1
  $reorder DismissThisDialog 1
  $reorder SlideInDialog 1
  $reorder HideFocusFrameTimer 1
  $reorder OnHideFocusFrameTimeoutSlot 1
  $reorder ChildDialog 1
  $reorder OnDialogSlideInCompletedSlot 1
  $reorder PresentDialogWithSlideInEffect 1
  $reorder SlideOutEffectEnabled 1
  $reorder OnDialogSlideOutCompletedSlot 1
  $reorder OwnerDialog 1
  $reorder SlideOutDialog 1
  $reorder DismissMenuWithSlideOutEffect 1
  $reorder SlideDirection 1
  $reorder Message 1
  $reorder DeviceName 1
  $reorder ConnectionStatusEventHandler 1
  $reorder OnConnectoinStatusReceivedSlot 1
  $reorder DismissTimer 1
  $reorder OnDismissSlot 1
  $reorder Divider 1
}

$rect <20,210,260,250>
$output false
$multilingual true
class SET05_BtcMaxPairedDevice : Components::BaseMainBG
{
  $rect <0,290,170,330>
  inherited method Init()
  {
    trace "SET05";
  }

  $rect <0,330,170,370>
  inherited property DDModeEnabled = true;

  $rect <20,20,160,60>
  object Components::BaseText Text
  {
    preset Bounds = <10,44,470,168>;
    preset WrapText = true;
    preset Alignment = Views::TextAlignment[AlignHorzCenter, AlignVertCenter];
    preset String = Strings::SET05_MAX_DEVICES;
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <20,20,160,60>
  object Menu::UpDownPushButtonSet UpDownPushButtonSet
  {
    preset Bounds = <165,176,315,259>;
    preset PassHomeKey = true;
    preset OnUpButtonActivated = OnYesActivatedSlot;
    preset OnDownButtonActivated = OnNoActivatedSlot;
    preset UpButtonTitle = Strings::GEN_YES;
    preset DownButtonTitle = Strings::GEN_NO;
  }

  $rect <210,290,410,330>
  slot OnYesActivatedSlot
  {
    if( null != Owner )
    {
      Owner.SwitchToDialog( new Settings::SET17_BtcPairedDeviceList, null, null, null, null, null, null, null, null, null, false );
    }
  }

  $rect <210,330,410,370>
  slot OnNoActivatedSlot
  {
    if( null != Owner )
    {
      Owner.DismissDialog( this, null, null, null, null, null, false );
    }
  }
}

$rect <20,310,260,350>
$output false
$multilingual true
class SET08_BtcPairDevice : Components::BaseMainBG
{
  $rect <0,340,200,380>
  inherited method ReInit()
  {
    DisplayString();
  }

  $rect <0,290,200,330>
  inherited method Init()
  {
    trace "SET08";
    DisplayString();
  }

  $rect <0,440,200,480>
  inherited property DDModeEnabled = true;

  $rect <220,340,420,380>
  slot OnNoActivatedSlot
  {
    trace "SET08 no";
    DeviceInterface::BluetoothDevice.ConfirmPasskey( false );

    // back to SET03
    var Settings::SET04_BtSettingMenu BtSettingMenu = ( Settings::SET04_BtSettingMenu )Owner;
    if( null != BtSettingMenu )
    {
      BtSettingMenu.SlideOutEffectEnabled = false;
      BtSettingMenu.DismissThisDialog();
    }
  }

  $rect <20,20,160,60>
  object Components::BaseText PairText
  {
    preset Bounds = <10,45,470,107>;
    preset WrapText = true;
    preset Alignment = Views::TextAlignment[AlignHorzCenter, AlignVertTop];
    preset String = Strings::SET08_PAIR_WITH;
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <20,20,160,60>
  object Components::BaseText PasskeyText
  {
    preset Bounds = <10,107,470,169>;
    preset WrapText = true;
    preset Alignment = Views::TextAlignment[AlignHorzCenter, AlignVertCenter];
    preset String = Strings::SET08_PASSKEY;
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <20,20,160,60>
  object Menu::UpDownPushButtonSet UpDownPushButtonSet
  {
    preset Bounds = <165,176,315,259>;
    preset PassHomeKey = true;
    preset OnUpButtonActivated = OnYesActivatedSlot;
    preset OnDownButtonActivated = OnNoActivatedSlot;
    preset UpButtonTitle = Strings::GEN_YES;
    preset DownButtonTitle = Strings::GEN_NO;
  }

  $rect <220,290,420,330>
  slot OnYesActivatedSlot
  {
    trace "SET08 yes";
    DeviceInterface::BluetoothDevice.ConfirmPasskey( true );
    Owner.SwitchToDialog( new Settings::SET47_WaitingApproval, null, null, null, null, null, null, null, null, null, false );
  }

  $rect <0,390,200,430>
  method void DisplayString()
  {
    var string ProcessString = Strings::SET08_PAIR_WITH;
    var int32 LeftIdx = ProcessString.find( Strings::ARGUMENT_STR, 0 );
    var int32 RightIdx = ProcessString.length - LeftIdx - Strings::ARGUMENT_STR.length;
    PairText.String = ProcessString.left( LeftIdx ) + DeviceInterface::BluetoothDevice.GetBtcPairingDeviceName() + ProcessString.right( RightIdx );

    PasskeyText.String = Strings::SET08_PASSKEY + "\n" + string( DeviceInterface::BluetoothDevice.GetBtcPasskey(), Settings::BT_PASSKEY_LEN );
  }
}

$rect <20,360,260,400>
$output false
$multilingual true
class SET17_BtcPairedDeviceList : Menu::BaseMenuView
{
  $rect <0,290,180,330>
  inherited method Init()
  {
    trace "SET17";
    UpdateList();
  }

  $rect <0,340,200,380>
  inherited property DDModeEnabled = true;

  $rect <0,390,200,430>
  inherited var SlideOutEffectEnabled = true;

  $rect <520,20,730,60>
  inherited method LoadItemClass()
  {
    aItemNo; //suppress warning
    return Menu::ItemBtPairedDevice;
  }

  $rect <520,70,730,110>
  inherited method LoadItemTitle()
  {
    var string Title;
    if( aItemNo < DeviceInterface::BluetoothDevice.PairedDeviceNum )
    {
      Title = DeviceInterface::BluetoothDevice.PairedDeviceList[aItemNo].DeviceName;
    }
    return Title;
  }

  $rect <520,270,730,310>
  inherited method OnItemActivate()
  {
    aItemNo; // suppress warning

    var Menu::ItemBtPairedDevice BtDeviceItem = (Menu::ItemBtPairedDevice)aMenuItem;
    if( null != BtDeviceItem )
    {
      var Settings::SET19_BtcPairedDeviceOperation Dialog = new Settings::SET19_BtcPairedDeviceOperation;
      Dialog.DeviceAddress = BtDeviceItem.DeviceAddress;
      Dialog.DeviceName = BtDeviceItem.Title.String;
      Dialog.ConnectEnabled = !BtDeviceItem.Icon1Visible || !BtDeviceItem.Icon2Visible;
      Dialog.DisconnectEnabled = BtDeviceItem.Icon1Visible || BtDeviceItem.Icon2Visible;
      SlideInDialog( Dialog );
    }
  }

  $rect <20,20,160,60>
  inherited object Menu
  {
    preset DDModeEnabled = true;
    preset NoOfItems = 0;
    preset ItemHeight = Menu::ItemHeightSmall;
    preset ItemNumPerPage = 4;
    preset ArrowScrollBarVisible = true;
  }

  $rect <520,120,730,160>
  inherited method LoadItemIcon1Visible()
  {
    var bool result = false;
    if( aItemNo < DeviceInterface::BluetoothDevice.PairedDeviceNum )
    {
      result = DeviceInterface::BluetoothDevice.PairedDeviceList[aItemNo].IsNaviAppConnected;
    }
    return result;
  }

  $rect <520,170,730,210>
  inherited method LoadItemIcon2Visible()
  {
    var bool result = false;
    if( aItemNo < DeviceInterface::BluetoothDevice.PairedDeviceNum )
    {
      result = DeviceInterface::BluetoothDevice.PairedDeviceList[aItemNo].IsYamahaAppConnected;
    }
    return result;
  }

  $rect <220,390,440,430>
  method void UpdateList()
  {
    Menu.NoOfItems = DeviceInterface::BluetoothDevice.PairedDeviceNum;

    if( 0 < DeviceInterface::BluetoothDevice.PairedDeviceNum )
    {
      NoDataTimeoutTimer.Enabled = false;
      Menu.InvalidateItems( 0, Menu.NoOfItems - 1 );
      NoDataText.Visible = false;
    }
    else
    {
      NoDataTimeoutTimer.Enabled = true;
      NoDataText.Visible = true;
    }
  }

  $rect <20,20,160,60>
  object Components::BaseText NoDataText
  {
    preset Bounds = <10,50,470,236>;
    preset String = "No data";
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <220,440,420,480>
  object Core::Timer NoDataTimeoutTimer
  {
    preset OnTrigger = OnNoDataTimeoutSlot;
    preset Begin = 2000;
  }

  $rect <223,489,423,529>
  slot OnNoDataTimeoutSlot
  {
    if( null != Owner )
    {
      SlideOutDialog();
    }
  }

  $rect <520,220,730,260>
  inherited method LoadItemDeviceAddress()
  {
    var uint64 DeviceAddress = 0;
    if( aItemNo < DeviceInterface::BluetoothDevice.PairedDeviceNum )
    {
      DeviceAddress = DeviceInterface::BluetoothDevice.PairedDeviceList[aItemNo].DeviceAddress;
    }
    return DeviceAddress;
  }

  $rect <220,290,500,330>
  object Core::SystemEventHandler ConnectionStatusEventHandler
  {
    preset OnEvent = OnConnectoinStatusReceivedSlot;
    preset Event = DeviceInterface::BluetoothDevice.ConnectionStatusEvent;
  }

  // This slot method is executed when the associated system event handler 'SystemEventHandler' \
  // receives an event.
  $rect <220,340,500,380>
  slot OnConnectoinStatusReceivedSlot
  {
    if( null != Owner )
    {
      var DeviceInterface::ConnectionStatusContext ConnectionStatusContext = (DeviceInterface::ConnectionStatusContext)ConnectionStatusEventHandler.Context;
      switch( ConnectionStatusContext.Status )
      {
        case Enum::ConnectionStatus.PAIRED_DEVICE_LIST_UPDATED: UpdateList();
        default:;
      }
    }
  }

  $reorder UpdateList 1
  $reorder NoDataText 1
  $reorder NoDataTimeoutTimer 1
  $reorder OnNoDataTimeoutSlot 1
}

$rect <20,410,260,450>
$output false
class SET19_BtcPairedDeviceOperation : Menu::BaseMenuView
{
  $rect <10,300,190,340>
  inherited method Init()
  {
    trace "SET19";
  }

  $rect <230,350,430,390>
  inherited property DDModeEnabled = true;

  $rect <230,300,430,340>
  inherited var SlideOutEffectEnabled = true;

  $rect <510,20,710,60>
  inherited method LoadItemClass()
  {
    // suppress warning
    aItemNo;

    return Menu::ItemBase;

  }

  $rect <510,70,710,110>
  inherited method LoadItemTitle()
  {
    var string Title = "";

    switch( aItemNo )
    {
      case 0: Title = Strings::SET19_DELETE_PAIRING;
      case 1: Title = Strings::SET19_CONNECT;
      case 2: Title = Strings::SET19_DISCONNECT;
      default:;
    }

    return Title;
  }

  $rect <510,170,710,210>
  inherited method OnItemActivate()
  {
    // suppress warning
    aMenuItem;

    switch( aItemNo )
    {
      case 0:
      {
        DeviceInterface::BluetoothDevice.UnpairDevice( DeviceAddress );
        SlideOutDialog();
      }
      case 1:
      {
        var Settings::SET10_11_12_BtConnectionResult Dialog = new Settings::SET10_11_12_BtConnectionResult;
        Dialog.DeviceName = DeviceName;
        var Menu::BaseMenuView OwnerMenu = (Menu::BaseMenuView)Owner;
        if( null != OwnerMenu )
        {
          OwnerMenu.Menu.FocusFrame.Visible = true;
        }
        Owner.SwitchToDialog( Dialog, null, null, null, null, null, null, null, null, null, false );
        DeviceInterface::BluetoothDevice.ConnectPairedDevice( DeviceAddress );
      }
      case 2:
      {
        DeviceInterface::BluetoothDevice.DisconnectPairedDevice( DeviceAddress );
        SlideOutDialog();
      }
      default:;
    }
  }

  $rect <510,120,710,160>
  inherited method LoadItemEnabled()
  {
    var bool OptionEnabled = false;

    switch( aItemNo )
    {
      case 0: OptionEnabled = true;
      case 1: OptionEnabled = ConnectEnabled;
      case 2: OptionEnabled = DisconnectEnabled;
      default:;
    }

    return OptionEnabled;
  }

  $rect <20,20,160,60>
  inherited object Menu
  {
    preset DDModeEnabled = true;
    preset NoOfItems = 3;
  }

  $rect <10,350,210,390>
  property uint64 DeviceAddress;

  $rect <10,400,210,440>
  property string DeviceName;

  $rect <10,450,210,490>
  property bool ConnectEnabled = false;

  $rect <10,500,210,540>
  property bool DisconnectEnabled = false;
}

$rect <20,510,260,550>
$output false
class BtFwUpdateDialog : Core::Group
{
  $rect <10,300,230,340>
  inherited property Bounds = <0,0,480,272>;

  $rect <20,20,160,60>
  object Views::Rectangle Rectangle
  {
    preset Bounds = <0,0,480,272>;
    preset Color = #000000FF;
  }

  $rect <20,20,160,60>
  object Components::BaseText StatusText
  {
    preset Bounds = <80,60,380,210>;
    preset WrapText = true;
    preset String = "Updating BT firmware, please wait...";
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
    preset Color = #FFFFFFFF;
  }

  // This slot method is executed when the associated property observer 'PropertyObserver' \
  // is notified.
  $rect <10,400,240,440>
  slot OnBtmStatusUpdateSlot
  {
    var DeviceInterface::BtmStatusContext BtmStatusContext = (DeviceInterface::BtmStatusContext)BtmStatusEventHandler.Context;
    switch( BtmStatusContext.Status )
    {
      case Enum::BtmStatus.UPDATE_FINISH:
      {
        StatusText.String = "Update BT firmware complete";
        RemoveDialogTimer.Enabled = true;
      }
      case Enum::BtmStatus.UPDATE_ABORT:
      {
        StatusText.String = "Update BT firmware fail";
        RemoveDialogTimer.Enabled = true;
      }
      default:;
    }
  }

  $rect <260,300,460,340>
  object Core::Timer RemoveDialogTimer
  {
    preset OnTrigger = OnRemoveDialogSlot;
    preset Period = 2000;
  }

  $rect <260,352,460,392>
  slot OnRemoveDialogSlot
  {
    GetRoot().EndModal( this );
    GetRoot().Remove( this );
  }

  $rect <10,350,230,390>
  object Core::SystemEventHandler BtmStatusEventHandler
  {
    preset OnEvent = OnBtmStatusUpdateSlot;
    preset Event = DeviceInterface::BluetoothDevice.BtmStatusEvent;
  }
}

$rect <280,10,520,50>
$output false
$multilingual true
class TimeoutDialog : Components::BaseMainBG
{
  $rect <20,290,200,330>
  inherited property DDModeEnabled = true;

  $rect <20,20,160,60>
  object Components::BaseText MessageText
  {
    preset Bounds = <10,50,470,236>;
    preset Ellipsis = true;
    preset WrapText = true;
    preset String = "";
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <230,290,430,330>
  property string Message;

  $rect <230,330,430,370>
  onset Message
  {
    if( pure Message != value )
    {
      pure Message = value;
      MessageText.String = value;
    }
  }

  $rect <460,290,660,330>
  object Core::Timer TimeoutTimer
  {
    preset OnTrigger = OnTimeoutSlot;
    preset Period = 0;
    preset Begin = 2000;
    preset Enabled = true;
  }

  $rect <460,330,660,370>
  slot OnTimeoutSlot
  {
    if( DismissAfterTimeout )
    {
      if( null != Owner )
      {
        Owner.DismissDialog( this, null, null, null, null, null, false );
      }
    }
    else
    {
      postsignal OnTimeout;
    }
  }

  $rect <460,370,660,410>
  property slot OnTimeout;

  $rect <230,380,430,420>
  property bool DismissAfterTimeout = false;
}

$rect <600,110,800,150>
$output false
$multilingual true
class SET30_QRCode : Components::BaseMainBG
{
  $rect <10,290,210,330>
  inherited method Init()
  {
    trace "SET30";
    $if !$prototyper
      if( DeviceInterface::SystemDevice.GetSystemStatus( Enum::SystemStatus.IS_QRCODE_READY ) )
      {
        trace "OnQrCodeReady";
        QrCodeImage.Bitmap = Resource::QrCodeExternBitmap;
        Resource::QrCodeExternBitmap.Name = Resource::EXTERN_BMP_QRCODE;
        Resource::QrCodeExternBitmap.Reload();
      }
    $endif

    DeviceInterface::SystemDevice.SendSystemCommand( Enum::SystemTxCmd.ENABLE_TFT_BRIGHTNESS_MANUAL_ADJ );
    postsignal UpdateBrightnessButtonEnabled;
  }

  $rect <250,390,470,430>
  inherited method OnShortDownKeyActivated()
  {
    BrightnessDownButton.DisplayHighlightAnimation();
    DeviceInterface::SystemDevice.SendSystemCommand( Enum::SystemTxCmd.ADJ_TFT_BRIGHTNESS_LEVEL_DOWN );
    postsignal UpdateBrightnessButtonEnabled;
  }

  $rect <250,340,470,380>
  inherited method OnShortUpKeyActivated()
  {
    BrightnessUpButton.DisplayHighlightAnimation();
    DeviceInterface::SystemDevice.SendSystemCommand( Enum::SystemTxCmd.ADJ_TFT_BRIGHTNESS_LEVEL_UP );
    postsignal UpdateBrightnessButtonEnabled;
  }

  $rect <250,440,480,480>
  inherited method OnShortHomeKeyActivated()
  {
    DeviceInterface::SystemDevice.SendSystemCommand( Enum::SystemTxCmd.DISABLE_TFT_BRIGHTNESS_MANUAL_ADJ );
    super();
  }

  $rect <250,490,480,530>
  inherited method OnLongHomeKeyActivated()
  {
    DeviceInterface::SystemDevice.SendSystemCommand( Enum::SystemTxCmd.DISABLE_TFT_BRIGHTNESS_MANUAL_ADJ );
    super();
  }

  $rect <10,390,210,430>
  inherited property DDModeEnabled = true;

  $rect <20,20,160,60>
  object Views::Rectangle WhiteMargin
  {
    preset Bounds = <174,63,306,195>;
  }

  $rect <20,20,160,60>
  object Views::Image QrCodeImage
  {
    preset Bounds = <174,63,306,195>;
    preset Alignment = Views::ImageAlignment[AlignHorzCenter, AlignVertCenter];
  }

  $rect <20,20,160,60>
  object Menu::PushButton PushButton
  {
    preset Bounds = <165,219,315,259>;
    preset DDModeEnabled = true;
    preset Title = Strings::GEN_OK;
    preset OnActivate = OnOkSelectedSlot;
  }

  $rect <250,290,450,330>
  slot OnOkSelectedSlot
  {
    DeviceInterface::SystemDevice.SendSystemCommand( Enum::SystemTxCmd.DISABLE_TFT_BRIGHTNESS_MANUAL_ADJ );
    DismissThisDialog();
  }

  $rect <20,20,160,60>
  object Telephone::ImageButton BrightnessUpButton
  {
    preset Bounds = <0,39,94,114>;
    preset ForegroundBmp = Resource::PhoneVolumeUp;
  }

  $rect <20,20,160,60>
  object Telephone::ImageButton BrightnessDownButton
  {
    preset Bounds = <0,189,94,264>;
    preset ForegroundBmp = Resource::PhoneVolumeDown;
  }

  $rect <20,20,160,60>
  object Views::Image BrightnessIcon
  {
    preset Bounds = <0,114,95,189>;
    preset Bitmap = Resource::Brightness;
  }

  $rect <506,290,790,330>
  slot UpdateBrightnessButtonEnabled
  {
    if( DeviceInterface::SystemDevice.GetSystemStatus( Enum::SystemStatus.IS_TFT_BRIGHTNESS_LEVEL_MAX ) )
    {
      BrightnessUpButton.Enabled = false;
    }
    else
    {
      BrightnessUpButton.Enabled = true;
    }

    if( DeviceInterface::SystemDevice.GetSystemStatus( Enum::SystemStatus.IS_TFT_BRIGHTNESS_LEVEL_MIN ) )
    {
      BrightnessDownButton.Enabled = false;
    }
    else
    {
      BrightnessDownButton.Enabled = true;
    }
  }
}

$rect <280,60,520,100>
$output false
$multilingual true
class SET22_WaitingConnection : Components::BaseMainBG
{
  $rect <0,340,200,380>
  inherited method ReInit()
  {
    DisplayString();
  }

  $rect <0,290,180,330>
  inherited method Init()
  {
    trace "SET23";

    var string ProcessString = Strings::SET22_WAIT_APP_CONNECTION;
    var int32 LeftIdx = ProcessString.find( Strings::ARGUMENT_STR, 0 );
    var int32 RightIdx = ProcessString.length - LeftIdx - Strings::ARGUMENT_STR.length;
    WaitText.String = ProcessString.left( LeftIdx ) + DeviceInterface::BluetoothDevice.GetBtcPairingDeviceName() + ProcessString.right( RightIdx );
  }

  $rect <790,290,1020,330>
  inherited method OnShortUpKeyActivated()
  {
    /* for debug UI flow in prototyper */
    $if $prototyper
      Owner.SwitchToDialog( new Settings::SET23_PairingFail, null, null, null, null, null, null, null, null, null, false );
    $endif
  }

  $rect <0,440,180,480>
  inherited property DDModeEnabled = true;

  $rect <20,20,160,60>
  object Components::BaseText WaitText
  {
    preset Bounds = <10,131,470,255>;
    preset WrapText = true;
    preset String = Strings::SET22_WAIT_APP_CONNECTION;
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <20,20,160,60>
  object Views::Image Image
  {
    preset Bounds = <193,36,287,130>;
    preset Animated = true;
    preset FrameNumber = 0;
    preset Bitmap = Resource::LoadingAnimation;
  }

  $rect <0,390,200,430>
  method void DisplayString()
  {
    var string ProcessString = Strings::SET22_WAIT_APP_CONNECTION;
    var int32 LeftIdx = ProcessString.find( Strings::ARGUMENT_STR, 0 );
    var int32 RightIdx = ProcessString.length - LeftIdx - Strings::ARGUMENT_STR.length;
    WaitText.String = ProcessString.left( LeftIdx ) + DeviceInterface::BluetoothDevice.GetBtcPairingDeviceName() + ProcessString.right( RightIdx );
  }

  $rect <240,290,510,330>
  object Core::SystemEventHandler ConnectionStatusEventHandler
  {
    preset OnEvent = OnConnectoinStatusReceivedSlot;
    preset Event = DeviceInterface::BluetoothDevice.ConnectionStatusEvent;
  }

  // This slot method is executed when the associated system event handler 'SystemEventHandler' \
  // receives an event.
  $rect <240,340,520,380>
  slot OnConnectoinStatusReceivedSlot
  {
    if( null != Owner )
    {
      var DeviceInterface::ConnectionStatusContext ConnectionStatusContext = (DeviceInterface::ConnectionStatusContext)ConnectionStatusEventHandler.Context;
      switch( ConnectionStatusContext.Status )
      {
        case Enum::ConnectionStatus.PAIRING_FAILED:
        {
          HandlePairingFail();
        }
        case Enum::ConnectionStatus.YAMAHA_APP_CONNECTED:
        {
          DeviceInterface::BluetoothDevice.PairingFailCount = 0;
          Owner.SwitchToDialog( new Settings::SET26_PairingSuccessful, null, null, null, null, null, null, null, null, null, false );
        }
        default:;
      }
    }
  }

  $rect <540,290,760,330>
  object Core::Timer TimeoutTimer
  {
    preset OnTrigger = OnTimeoutSlot;
    preset Period = 0;
    preset Begin = 60000;
    preset Enabled = true;
  }

  $rect <540,340,760,380>
  slot OnTimeoutSlot
  {
    HandlePairingFail();
  }

  $rect <240,390,440,430>
  method void HandlePairingFail()
  {
    if( null != Owner && IsCurrentDialog() )
    {
      DeviceInterface::BluetoothDevice.PairingFailCount++;
      Owner.SwitchToDialog( new Settings::SET23_PairingFail, null, null, null, null, null, null, null, null, null, false );
    }
  }
}

$rect <280,110,520,150>
$output false
$multilingual true
class SET23_PairingFail : Settings::TimeoutDialog
{
  $rect <10,290,190,330>
  inherited method Init()
  {
    trace "SET23";
  }

  $rect <20,20,160,60>
  inherited object MessageText
  {
    preset String = Strings::SET23_PAIRING_FAILED;
  }

  $rect <10,340,190,380>
  inherited slot OnTimeoutSlot
  {
    if( 1 < DeviceInterface::BluetoothDevice.PairingFailCount )
    {
      Owner.SwitchToDialog( new Settings::SET24_CheckPairingRecord, null, null, null, null, null, null, null, null, null, false );
    }
    else
    {
      if( DeviceInterface::BluetoothDevice.IsPairingDeviceYamahaAppSPPConnected() )
      {
        Owner.SwitchToDialog( new Settings::SET48_ReconnectYamahaApp, null, null, null, null, null, null, null, null, null, false );
      }
      else
      {
        var Settings::SET04_BtSettingMenu BtSettingMenu = (Settings::SET04_BtSettingMenu)Owner;
        if( null != BtSettingMenu )
        {
          BtSettingMenu.SwitchToDialog( new Settings::SET17_BtcPairedDeviceList, null, null, null, null, null, null, null, null, null, false );
        }
      }
    }
  }

  $reorder Message 1
  $reorder OnSetMessage 1
  $reorder OnTimeout 3
}

$rect <280,160,520,200>
$output false
$multilingual true
class SET24_CheckPairingRecord : Components::BaseMainBG
{
  $rect <0,290,180,330>
  inherited method Init()
  {
    trace "SET24";
  }

  $rect <0,340,180,380>
  inherited property DDModeEnabled = true;

  $rect <20,20,160,60>
  object Components::BaseText MessageText
  {
    preset Bounds = <10,46,470,201>;
    preset WrapText = true;
    preset String = Strings::SET24_CHECK_BT_PAIRING_RECORD;
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <20,20,160,60>
  object Menu::PushButton PushButton
  {
    preset Bounds = <165,219,315,259>;
    preset Title = Strings::GEN_OK;
    preset OnActivate = OnOkActivatedSlot;
  }

  $rect <210,290,410,330>
  slot OnOkActivatedSlot
  {
    var Settings::SET04_BtSettingMenu BtSettingMenu = (Settings::SET04_BtSettingMenu)Owner;
    if( null != BtSettingMenu )
    {
      BtSettingMenu.SwitchToDialog( new Settings::SET17_BtcPairedDeviceList, null, null, null, null, null, null, null, null, null, false );
    }
  }
}

$rect <600,60,800,100>
$output false
$multilingual true
class SET28_SystemInfo : Components::BaseMainBG
{
  $rect <520,50,720,90>
  inherited method Init()
  {
    trace "SET28";
    EsnText.String = DeviceInterface::SystemDevice.ESN;
    SoftwareVersionText.String = DeviceInterface::SystemDevice.SoftwareVersion;
    UpDownPushButtonSet.DownButtonEnabled = DeviceInterface::SystemDevice.IsSoftwareUpdateEnabled;

    $if $prototyper
      // for screenshot
      EsnText.String = "XXXXXXXXX";
      SoftwareVersionText.String = "XX.XX.XXX";
    $endif
  }

  $rect <10,290,210,330>
  inherited property Bounds = <0,0,480,272>;

  $rect <520,110,750,150>
  inherited method OnShortMagicKeyActivated()
  {
    this.PresentDialog( new Development::DEV_Main, null, null, null, null, null, null, null, null, false );
  }

  $rect <10,340,210,380>
  inherited property DDModeEnabled = true;

  $rect <10,390,210,430>
  inherited property MagicKeyEnabled = true;

  $rect <20,20,160,60>
  object Components::BaseText ESN
  {
    preset Bounds = <10,45,470,76>;
    preset String = Strings::SET28_ESN;
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <20,20,160,60>
  object Components::BaseText SoftwareVersionTitle
  {
    preset Bounds = <10,107,470,138>;
    preset String = Strings::SET28_SW_VERSION;
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <20,20,160,60>
  object Components::BaseText EsnText
  {
    preset Bounds = <10,76,470,107>;
    preset String = "";
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <20,20,160,60>
  object Components::BaseText SoftwareVersionText
  {
    preset Bounds = <10,138,470,169>;
    preset String = DeviceInterface::SystemDevice.SoftwareVersion;
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <520,260,720,300>
  object Core::PropertyObserver EsnObserver
  {
    preset OnEvent = OnEsnReceivedSlot;
    preset Outlet = ^DeviceInterface::SystemDevice.ESN;
  }

  // This slot method is executed when the associated property observer 'PropertyObserver' \
  // is notified.
  $rect <520,300,720,340>
  slot OnEsnReceivedSlot
  {
    EsnText.String = DeviceInterface::SystemDevice.ESN;
  }

  $rect <20,20,160,60>
  object Menu::UpDownPushButtonSet UpDownPushButtonSet
  {
    preset Bounds = <95,176,385,259>;
    preset PassHomeKey = true;
    preset PassMagicKey = true;
    preset DDModeEnabled = true;
    preset OnUpButtonActivated = OnUnitIdButtonActivatedSlot;
    preset OnDownButtonActivated = OnSoftwareUpdateButtonActivatedSlot;
    preset UpButtonTitle = Strings::SET28_UNIT_ID;
    preset DownButtonTitle = Strings::SET28_SW_UPDATE;
    preset DownButtonEnabled = false;
  }

  $rect <520,160,760,200>
  slot OnUnitIdButtonActivatedSlot
  {
    PresentDialog( new Settings::SET30_QRCode, null, null, null, null, null, null, null, null, false );
  }

  $rect <20,20,160,60>
  object Views::Image Divider
  {
    preset Bounds = <0,36,480,38>;
    preset Alignment = Views::ImageAlignment[AlignVertBottom, ScaleToFit];
    preset Bitmap = Resource::StatusBarDivider;
  }

  $rect <530,380,790,420>
  object Core::SystemEventHandler ReceivedSystemEventHandler
  {
    preset OnEvent = OnSystemEventReceived;
    preset Event = DeviceInterface::SystemDevice.SystemDataReceivedSystemEvent;
  }

  // This slot method is executed when the associated system event handler 'SystemEventHandler' \
  // receives an event.
  $rect <530,420,790,460>
  slot OnSystemEventReceived
  {
    var DeviceInterface::SystemData SystemData = ( DeviceInterface::SystemData )ReceivedSystemEventHandler.Context;
    if( null != SystemData )
    {
      switch( SystemData.RxEvent )
      {
        case Enum::SystemRxEvent.SW_UPDATE_ENABLE: UpDownPushButtonSet.DownButtonEnabled = true;
        case Enum::SystemRxEvent.SW_UPDATE_DISABLE: UpDownPushButtonSet.DownButtonEnabled = false;
        default:;
      }
    }
  }

  $rect <520,210,840,250>
  slot OnSoftwareUpdateButtonActivatedSlot
  {
    PresentDialog( new Settings::SET27_ConfirmUpdate, null, null, null, null, null, null, null, null, false );
  }
}

$rect <20,560,250,600>
$output false
const int32 BT_PASSKEY_LEN = 6;

$rect <600,260,800,300>
$output false
class LicenseDetail : Core::Group
{
  $rect <430,60,630,100>
  inherited method ReInit()
  {
    TitleText.String = Strings::SET35_LICENSE;
  }

  $rect <430,10,630,50>
  inherited property Bounds = <0,0,388,211>;

  $rect <20,20,160,60>
  object Components::BaseText TitleText
  {
    preset Bounds = <0,0,388,31>;
    preset Alignment = Views::TextAlignment[AlignHorzLeft, AlignVertCenter];
    preset String = Strings::SET35_LICENSE;
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <20,20,160,60>
  object Components::BaseText LicenseText
  {
    preset Bounds = <0,61,388,1301>;
    preset RowDistance = 30;
    preset AutoSize = true;
    preset WrapText = true;
    preset Alignment = Views::TextAlignment[AlignHorzLeft, AlignVertTop];
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <430,110,630,150>
  method int32 ScrollUpPage()
  {
    if( !ScrollEffect.Enabled &&
        ScrollOffsetY < 0 )
    {
      var int32 NextScrollOffsetY = ScrollOffsetY + Bounds.h;

      if( NextScrollOffsetY > 0 )
      {
        NextScrollOffsetY = 0;
      }

      ScrollEffect.Value1 = ScrollOffsetY;
      ScrollEffect.Value2 = NextScrollOffsetY;
      ScrollEffect.Enabled = true;

      LineToScroll = NextScrollOffsetY.abs / LicenseText.RowDistance + Settings::DETAIL_TOTAL_LINE_NUM - 1;
      trace "LineToScroll ", LineToScroll;
    }

    return LineToScroll;
  }

  $rect <430,150,630,190>
  method int32 ScrollDownPage()
  {
    if( !ScrollEffect.Enabled )
    {
      var int32 NextScrollOffsetY = ScrollOffsetY - Bounds.h;
      var int32 MaxScrollOffset = NoOfLines * LicenseText.RowDistance - Bounds.h;
      if( MaxScrollOffset < 0 )
      {
        MaxScrollOffset = 0;
      }

      if( NextScrollOffsetY.abs > MaxScrollOffset )
      {
        NextScrollOffsetY = -1 * ( MaxScrollOffset );
      }

      ScrollEffect.Value1 = ScrollOffsetY;
      ScrollEffect.Value2 = NextScrollOffsetY;
      ScrollEffect.Enabled = true;

      LineToScroll = NextScrollOffsetY.abs / LicenseText.RowDistance + Settings::DETAIL_TOTAL_LINE_NUM - 1;
      trace "LineToScroll ", LineToScroll;
    }

    return LineToScroll;
  }

  $rect <650,10,850,50>
  var int32 LineToScroll;

  $rect <880,110,1080,150>
  object Effects::Int32Effect ScrollEffect
  {
    preset OnFinished = null;
    preset OnAnimate = null;
    preset Exponent = 4.19;
    preset Timing = Effects::Timing.Exp_Out;
    preset NoOfCycles = 1;
    preset CycleDuration = 200;
    preset InitialDelay = 0;
    preset Outlet = ^ScrollOffsetY;
  }

  $rect <880,150,1080,190>
  property slot OnLineNumUpdated;

  $rect <660,110,860,150>
  property int32 ScrollOffsetY = 0;

  $rect <660,150,860,190>
  onset ScrollOffsetY
  {
    if( pure ScrollOffsetY != value )
    {
      pure ScrollOffsetY = value;

      var rect NewBounds = TitleInitBounds;
      NewBounds.y1 = value;
      NewBounds.y2 = NewBounds.y1 + TitleInitBounds.h;
      TitleText.Bounds = NewBounds;

      NewBounds = LicenseInitBounds;
      NewBounds.y1 = NewBounds.y1 + value;
      NewBounds.y2 = NewBounds.y1 + LicenseInitBounds.h;
      LicenseText.Bounds = NewBounds;
    }
  }

  $rect <870,10,1070,50>
  method void UpdateLineNum()
  {
    NoOfLines = LicenseText.GetNoOfRows() + 2;
    signal OnLineNumUpdated;
  }

  $rect <870,50,1070,90>
  property int32 NoOfLines;

  $rect <1080,10,1280,50>
  var rect TitleInitBounds = <0,0,388,31>;

  $rect <1080,50,1280,90>
  var rect LicenseInitBounds = <0,61,388,1301>;
}

// Max line number per page on the license UI.
$rect <20,610,250,650>
$output false
const int32 DETAIL_TOTAL_LINE_NUM = 7;

$rect <600,430,810,470>
$output false
class SET43_ResetMenu : Menu::BaseMenuView
{
  $rect <10,290,190,330>
  inherited method Init()
  {
    trace "SET43";
  }

  $rect <10,340,210,380>
  inherited property DDModeEnabled = true;

  $rect <10,390,210,430>
  inherited var SlideOutEffectEnabled = true;

  $rect <510,20,710,60>
  inherited method LoadItemClass()
  {
    aItemNo; // suppress warning
    return Menu::ItemBase;
  }

  $rect <510,70,710,110>
  inherited method LoadItemTitle()
  {
    var string Title = "";
    switch( aItemNo )
    {
      case 0: Title = Strings::SET43_TRIP_MILEAGE_RESET;
      case 1: Title = Strings::SET43_MAINTENANCE_RESET;
      case 2: Title = Strings::SET43_VEHICLE_INFO;
      case 3: Title = Strings::SET43_ALL_RESET;
      default:;
    }
    return Title;
  }

  $rect <510,120,710,160>
  inherited method OnItemActivate()
  {
    aMenuItem; //suppress warning

    switch( aItemNo )
    {
      case 0: SlideInDialog( new Settings::SET45_TripMileageReset );
      case 1: SlideInDialog( new Maintenance::MNT01_MaintenanceReset );
      case 2: SlideInDialog( new Settings::SET46_VehicleInfoReset );
      case 3:
      {
        if( DeviceInterface::SystemDevice.IsHopperTestMode )
        {
          // not run all reset in the hopper test mode
        }
        else
        {
          SlideInDialog( new Settings::SET38_ConfirmAllReset );
        }
      }
      default :;
    }
  }

  $rect <20,20,160,60>
  inherited object Menu
  {
    preset DDModeEnabled = true;
    preset NoOfItems = 4;
    preset ArrowScrollBarVisible = true;
  }
}

$rect <600,630,810,670>
$output false
$multilingual true
class SET42_ResetCompleted : Components::BaseMainBG
{
  $rect <10,300,190,340>
  inherited method Init()
  {
    trace "SET42";
    DeviceInterface::VehicleDevice.SetData( Enum::VehicleTxType.REBOOT_REQUEST, 0 );
  }

  $rect <210,300,440,340>
  inherited method OnShortHomeKeyActivated()
  {
    // neglect home key event
  }

  $rect <210,350,440,390>
  inherited method OnLongHomeKeyActivated()
  {
    // neglect home key event
  }

  $rect <10,350,190,390>
  inherited property DDModeEnabled = true;

  $rect <20,20,160,60>
  object Components::BaseText MessageText
  {
    preset Bounds = <10,50,470,236>;
    preset Ellipsis = true;
    preset WrapText = true;
    preset String = Strings::SET42_RESET_COMPLETE;
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <470,300,730,340>
  object Core::SystemEventHandler ReceivedSystemEventHandler
  {
    preset OnEvent = OnSystemEventReceived;
    preset Event = DeviceInterface::SystemDevice.SystemDataReceivedSystemEvent;
  }

  // This slot method is executed when the associated system event handler 'SystemEventHandler' \
  // receives an event.
  $rect <470,350,730,390>
  slot OnSystemEventReceived
  {
    var DeviceInterface::SystemData SystemData = ( DeviceInterface::SystemData )ReceivedSystemEventHandler.Context;
    if( null != SystemData )
    {
      switch( SystemData.RxEvent )
      {
        case Enum::SystemRxEvent.REBOOT_ACCEPTED,
             Enum::SystemRxEvent.REBOOT_REJECTED:
        {
          if( IsHoldTimerFinished )
          {
            DeviceInterface::SystemDevice.RebootSystem();
          }
          else
          {
            IsRebootResponseReceived = true;
          }
        }
        default:;
      }
    }
  }

  $rect <760,300,960,340>
  object Core::Timer HoldTimer
  {
    preset OnTrigger = OnHoldTimerFinishedSlot;
    preset Period = 0;
    preset Begin = 2000;
    preset Enabled = true;
  }

  $rect <760,350,990,390>
  slot OnHoldTimerFinishedSlot
  {
    if( IsRebootResponseReceived ||
        DeviceInterface::VehicleDevice.IsResReprogramInfoTimeoutErr1Detected )
    {
      DeviceInterface::SystemDevice.RebootSystem();
    }
    else
    {
      IsHoldTimerFinished = true;
    }
  }

  $rect <760,400,960,440>
  var bool IsHoldTimerFinished;

  $rect <470,400,720,440>
  var bool IsRebootResponseReceived;
}

$rect <840,430,1060,470>
$output false
class SET45_TripMileageReset : Menu::BaseMenuView
{
  $rect <0,290,200,330>
  inherited method Init()
  {
    trace "SET45";

    SetNoOfMenuItems();
    GetMileageSetting();
  }

  $rect <230,340,430,380>
  inherited property DDModeEnabled = true;

  $rect <230,290,430,330>
  inherited var SlideOutEffectEnabled = true;

  $rect <510,20,710,60>
  inherited method LoadItemClass()
  {
    aItemNo; //suppress warning
    return Menu::ItemValueUnit;
  }

  $rect <510,70,710,110>
  inherited method LoadItemTitle()
  {
    var string Title = "";
    switch( SupportedSetting[aItemNo] )
    {
      case Enum::MeterInfo.TRIP1: Title = Strings::INF26_TRIP_1;
      case Enum::MeterInfo.TRIP2: Title = Strings::INF26_TRIP_2;
      case Enum::MeterInfo.TRIP_F: Title = Strings::INF26_TRIP_F;
      default:;
    }
    return Title;
  }

  $rect <510,220,710,260>
  inherited method OnItemActivate()
  {
    aMenuItem; // suppress warning

    var Pop::POP04_Reset ResetDialog = new Pop::POP04_Reset;
    ResetDialog.SelectedMeterInfo = SupportedSetting[aItemNo];
    PresentDialog( ResetDialog, null, null, null, null, null, null, null, null, false );
  }

  $rect <510,270,710,310>
  inherited method LoadItemEnabled()
  {
    var bool ItemEnabled = true;
    if( Enum::MeterInfo.TRIP_F == SupportedSetting[aItemNo] )
    {
      var DeviceInterface::VehicleDataClass VehicleData = DeviceInterface::VehicleDevice.GetData( Enum::VehicleRxType.LOW_FUEL_WARNING );
      if( VehicleData.Valid )
      {
        // enabled TRIP-F only when the low fuel warning is on.
        // (disable TRIP-F when the low fuel warning is off.)
        if( false == (bool)VehicleData.DataUInt32 )
        {
          ItemEnabled = false;
        }
      }
    }
    return ItemEnabled;
  }

  $rect <20,20,160,60>
  inherited object Menu
  {
    preset ItemHeight = Menu::ItemHeightTall;
  }

  $rect <510,170,710,210>
  inherited method LoadItemUnit()
  {
    aItemNo; // suppress warning

    var string UnitString;
    switch( MileageSetting )
    {
      case Enum::MileageSettingItem.KM: UnitString = Strings::UNT02_UNIT_MILEAGE_KILOMETER;
      case Enum::MileageSettingItem.MILE: UnitString = Strings::UNT02_UNIT_MILEAGE_MILE;
      default:;
    }

    return UnitString;
  }

  $rect <510,120,710,160>
  inherited method LoadItemValue()
  {
    var string Value;
    var DeviceInterface::VehicleDataClass VehicleData;

    switch( SupportedSetting[aItemNo] )
    {
      case Enum::MeterInfo.TRIP1: VehicleData = DeviceInterface::VehicleDevice.GetData( Enum::VehicleRxType.TRIP1_VALUE );
      case Enum::MeterInfo.TRIP2: VehicleData = DeviceInterface::VehicleDevice.GetData( Enum::VehicleRxType.TRIP2_VALUE );
      case Enum::MeterInfo.TRIP_F:
      {
        // display value of TRIP-F when low fuel warning is on, otherwise, display "---"
        if( DeviceInterface::VehicleDevice.LowFuelWarning )
        {
          VehicleData = DeviceInterface::VehicleDevice.GetData( Enum::VehicleRxType.TRIP_F_VALUE );
        }
        else
        {
          VehicleData = new DeviceInterface::VehicleDataClass;
          VehicleData.Valid = false;
        }
      }
      default: VehicleData.Valid = false;
    }

    if( VehicleData.Valid )
    {
      if( Enum::MileageSettingItem.MILE == MileageSetting )
      {
        VehicleData.DataFloat *= Unit::KM_TO_MILE_SCALE;
      }

      switch( SupportedSetting[aItemNo] )
      {
        case Enum::MeterInfo.TRIP1: VehicleData.DataFloat = DeviceInterface::VehicleDevice.ClampDataFloat( VehicleData.DataFloat, 0, Settings::MAX_METER_TRIP_1 );
        case Enum::MeterInfo.TRIP2: VehicleData.DataFloat = DeviceInterface::VehicleDevice.ClampDataFloat( VehicleData.DataFloat, 0, Settings::MAX_METER_TRIP_2 );
        case Enum::MeterInfo.TRIP_F: VehicleData.DataFloat = DeviceInterface::VehicleDevice.ClampDataFloat( VehicleData.DataFloat, 0, Settings::MAX_METER_TRIP_F );
        default:;
      }
      Value = string( VehicleData.DataFloat, 0, 1 );
    }
    else
    {
      Value = Strings::GEN_THREE_HYPHENS;
    }

    return Value;
  }

  $rect <720,70,920,110>
  array Enum::MeterInfo SupportedSetting[ 3 ];

  $rect <0,390,200,430>
  method void GetMileageSetting()
  {
    var DeviceInterface::VehicleDataClass VehicleData = DeviceInterface::VehicleDevice.GetData( Enum::VehicleRxType.MILEAGE_UNIT );
    if( Enum::MileageSettingItem.MILE == VehicleData.DataUInt32 )
    {
      MileageSetting = Enum::MileageSettingItem.MILE;
    }
    else
    {
      MileageSetting = Enum::MileageSettingItem.KM;
    }
  }

  $rect <0,440,200,480>
  var Enum::MileageSettingItem MileageSetting;

  $rect <0,340,200,380>
  method void SetNoOfMenuItems()
  {
    var int32 i;
    var int32 NoOfItems;
    var Enum::MeterInfo SettingItem;

    for( i = 0; i < (int32)AllSettings.size; i++ )
    {
      SettingItem = AllSettings[i];
      switch( SettingItem )
      {
        case Enum::MeterInfo.TRIP1:
        {
          if( DeviceInterface::VehicleDevice.IsVehicleFunctionSupported( Enum::VehicleSupportedFunction.TRIP1 ) )
          {
            SupportedSetting[NoOfItems] = SettingItem;
            NoOfItems++;
          }
        }
        case Enum::MeterInfo.TRIP2:
        {
          if( DeviceInterface::VehicleDevice.IsVehicleFunctionSupported( Enum::VehicleSupportedFunction.TRIP2 ) )
          {
            SupportedSetting[NoOfItems] = SettingItem;
            NoOfItems++;
          }
        }
        case Enum::MeterInfo.TRIP_F:
        {
          if( DeviceInterface::VehicleDevice.IsVehicleFunctionSupported( Enum::VehicleSupportedFunction.F_TRIP ) )
          {
            SupportedSetting[NoOfItems] = SettingItem;
            NoOfItems++;
          }
        }
        default:
        {
          SupportedSetting[NoOfItems] = SettingItem;
          NoOfItems++;
        }
      }
    }

    Menu.NoOfItems = NoOfItems;
  }

  $rect <940,70,1140,110>
  array Enum::MeterInfo AllSettings[ 3 ] =
  (
    Default[0] = Enum::MeterInfo.TRIP1;
    Default[1] = Enum::MeterInfo.TRIP2;
    Default[2] = Enum::MeterInfo.TRIP_F;
  );

  $rect <510,340,790,380>
  object Core::SystemEventHandler VehicleDataReceivedEventHandler
  {
    preset OnEvent = OnVehicleDataReceivedSlot;
    preset Event = DeviceInterface::VehicleDevice.VehicleDataReceivedSystemEvent;
  }

  // This slot method is executed when the associated system event handler 'SystemEventHandler' \
  // receives an event.
  $rect <510,390,750,430>
  slot OnVehicleDataReceivedSlot
  {
    var DeviceInterface::VehicleDataClass VehicleData = ( DeviceInterface::VehicleDataClass )VehicleDataReceivedEventHandler.Context;
    if( null != VehicleData )
    {
      switch( VehicleData.RxType )
      {
        case Enum::VehicleRxType.TRIP1_VALUE,
             Enum::VehicleRxType.TRIP2_VALUE,
             Enum::VehicleRxType.TRIP_F_VALUE,
             Enum::VehicleRxType.LOW_FUEL_WARNING:
        {
          Menu.InvalidateItems( 0, Menu.NoOfItems - 1 );
        }
        default:;
      }
    }
  }
}

$rect <840,480,1060,520>
$output false
class SET46_VehicleInfoReset : Menu::BaseMenuView
{
  $rect <0,290,200,330>
  inherited method Init()
  {
    trace "SET46";

    SetNoOfMenuItems();
    GetUnitSetting();
  }

  $rect <230,340,430,380>
  inherited property DDModeEnabled = true;

  $rect <230,290,430,330>
  inherited var SlideOutEffectEnabled = true;

  $rect <510,20,710,60>
  inherited method LoadItemClass()
  {
    aItemNo; //suppress warning

    var class ItemClass = Menu::ItemValueUnit2;
    if( Enum::MeterInfo.TRIP_TIME == SupportedSetting[aItemNo] )
    {
      ItemClass = Menu::ItemTimeHourMinute;
    }
    return ItemClass;
  }

  $rect <510,70,710,110>
  inherited method LoadItemTitle()
  {
    var string Title = "";
    switch( SupportedSetting[aItemNo] )
    {
      case Enum::MeterInfo.AVG_FUEL: Title = Strings::HOM03_AVG_FUEL;
      case Enum::MeterInfo.AVG_SPEED: Title = Strings::HOM03_AVG_SPEED;
      case Enum::MeterInfo.TRIP_TIME: Title = Strings::HOM03_TRIP_TIME;
      case Enum::MeterInfo.FUEL_CONSUMPTION: Title = Strings::HOM03_FUEL_CONSUMPTION;
      default:;
    }
    return Title;
  }

  $rect <510,220,710,260>
  inherited method OnItemActivate()
  {
    aMenuItem; // suppress warning

    var Pop::POP04_Reset ResetDialog = new Pop::POP04_Reset;
    ResetDialog.SelectedMeterInfo = SupportedSetting[aItemNo];
    PresentDialog( ResetDialog, null, null, null, null, null, null, null, null, false );
  }

  $rect <20,20,160,60>
  inherited object Menu
  {
    preset ItemHeight = Menu::ItemHeightTall;
    preset ArrowScrollBarVisible = true;
  }

  $rect <510,170,710,210>
  inherited method LoadItemUnit()
  {
    aItemNo; // suppress warning

    var string UnitString;
    switch( SupportedSetting[aItemNo] )
    {
      case Enum::MeterInfo.AVG_SPEED:
      {
        if( Enum::MileageSettingItem.MILE == MileageUnit )
        {
          UnitString = Strings::GEN_SPEED_MILE_PER_HOUR;
        }
        else
        {
          UnitString = Strings::GEN_SPEED_KM_PER_HOUR;
        }
      }
      case Enum::MeterInfo.AVG_FUEL:
      {
        switch( FuelConsumptionUnit )
        {
          case Enum::MeterFuelConsumptionUnit.KM_PER_LITER: UnitString = Strings::UNT03_UNIT_FUEL_KM_PER_LITER;
          case Enum::MeterFuelConsumptionUnit.MILE_PER_US_GAL,
               Enum::MeterFuelConsumptionUnit.MILE_PER_IMPERIAL_GAL: UnitString = Strings::UNT03_UNIT_FUEL_MILE_PER_GALLON;
          case Enum::MeterFuelConsumptionUnit.L_PER_100KM: UnitString = Strings::UNT03_UNIT_FUEL_LITER_PER_HUNDRED_KM;
          default:;
        }
      }
      case Enum::MeterInfo.FUEL_CONSUMPTION:
      {
        switch( FuelConsumptionUnit )
        {
          case Enum::MeterFuelConsumptionUnit.KM_PER_LITER,
               Enum::MeterFuelConsumptionUnit.L_PER_100KM: UnitString = Strings::GEN_FUEL_UNIT_LITTER;
          case Enum::MeterFuelConsumptionUnit.MILE_PER_US_GAL,
               Enum::MeterFuelConsumptionUnit.MILE_PER_IMPERIAL_GAL: UnitString = Strings::GEN_FUEL_UNIT_GALLON;
          default:;
        }
      }
      default:;
    }

    return UnitString;
  }

  $rect <510,120,710,160>
  inherited method LoadItemValue()
  {
    var string ValueStr;

    switch( SupportedSetting[aItemNo] )
    {
      case Enum::MeterInfo.AVG_SPEED: ValueStr = DeviceInterface::VehicleDevice.AvgSpeedStr;
      case Enum::MeterInfo.AVG_FUEL: ValueStr = DeviceInterface::VehicleDevice.AvgFuelRateStr;
      case Enum::MeterInfo.FUEL_CONSUMPTION: ValueStr = DeviceInterface::VehicleDevice.FuelConStr;
      default: ValueStr = Strings::GEN_THREE_HYPHENS;
    }

    return ValueStr;
  }

  $rect <720,120,920,160>
  inherited method LoadItemHour()
  {
    aItemNo; //suppress warning

    var string HourString = Strings::GEN_THREE_HYPHENS;
    if( Enum::MeterInfo.TRIP_TIME == SupportedSetting[aItemNo] )
    {
      HourString = DeviceInterface::VehicleDevice.TripTimeHourStr;
    }
    return HourString;
  }

  $rect <723,172,923,212>
  inherited method LoadItemMinute()
  {
    aItemNo; //suppress warning

    var string MinuteString = Strings::GEN_THREE_HYPHENS;
    if( Enum::MeterInfo.TRIP_TIME == SupportedSetting[aItemNo] )
    {
      MinuteString = DeviceInterface::VehicleDevice.TripTimeMinuteStr;
    }
    return MinuteString;
  }

  $rect <720,70,920,110>
  array Enum::MeterInfo SupportedSetting[ 4 ];

  $rect <0,390,200,430>
  method void GetUnitSetting()
  {
    var DeviceInterface::VehicleDataClass VehicleData = DeviceInterface::VehicleDevice.GetData( Enum::VehicleRxType.MILEAGE_UNIT );
    if( Enum::MileageSettingItem.MILE == VehicleData.DataUInt32 )
    {
      MileageUnit = Enum::MileageSettingItem.MILE;
    }
    else
    {
      MileageUnit = Enum::MileageSettingItem.KM;
    }

    VehicleData = DeviceInterface::VehicleDevice.GetData( Enum::VehicleRxType.FUEL_CONSUMPTION_UNIT );
    if( (uint32)Enum::MeterFuelConsumptionUnit.TOTAL > VehicleData.DataUInt32 )
    {
      FuelConsumptionUnit = (Enum::MeterFuelConsumptionUnit)VehicleData.DataUInt32;
    }
  }

  $rect <0,440,200,480>
  var Enum::MileageSettingItem MileageUnit;

  $rect <0,340,200,380>
  method void SetNoOfMenuItems()
  {
    var int32 i;
    var int32 NoOfItems;
    var Enum::MeterInfo SettingItem;

    for( i = 0; i < AllSettings.size; i++ )
    {
      SettingItem = AllSettings[i];
      switch( SettingItem )
      {
        case Enum::MeterInfo.AVG_SPEED:
        {
          if( DeviceInterface::VehicleDevice.IsVehicleFunctionSupported( Enum::VehicleSupportedFunction.AVG_SPEED ) )
          {
            SupportedSetting[NoOfItems] = SettingItem;
            NoOfItems++;
          }
        }
        case Enum::MeterInfo.AVG_FUEL:
        {
          if( DeviceInterface::VehicleDevice.IsVehicleFunctionSupported( Enum::VehicleSupportedFunction.AVG_FUEL ) )
          {
            SupportedSetting[NoOfItems] = SettingItem;
            NoOfItems++;
          }
        }
        case Enum::MeterInfo.FUEL_CONSUMPTION:
        {
          if( DeviceInterface::VehicleDevice.IsVehicleFunctionSupported( Enum::VehicleSupportedFunction.FUEL_CONSUMPTION ) )
          {
            SupportedSetting[NoOfItems] = SettingItem;
            NoOfItems++;
          }
        }
        default:
        {
          SupportedSetting[NoOfItems] = SettingItem;
          NoOfItems++;
        }
      }
    }

    Menu.NoOfItems = NoOfItems;
  }

  $rect <940,70,1140,110>
  array Enum::MeterInfo AllSettings[ 4 ] =
  (
    Default[0] = Enum::MeterInfo.AVG_SPEED;
    Default[1] = Enum::MeterInfo.AVG_FUEL;
    Default[2] = Enum::MeterInfo.TRIP_TIME;
    Default[3] = Enum::MeterInfo.FUEL_CONSUMPTION;
  );

  $rect <510,290,790,330>
  object Core::SystemEventHandler VehicleDataReceivedEventHandler
  {
    preset OnEvent = OnVehicleDataReceivedSlot;
    preset Event = DeviceInterface::VehicleDevice.VehicleDataReceivedSystemEvent;
  }

  // This slot method is executed when the associated system event handler 'SystemEventHandler' \
  // receives an event.
  $rect <510,340,750,380>
  slot OnVehicleDataReceivedSlot
  {
    var DeviceInterface::VehicleDataClass VehicleData = ( DeviceInterface::VehicleDataClass )VehicleDataReceivedEventHandler.Context;
    if( null != VehicleData )
    {
      switch( VehicleData.RxType )
      {
        case Enum::VehicleRxType.AVERAGE_SPEED: ReloadItem( Enum::MeterInfo.AVG_SPEED );
        case Enum::VehicleRxType.FUEL_RATE_AVERAGE: ReloadItem( Enum::MeterInfo.AVG_FUEL );
        case Enum::VehicleRxType.TRIP_TIME: ReloadItem( Enum::MeterInfo.TRIP_TIME );
        case Enum::VehicleRxType.FUEL_CONSUMPTION: ReloadItem( Enum::MeterInfo.FUEL_CONSUMPTION );
        default:;
      }
    }
  }

  $rect <0,490,200,530>
  var Enum::MeterFuelConsumptionUnit FuelConsumptionUnit;

  $rect <510,390,710,430>
  method void ReloadItem( arg Enum::MeterInfo aMeterInfo )
  {
    var int32 i;
    for( i = 0; i < SupportedSetting.size; i++ )
    {
      if( aMeterInfo == SupportedSetting[i] )
      {
        Menu.InvalidateItems( i, i );
        break;
      }
    }
  }
}

$rect <1120,60,1360,100>
$output false
const uint32 MAX_AVERAGE_SPEED = 999;

$rect <1120,160,1360,200>
$output false
const float MAX_FUEL_CONSUMPTION = 99.9;

$rect <1120,260,1420,300>
$output false
const float MAX_FUEL_RATE_KM_PER_LITER = 99.9;

$rect <1120,210,1360,250>
$output false
const float MAX_AVERAGE_FUEL_MPG = 199.9;

$rect <1120,310,1420,350>
$output false
const float MAX_FUEL_RATE_LITER_PER_100KM = 99.9;

$rect <1120,360,1420,400>
$output false
const float MIN_FUEL_RATE_LITER_PER_100KM = 1.0;

// Range of the Vehicle Info
note group Note1
{
  attr Bounds = <1090,10,1750,770>;
}

$rect <1120,460,1390,500>
$output false
const float MAX_METER_TRIP_1 = 9999.9;

$rect <1450,410,1720,450>
$output false
const int32 MIN_TEMPERATURE_DEG_C = -30;

$rect <1450,460,1720,500>
$output false
const int32 MAX_TEMPERATURE_DEG_C = 128;

$rect <1450,510,1720,550>
$output false
const int32 MIN_TEMPERATURE_DEG_F = -22;

$rect <1450,560,1720,600>
$output false
const int32 MAX_TEMPERATURE_DEG_F = 263;

$rect <1450,60,1720,100>
$output false
const int32 MAX_RANGE = 999;

$rect <1450,110,1720,150>
$output false
const float MAX_CURRENT_FUEL_KM_L = 99.9;

$rect <1450,160,1720,200>
$output false
const float MAX_CURRENT_FUEL_MPG = 199.9;

$rect <1450,210,1720,250>
$output false
const int32 MAX_CURRENT_FUEL_L_100KM = 99.9;

$rect <1450,260,1720,300>
$output false
const float MIN_CURRENT_FUEL_L_100KM = 1.0;

$rect <1450,310,1720,350>
$output false
const float MIN_BATTERY_VOLTAGE = 9.0;

$rect <1450,360,1720,400>
$output false
const float MAX_BATTERY_VOLTAGE = 16.0;

$rect <1120,660,1390,700>
$output false
const int32 MAX_TIRE_PRESSURE = 51;

$rect <1120,610,1390,650>
$output false
const int32 MAX_MAINTENANCE_TRIP = 99999;

$rect <1120,510,1390,550>
$output false
const float MAX_METER_TRIP_2 = 9999.9;

$rect <1120,560,1390,600>
$output false
const float MAX_METER_TRIP_F = 999.9;

$rect <1120,410,1390,450>
$output false
const int32 MAX_METER_ODO = 999999;

$rect <1450,610,1720,650>
$output false
const int32 MAX_TRIP_TIME_HOUR = 99;

$rect <1450,660,1720,700>
$output false
const int32 MAX_TRIP_TIME_MINUTE = 99;

$rect <1120,110,1360,150>
$output false
const uint32 MAX_CRUISE_SPEED = 999;

$rect <820,60,1030,100>
$output false
$multilingual true
class SET27_ConfirmUpdate : Components::BaseMainBG
{
  $rect <10,300,190,340>
  inherited method Init()
  {
    trace "SET27";
    DeviceInterface::SystemDevice.SaveLastStatus();
  }

  $rect <10,400,190,440>
  inherited property DDModeEnabled = true;

  $rect <20,20,160,60>
  object Components::BaseText Text
  {
    preset Bounds = <10,40,470,168>;
    preset String = Strings::SET27_UPDATE_SYSTEM;
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <220,340,430,380>
  slot OnOkActivatedSlot
  {
    DeviceInterface::VehicleDevice.SetData( Enum::VehicleTxType.REQUEST_REPROGRAM, 0 );
  }

  $rect <220,300,430,340>
  slot OnCancelActivatedSlot
  {
    OnShortHomeKeyActivated();
  }

  $rect <20,20,160,60>
  object Menu::UpDownPushButtonSet UpDownPushButtonSet
  {
    preset Bounds = <165,176,315,259>;
    preset PassHomeKey = true;
    preset PassMagicKey = true;
    preset DDModeEnabled = true;
    preset OnUpButtonActivated = OnCancelActivatedSlot;
    preset OnDownButtonActivated = OnOkActivatedSlot;
    preset UpButtonTitle = Strings::GEN_CANCEL;
    preset DownButtonTitle = Strings::GEN_OK;
    preset DownButtonEnabled = true;
  }

  $rect <460,300,720,340>
  object Core::SystemEventHandler ReceivedSystemEventHandler
  {
    preset OnEvent = OnSystemEventReceived;
    preset Event = DeviceInterface::SystemDevice.SystemDataReceivedSystemEvent;
  }

  // This slot method is executed when the associated system event handler 'SystemEventHandler' \
  // receives an event.
  $rect <460,340,720,380>
  slot OnSystemEventReceived
  {
    var DeviceInterface::SystemData SystemData = ( DeviceInterface::SystemData )ReceivedSystemEventHandler.Context;
    if( null != SystemData )
    {
      switch( SystemData.RxEvent )
      {
        case Enum::SystemRxEvent.REPROGRAM_ACCEPTED:
        {
          /* To wait 2 seconds for sending create OTA connection reauest */
          HoldTimer.Enabled = true;
          DeviceInterface::BluetoothDevice.SendMotoConCommand( Enum::MotoConTx.CREATE_OTA_CONNECTION );
        }
        case Enum::SystemRxEvent.REPROGRAM_REJECTED:
        {
          var Settings::TimeoutDialog Dialog = new Settings::TimeoutDialog;
          Dialog.Message = Strings::SET29_DRIVING_NO_SW_UPDATE;
          Dialog.DismissAfterTimeout = true;
          Owner.SwitchToDialog( Dialog, null, null, null, null, null, null, null, null, null, false );
        }
        default:;
      }
    }
  }

  $rect <760,300,960,340>
  object Core::Timer HoldTimer
  {
    preset OnTrigger = OnHoldTimerSlot;
    preset Period = 0;
    preset Begin = 2000;
  }

  $rect <760,340,960,380>
  slot OnHoldTimerSlot
  {
    DeviceInterface::SystemDevice.StartOTA();
  }
}

$rect <1120,710,1390,750>
$output false
const float COOLANT_HIGH_TEMPERATURE = 128.75;

$rect <280,260,520,300>
$output false
$multilingual true
class SET47_WaitingApproval : Components::BaseMainBG
{
  $rect <10,350,190,390>
  inherited method ReInit()
  {
    DisplayString();
  }

  $rect <10,300,190,340>
  inherited method Init()
  {
    trace "SET47";
    DisplayString();
  }

  $rect <1040,300,1270,340>
  inherited method OnShortUpKeyActivated()
  {
    $if $prototyper
      Owner.SwitchToDialog( new Settings::SET50_OnlyYahamaAppConnected, null, null, null, null, null, null, null, null, null, false );
    $endif
  }

  $rect <210,300,440,340>
  inherited method OnShortHomeKeyActivated()
  {
    // neglect home key event
  }

  $rect <210,350,440,390>
  inherited method OnLongHomeKeyActivated()
  {
    // neglect home key event
  }

  $rect <10,450,190,490>
  inherited property DDModeEnabled = true;

  $rect <20,20,160,60>
  object Views::Image LoadingAnimation
  {
    preset Bounds = <193,54,287,148>;
    preset Animated = true;
    preset Bitmap = Resource::LoadingAnimation;
  }

  $rect <20,20,160,60>
  object Components::BaseText WaitingText
  {
    preset Bounds = <10,156,470,227>;
    preset WrapText = true;
    preset Alignment = Views::TextAlignment[AlignHorzCenter, AlignVertTop];
    preset String = Strings::SET47_WAIT_APPROVAL;
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <460,300,730,340>
  object Core::SystemEventHandler ConnectionStatusEventHandler
  {
    preset OnEvent = OnConnectoinStatusReceivedSlot;
    preset Event = DeviceInterface::BluetoothDevice.ConnectionStatusEvent;
  }

  // This slot method is executed when the associated system event handler 'SystemEventHandler' \
  // receives an event.
  $rect <460,350,740,390>
  slot OnConnectoinStatusReceivedSlot
  {
    if( null != Owner )
    {
      var DeviceInterface::ConnectionStatusContext ConnectionStatusContext = (DeviceInterface::ConnectionStatusContext)ConnectionStatusEventHandler.Context;
      switch( ConnectionStatusContext.Status )
      {
        case Enum::ConnectionStatus.PAIRING_FAILED: DisplayPairingFailed();
        case Enum::ConnectionStatus.NAVI_APP_CONNECTED: Owner.SwitchToDialog( new Settings::SET49_OnlyNaviAppConnected, null, null, null, null, null, null, null, null, null, false );
        case Enum::ConnectionStatus.YAMAHA_APP_BLE_CONNECTED: Owner.SwitchToDialog( new Settings::SET22_WaitingConnection, null, null, null, null, null, null, null, null, null, false );
        default:;
      }
    }
  }

  $rect <460,400,660,440>
  method void DisplayPairingFailed()
  {
    if( null != Owner )
    {
      var Settings::TimeoutDialog PairingFailedDialog = new Settings::TimeoutDialog;
      PairingFailedDialog.Message = Strings::SET07_PAIRING_FAILED;
      PairingFailedDialog.DismissAfterTimeout = true;
      Owner.SwitchToDialog( PairingFailedDialog, null, null, null, null, null, null, null, null, null, false );
    }
  }

  $rect <760,300,980,340>
  object Core::Timer TimeoutTimer
  {
    preset OnTrigger = OnTimeoutSlot;
    preset Period = 0;
    preset Begin = 30000;
    preset Enabled = true;
  }

  $rect <760,350,980,390>
  slot OnTimeoutSlot
  {
    DisplayPairingFailed();
  }

  $rect <10,400,190,440>
  method void DisplayString()
  {
    var string ProcessString = Strings::SET47_WAIT_APPROVAL;
    var int32 LeftIdx = ProcessString.find( Strings::ARGUMENT_STR, 0 );
    var int32 RightIdx = ProcessString.length - LeftIdx - Strings::ARGUMENT_STR.length;
    WaitingText.String = ProcessString.left( LeftIdx ) + DeviceInterface::BluetoothDevice.GetBtcPairingDeviceName() + ProcessString.right( RightIdx );
  }
}

$rect <280,360,520,400>
$output false
$multilingual true
class SET49_OnlyNaviAppConnected : Settings::TimeoutDialog
{
  $rect <3,340,180,380>
  inherited method ReInit()
  {
    DisplayString();
  }

  $rect <0,290,180,330>
  inherited method Init()
  {
    trace "SET49";
    DisplayString();
  }

  $rect <0,440,180,480>
  inherited property DDModeEnabled = true;

  $rect <200,290,400,330>
  inherited slot OnTimeoutSlot
  {
    var Settings::SET17_BtcPairedDeviceList PairedDeviceListDialog = (Settings::SET17_BtcPairedDeviceList)Owner;
    if( null != PairedDeviceListDialog )
    {
      Owner.DismissDialog( this, null, null, null, null, null, false );
    }
    else
    {
      var Settings::SET04_BtSettingMenu BtSettingDialog = (Settings::SET04_BtSettingMenu)Owner;
      if( null != BtSettingDialog )
      {
        Owner.SwitchToDialog( new Settings::SET17_BtcPairedDeviceList, null, null, null, null, null, null, null, null, null, false );
      }
    }
  }

  $rect <0,390,180,430>
  method void DisplayString()
  {
    var Utility::String StringUtil = new Utility::String;
    MessageText.String = StringUtil.ReplaceString( Strings::SET49_LAUNCH_YAMAHA_APP, DeviceInterface::BluetoothDevice.GetBtcPairingDeviceName() );
  }

  $rect <20,20,160,60>
  object Views::Image Divider
  {
    preset Bounds = <0,36,480,38>;
    preset Alignment = Views::ImageAlignment[AlignVertBottom, ScaleToFit];
    preset Bitmap = Resource::StatusBarDivider;
  }

  $reorder Message 1
  $reorder OnSetMessage 1
  $reorder TimeoutTimer 1
  $reorder OnTimeoutSlot 1
  $reorder OnTimeout 1
  $reorder DismissAfterTimeout 1
}

$rect <280,410,520,450>
$output false
$multilingual true
class SET50_OnlyYahamaAppConnected : Settings::TimeoutDialog
{
  $rect <0,340,180,380>
  inherited method ReInit()
  {
    DisplayString();
  }

  $rect <0,290,180,330>
  inherited method Init()
  {
    trace "SET50";
    DisplayString();
  }

  $rect <0,440,200,480>
  inherited property DDModeEnabled = true;

  $rect <210,290,410,330>
  inherited slot OnTimeoutSlot
  {
    var Settings::SET04_BtSettingMenu BtSettingMenu = (Settings::SET04_BtSettingMenu)Owner;
    if( null != BtSettingMenu )
    {
      BtSettingMenu.SwitchToDialog( new Settings::SET17_BtcPairedDeviceList, null, null, null, null, null, null, null, null, null, false );
    }
    else
    {
      Owner.DismissDialog( this, null, null, null, null, null, false );
    }
  }

  $rect <20,20,160,60>
  object Views::Image Divider
  {
    preset Bounds = <0,36,480,38>;
    preset Alignment = Views::ImageAlignment[AlignVertBottom, ScaleToFit];
    preset Bitmap = Resource::StatusBarDivider;
  }

  $rect <0,390,180,430>
  method void DisplayString()
  {
    var Utility::String StringUtil = new Utility::String;
    MessageText.String = StringUtil.ReplaceString( Strings::SET50_LAUNCH_NAVI_APP, DeviceInterface::BluetoothDevice.GetBtcPairingDeviceName() );
  }

  $reorder Message 2
  $reorder OnSetMessage 2
  $reorder TimeoutTimer 2
  $reorder OnTimeoutSlot 2
  $reorder OnTimeout 2
  $reorder DismissAfterTimeout 2
}

$rect <280,310,520,350>
$output false
$multilingual true
class SET48_ReconnectYamahaApp : Settings::TimeoutDialog
{
  $rect <10,340,190,380>
  inherited method ReInit()
  {
    DisplayString();
  }

  $rect <10,290,190,330>
  inherited method Init()
  {
    trace "SET48";
    DisplayString();
  }

  $rect <20,20,160,60>
  inherited object MessageText
  {
    preset String = Strings::SET48_RECONNECT_YCONNECT;
  }

  $rect <210,290,410,330>
  inherited slot OnTimeoutSlot
  {
    Owner.SwitchToDialog( new Settings::SET22_WaitingConnection, null, null, null, null, null, null, null, null, null, false );
  }

  $rect <10,390,190,430>
  method void DisplayString()
  {
    var string ProcessString = Strings::SET48_RECONNECT_YCONNECT;
    var int32 LeftIdx = ProcessString.find( Strings::ARGUMENT_STR, 0 );
    var int32 RightIdx = ProcessString.length - LeftIdx - Strings::ARGUMENT_STR.length;
    MessageText.String = ProcessString.left( LeftIdx ) + DeviceInterface::BluetoothDevice.GetBtcPairingDeviceName() + ProcessString.right( RightIdx );
  }

  $reorder Message 1
  $reorder OnSetMessage 1
  $reorder OnTimeout 3
}

$rect <280,460,520,500>
$output false
$multilingual true
class SET51_BothAppConnected : Settings::TimeoutDialog
{
  $rect <0,335,200,375>
  inherited method ReInit()
  {
    DisplayString();
  }

  $rect <0,290,180,330>
  inherited method Init()
  {
    trace "SET51";
    DisplayString();
  }

  $rect <0,430,200,470>
  inherited property DDModeEnabled = true;

  $rect <240,290,440,330>
  inherited slot OnTimeoutSlot
  {
    DismissThisDialog();
  }

  $rect <0,380,200,420>
  method void DisplayString()
  {
    var Utility::String StringUtil = new Utility::String;
    MessageText.String = StringUtil.ReplaceString( Strings::SET51_BOTH_APP_CONNECTED, DeviceInterface::BluetoothDevice.GetBtcPairingDeviceName() );
  }

  $rect <20,20,160,60>
  object Views::Image Divider
  {
    preset Bounds = <0,36,480,38>;
    preset Alignment = Views::ImageAlignment[AlignVertBottom, ScaleToFit];
    preset Bitmap = Resource::StatusBarDivider;
  }

  $reorder Message 1
  $reorder OnSetMessage 1
  $reorder TimeoutTimer 1
  $reorder OnTimeoutSlot 1
  $reorder OnTimeout 1
  $reorder DismissAfterTimeout 1
}

$rect <280,210,520,250>
$output false
$multilingual true
class SET26_PairingSuccessful : Settings::TimeoutDialog
{
  $rect <10,290,190,330>
  inherited method Init()
  {
    trace "SET26";
  }

  $rect <20,20,160,60>
  inherited object MessageText
  {
    preset String = Strings::SET26_PAIRING_SUCCESSFUL;
  }

  $rect <10,340,210,380>
  inherited slot OnTimeoutSlot
  {
    var Settings::SET04_BtSettingMenu BtSettingMenu = (Settings::SET04_BtSettingMenu)Owner;
    if( null != BtSettingMenu )
    {
      BtSettingMenu.SwitchToDialog( new Settings::SET17_BtcPairedDeviceList, null, null, null, null, null, null, null, null, null, false );
    }
  }

  $reorder Message 1
  $reorder OnSetMessage 1
  $reorder OnTimeout 3
}
