$version 10.00

$rect <560,10,760,50>
inline Inline
{
  #include "BTM_pub.h"
}

$rect <20,10,280,50>
$output false
class SET01_MainSettingMenu : Menu::BaseMenuView
{
  $rect <510,10,690,50>
  inherited method Init()
  {
    var int32 NoOfItems = 7;
    var int32 ItemIdx = 4;
    var int32 i = 0;

    if( GripWarmerEnabled )
    {
      NoOfItems++;
      ItemIdx++;
    }

    if( SeatHeaterEnabled )
    {
      NoOfItems++;
      ItemIdx++;
    }

    if( NoOfItems < Settings.size )
    {
      for( i = 6; i <= 8; i++, ItemIdx++ )
      {
        Settings[ItemIdx] = Settings[i];
      }
    }

    Menu.NoOfItems = NoOfItems;
  }

  $rect <10,290,210,330>
  inherited property DDModeEnabled = true;

  $rect <510,60,710,100>
  inherited method LoadItemClass()
  {
    var class ItemClass = null;
    if( aItemNo >= 0 )
    {
      ItemClass = Menu::ItemBase;
    }
    return ItemClass;
  }

  $rect <510,110,710,150>
  inherited method LoadItemTitle()
  {
    var string Title = "";
    switch( Settings[aItemNo] )
    {
      case Enum::MainSettingItem.Connection: Title = Strings::SET01_connection;
      case Enum::MainSettingItem.Clock: Title = Strings::SET01_clock;
      case Enum::MainSettingItem.Brightness: Title = Strings::SET01_brightness;
      case Enum::MainSettingItem.Unit: Title = Strings::SET01_unit;
      case Enum::MainSettingItem.GripWarmerSettings: Title = Strings::SET01_grip_warmer_settings;
      case Enum::MainSettingItem.SeatHeaterSettings: Title = Strings::SET01_seat_heater_settings;
      case Enum::MainSettingItem.SystemInfo: Title = Strings::SET01_system_info;
      case Enum::MainSettingItem.LegalInfo: Title = Strings::SET01_legal_info;
      case Enum::MainSettingItem.Reset: Title = Strings::SET01_reset;
      default:;
    }
    return Title;
  }

  $rect <510,160,710,200>
  inherited method OnItemActivate()
  {
    if( null == aMenuItem )
    {
      // empty body to suppress warning
    }

    var Components::BaseComponent Dialog = null;

    switch( Settings[aItemNo] )
    {
      case Enum::MainSettingItem.Connection:
      {
        if( !DeviceInterface::SystemDevice.IsHopperTestMode )
        {
          Dialog = new Settings::SET03_ConnectionSettingMenu;
        }
      }
      case Enum::MainSettingItem.Clock:;
      case Enum::MainSettingItem.Brightness: Dialog = new Brightness::BRT01_BrightnessSettingMenu;
      case Enum::MainSettingItem.Unit: Dialog = new Unit::UNT01_UnitSettingMenu;
      case Enum::MainSettingItem.GripWarmerSettings:;
      case Enum::MainSettingItem.SeatHeaterSettings:;
      case Enum::MainSettingItem.SystemInfo: Dialog = new Settings::SET28_SystemInfo;
      case Enum::MainSettingItem.LegalInfo:;
      case Enum::MainSettingItem.Reset:;
      default:;
    }

    if( null != Dialog )
    {
      var Menu::BaseMenuView MenuDialog = ( Menu::BaseMenuView )Dialog;
      if( null != MenuDialog )
      {
        SlideInDialog( MenuDialog );
      }
      else
      {
        PresentDialog( Dialog, null, null, null, null, null, null, null, null, false );
      }
    }
  }

  $rect <20,20,160,60>
  inherited object Menu
  {
    preset DDModeEnabled = true;
    preset NoOfItems = 9;
    preset ArrowScrollBarVisible = true;
  }

  // TODO:
  // Remove these temperary variables and get the Seat Heater and Grip Warmer enabled \
  // status from vehicle information manager directly.
  note group Note5
  {
    attr Bounds = <730,60,1090,310>;
  }

  $rect <810,240,1010,280>
  var bool SeatHeaterEnabled = false;

  $rect <810,200,1010,240>
  var bool GripWarmerEnabled = false;

  $rect <730,10,930,50>
  array Enum::MainSettingItem Settings[ 9 ] =
  (
    Default[0] = Enum::MainSettingItem.Connection;
    Default[1] = Enum::MainSettingItem.Clock;
    Default[2] = Enum::MainSettingItem.Brightness;
    Default[3] = Enum::MainSettingItem.Unit;
    Default[4] = Enum::MainSettingItem.GripWarmerSettings;
    Default[5] = Enum::MainSettingItem.SeatHeaterSettings;
    Default[6] = Enum::MainSettingItem.SystemInfo;
    Default[7] = Enum::MainSettingItem.LegalInfo;
    Default[8] = Enum::MainSettingItem.Reset;
  );

  $reorder OnSetDDModeEnabled 1
  $reorder LoadItemClass 3
  $reorder LoadItemTitle 3
  $reorder OnItemActivate 2
  $reorder LoadItemChecked 2
  $reorder LoadItemEnabled 2
  $reorder Note5 1
  $reorder SeatHeaterEnabled 1
  $reorder GripWarmerEnabled 1
  $reorder Settings 1
}

$rect <20,60,260,100>
$output false
class SET03_ConnectionSettingMenu : Menu::BaseMenuView
{
  $rect <10,290,190,330>
  inherited method Init()
  {
    trace "Init SET03";
  }

  $rect <10,340,210,380>
  inherited property DDModeEnabled = true;

  $rect <10,340,210,380>
  inherited var SlideOutEffectEnabled = true;

  $rect <510,20,710,60>
  inherited method LoadItemClass()
  {
    // suppress warning
    if( aItemNo )
    {
      // empty body
    }
    return Menu::ItemBase;
  }

  $rect <510,70,710,110>
  inherited method LoadItemTitle()
  {
    var string title = "";
    if( aItemNo < ItemTitleArray.size )
      {
      title = ItemTitleArray[aItemNo];
      }
    return title;
  }

  $rect <510,120,710,160>
  inherited method OnItemActivate()
  {
    if( null == aMenuItem )
    {
      // empty body to suppress warning
    }

    switch( aItemNo )
    {
      case 0: SlideInDialog( new Settings::SET04_BtSettingMenu );
      case 1: HandleYConnectAppPairing();
      default :;
    }
  }

  $rect <20,20,160,60>
  inherited object Menu
  {
    preset DDModeEnabled = true;
    preset NoOfItems = 2;
  }

  $rect <730,70,930,110>
  array string ItemTitleArray[ 2 ] =
  (
    Default[0] = Strings::GEN_bluetooth;
    Default[1] = Strings::SET03_Y_CONNECT_APP_PAIRING;
  );

  $rect <230,290,470,330>
  method void HandleYConnectAppPairing()
  {
    if( DeviceInterface::BluetoothDevice.IsBtConnected() )
    {
      if( DeviceInterface::BluetoothDevice.IsMotoconConnected() )
      {
        // replase %s with the connected BLE deivce name
        var string ProcessString = Strings::SET21_BLE_ALREADY_CONNECTED;
        var int32 LeftIdx = ProcessString.find( Strings::ARGUMENT_STR, 0 );
        var int32 RightIdx = ProcessString.length - LeftIdx - Strings::ARGUMENT_STR.length;
        var string Message = ProcessString.left( LeftIdx ) + DeviceInterface::BluetoothDevice.GetBleConnectedDeviceName() + ProcessString.right( RightIdx );

        PresentDialogWithTimeout( Message );
      }
      else
      {
        PresentDialog( new Settings::SET22_BleAdvertising, null, null, null, null, null, null, null, null, false );
      }
    }
    else
    {
      PresentDialogWithTimeout( Strings::SET20_COMPLETE_BT_PAIRING_FIRST );
    }
  }

  $rect <230,340,470,380>
  method void PresentDialogWithTimeout( arg string aMessage )
  {
    var Settings::TimeoutDialog Dialog = new Settings::TimeoutDialog;
    Dialog.Message = aMessage;
    Dialog.DismissAfterTimeout = true;
    PresentDialog( Dialog, null, null, null, null, null, null, null, null, false );
  }
}

$rect <20,110,260,150>
$output false
class SET04_BtSettingMenu : Menu::BaseMenuView
{
  $rect <10,290,190,330>
  inherited method Init()
  {
    DeviceInterface::BluetoothDevice.GetBluetoothEnable();
  }

  $rect <10,340,210,380>
  inherited property DDModeEnabled = true;

  $rect <10,390,210,430>
  inherited var SlideOutEffectEnabled = true;

  $rect <490,30,690,70>
  inherited method LoadItemClass()
  {
    var class ClassType = null;
    if( aItemNo < ItemClassArray.size )
    {
      ClassType = ItemClassArray[aItemNo];
    }
    return ClassType;
  }

  $rect <490,80,690,120>
  inherited method LoadItemTitle()
  {
    var string title = "";
    if( aItemNo < ItemTitleArray.size )
      {
      title = ItemTitleArray[aItemNo];
      }
    return title;
  }

  $rect <490,230,690,270>
  inherited method OnItemActivate()
  {
    var bool IsChecked = false;
    var Menu::ItemCheckbox CheckBoxItem = ( Menu::ItemCheckbox )aMenuItem;
    if( null != CheckBoxItem )
    {
      IsChecked = CheckBoxItem.CheckBoxButton.Checked;
    }

    switch( aItemNo )
    {
      case 0:
      {
        DeviceInterface::BluetoothDevice.BluetoothEnable = IsChecked;
        Menu.InvalidateItems( 1, 4 );
      }
      case 1:
      {
        if( DeviceInterface::BluetoothDevice.IsMaxPairedDevice )
        {
          PresentDialog( new Settings::SET05_BtcMaxPairedDevice, null, null, null, null, null, null, null, null, false );
        }
        else
        {
          PresentDialog( new Settings::SET06_BtcDiscovarable, null, null, null, null, null, null, null, null, false );
        }
      }
      case 2: SlideInDialog( new Settings::SET17_BtcPairedDeviceList );
      case 3: DeviceInterface::BluetoothDevice.AutoConnect = IsChecked;
      default:;
    }
  }

  $rect <490,130,690,170>
  inherited method LoadItemChecked()
  {
    var bool IsChecked = false;
    switch( aItemNo )
    {
      case 0: IsChecked = DeviceInterface::BluetoothDevice.BluetoothEnable;
      case 3: IsChecked = DeviceInterface::BluetoothDevice.AutoConnect;
      default:;
    }
    return IsChecked;
  }

  $rect <490,180,690,220>
  inherited method LoadItemEnabled()
  {
    var bool ItemEnabled = true;
    if( aItemNo > 0 )
    {
      ItemEnabled = DeviceInterface::BluetoothDevice.BluetoothEnable;
    }
    return ItemEnabled;
  }

  $rect <20,20,160,60>
  inherited object Menu
  {
    preset DDModeEnabled = true;
    preset NoOfItems = 4;
    preset ItemHeight = Menu::ItemHeightSmall;
    preset ItemNumPerPage = 4;
  }

  $rect <710,30,910,70>
  array class ItemClassArray[ 4 ] =
  (
    Default[0] = Menu::ItemCheckbox;
    Default[1] = Menu::ItemBase;
    Default[2] = Menu::ItemBase;
    Default[3] = Menu::ItemCheckbox;
  );

  $rect <710,80,910,120>
  array string ItemTitleArray[ 4 ] =
  (
    Default[0] = Strings::GEN_bluetooth;
    Default[1] = Strings::SET04_DISCOVERY_MODE;
    Default[2] = Strings::SET04_PAIRED_DEVICES;
    Default[3] = Strings::SET04_BT_AUTO_CONNECT;
  );

  $rect <710,130,910,170>
  var bool IsBtEnabled = false;

  $rect <230,290,480,330>
  method void PresentPairedDeviceList()
  {
    var int32 i = 0;
    for( i = 0; i < CountDialogs(); i++ )
    {
      DismissDialog( GetDialogAtIndex( 0 ), null, null, null, null, null, true );
    }
    PresentDialog( new Settings::SET17_BtcPairedDeviceList, null, null, null, null, null, null, null, null, false );
  }
}

// System Settings UI
note group Note
{
  attr Bounds = <690,20,1420,560>;
}

$rect <710,270,910,310>
$output false
class LegalMenu : Menu::BaseMenuView
{
  $rect <20,290,220,330>
  inherited property Bounds = <0,0,480,272>;

  $rect <520,200,750,240>
  inherited method OnShortHomeKeyActivated()
  {
    Owner.DismissDialog( this, null, null, null, null, null, false );
  }

  $rect <520,150,720,190>
  inherited method LoadItemClass()
  {
    var class ItemClass = null;
    if( aItemNo >= 0 )
    {
    ItemClass = Menu::ItemBase;
    }
    return ItemClass;
  }

  $rect <520,60,720,100>
  inherited method LoadItemTitle()
  {
    var string Title = "";
    if( aItemNo < LegalMenu.size )
    {
    Title = LegalMenu[aItemNo];
    }
    return Title;
  }

  $rect <520,100,720,140>
  inherited method OnItemActivate()
  {
    trace "OnItemActivate:", aItemNo;

    if( null == aMenuItem )
    {
      // empty body to suppress warning
    }

    switch( aItemNo )
    {
    case 0:
      PresentDialogWithSlideInEffect( new Settings::TermsOfService );
    case 1:
      PresentDialogWithSlideInEffect( new Settings::OpenSourceLicenses );
    default :;
    }
  }

  $rect <520,10,720,50>
  array string LegalMenu[ 3 ] =
  (
    Default[0] = "Terms of Service";
    Default[1] = "Open source licenses";
    Default[2] = "";
  );

  $rect <20,20,160,60>
  object Menu::VerticalMenu Menu
  {
    preset Bounds = <10,32,470,272>;
    preset NoOfItems = 2;
  }
}

$rect <950,70,1150,110>
$output false
class SoftwareUpdate : Menu::BaseMenuView
{
  $rect <10,300,210,340>
  inherited property Bounds = <0,0,480,272>;

  $rect <520,140,720,180>
  inherited method OnShortDownKeyActivated()
  {
    var int32 NextFocusIdx = FocusIdx + 1;
    if( NextFocusIdx >= FocusList.size )
      {
      NextFocusIdx = FocusList.size - 1;
      }

    if( FocusIdx != NextFocusIdx )
      {
      FocusIdx = NextFocusIdx;
      Focus = FocusList[NextFocusIdx];
      }
  }

  $rect <520,80,720,120>
  inherited method OnShortUpKeyActivated()
  {
    var int32 NextFocusIdx = FocusIdx - 1;
    if( NextFocusIdx < 0 )
      {
      NextFocusIdx = 0;
      }

    if( FocusIdx != NextFocusIdx )
      {
      FocusIdx = NextFocusIdx;
      Focus = FocusList[NextFocusIdx];
      }
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton ButtonNo
  {
    preset Bounds = <290,200,440,250>;
    preset IconFrameActive = -1;
    preset IconFrame = 0;
    preset Label = "No";
    preset Appearance = UIConfig::PushButtonConfig;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton ButtonYes
  {
    preset Bounds = <40,203,190,253>;
    preset OnRelease = OnUpdate;
    preset IconFrameActive = -1;
    preset IconFrame = 0;
    preset Label = "Yes";
    preset Appearance = UIConfig::PushButtonConfig;
  }

  $rect <20,20,160,60>
  object Views::Text Text
  {
    preset Bounds = <90,80,370,150>;
    preset String = "Update system?";
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <520,200,720,240>
  slot OnUpdate
  {
    PresentDialogWithSlideInEffect( new Settings::InProgress );
  }

  $rect <520,20,720,60>
  var int32 FocusIdx = 1;

  $rect <740,20,940,60>
  array Core::View FocusList[ 2 ] =
  (
    Default[0] = ButtonYes;
    Default[1] = ButtonNo;
  );
}

$rect <950,130,1150,170>
$output false
class SoftwareUpdateError : Menu::BaseMenuView
{
  $rect <10,300,210,340>
  inherited property Bounds = <0,0,480,272>;

  $rect <20,20,160,60>
  object Views::Text Text
  {
    preset Bounds = <15,70,460,220>;
    preset WrapText = true;
    preset String = "System cannot execute software update.\nSoftware update cannot be executed\nwhile driving.";
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }
}

$rect <1170,70,1370,110>
$output false
class SoftwareUpdateRetry : Menu::BaseMenuView
{
  $rect <20,300,220,340>
  inherited property Bounds = <0,0,480,272>;

  $rect <20,20,160,60>
  object Views::Text Message
  {
    preset Bounds = <7,50,464,194>;
    preset WrapText = true;
    preset String = "Failed\nConfirmed USB connection.Please make sure you've inserted USB and the update file is in the USB device.";
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton RetryButton
  {
    preset Bounds = <140,200,320,250>;
    preset OnRelease = OnRetry;
    preset Label = "Retry";
    preset Appearance = UIConfig::PushButtonConfig;
  }

  $rect <520,30,720,70>
  slot OnRetry
  {
    SlideOutDialog( this );
  }
}

$rect <1170,130,1370,170>
$output false
class SoftwareUpdateCompleted : Menu::BaseMenuView
{
  $rect <0,290,200,330>
  inherited property Bounds = <0,0,480,272>;

  $rect <20,20,160,60>
  object Views::Text Text
  {
    preset Bounds = <100,95,360,170>;
    preset String = "Completed.";
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }
}

$rect <940,340,1140,380>
$output false
class AllReset : Menu::BaseMenuView
{
  $rect <10,300,210,340>
  inherited property Bounds = <0,0,480,272>;

  $rect <20,20,160,60>
  object Views::Text Text
  {
    preset Bounds = <10,45,470,169>;
    preset String = "Reset LinkCard to factory settings?";
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <510,200,710,240>
  slot OnButtonYes
  {
    //TODO: Check BLE record exist or not -> UpdateBLEStatus method. If no, switch to Error page.
    postsignal OnYes;
  }

  $rect <510,250,710,290>
  slot OnButtonNo
  {
    postsignal OnNo;
  }

  $rect <520,20,720,60>
  property slot OnYes;

  $rect <750,20,950,60>
  property slot OnNo;

  $rect <750,70,950,110>
  method bool UpdateBLEStatus()
  {
    // TODO return true if BLE record exist
    // If not, switich to error page.
    return true;
  }

  $rect <970,20,1170,60>
  var int32 FocusIdx = 1;

  $rect <20,20,160,60>
  object Menu::UpDownPushButtonSet UpDownPushButtonSet
  {
    preset Bounds = <165,176,315,259>;
    preset OnUpButtonActivated = OnButtonNo;
    preset OnDownButtonActivated = OnButtonYes;
  }
}

$rect <940,390,1140,430>
$output false
class AllResetPairingDevice : Menu::BaseMenuView
{
  $rect <10,300,210,340>
  inherited property Bounds = <0,0,480,272>;

  $rect <530,80,730,120>
  inherited method Init()
  {
    // TO DO: read BLE record here.
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton PushButton
  {
    preset Bounds = <150,190,300,240>;
    preset OnRelease = OnButtonOk;
    preset Label = "OK";
    preset Appearance = UIConfig::PushButtonConfig;
  }

  $rect <530,140,730,180>
  slot OnButtonOk
  {
    postsignal OnOK;
  }

  $rect <530,20,730,60>
  property slot OnOK;

  $reorder LoadItemChecked 1
}

$rect <940,440,1140,480>
$output false
class InProgress : Menu::BaseMenuView
{
  $rect <10,290,210,330>
  inherited property Bounds = <0,0,480,272>;

  $rect <20,20,160,60>
  object Views::Text Text
  {
    preset Bounds = <110,100,350,150>;
    preset String = "Please wait...";
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }
}

$rect <1160,350,1360,390>
$output false
class AllResetCompleted : Menu::BaseMenuView
{
  $rect <510,170,710,210>
  inherited property Bounds = <0,0,480,272>;

  $rect <20,20,160,60>
  object Views::Text Text
  {
    preset Bounds = <100,95,360,170>;
    preset String = "Completed.";
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  // TODO: Inform system to reboot.
  note legend Note
  {
    attr Bounds = <530,10,870,150>;
  }
}

$rect <940,270,1140,310>
$output false
class TermsOfService : Menu::BaseMenuView
{
  $rect <10,300,210,340>
  inherited property Bounds = <0,0,480,272>;
}

$rect <1170,270,1370,310>
$output false
class OpenSourceLicenses : Menu::BaseMenuView
{
  $rect <0,300,200,340>
  inherited property Bounds = <0,0,480,272>;
}

$rect <1160,400,1360,440>
$output false
class AllResetFailed : Menu::BaseMenuView
{
  $rect <10,290,210,330>
  inherited property Bounds = <0,0,480,272>;

  $rect <20,20,160,60>
  object Views::Text Text
  {
    preset Bounds = <10,40,470,220>;
    preset WrapText = true;
    preset Alignment = Views::TextAlignment[AlignHorzCenter, AlignHorzLeft, AlignVertCenter];
    preset String = "System cannot execute all reset.\nAll reset cannot be executed while driving.";
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <510,10,700,50>
  object Core::Timer CountDownTimer
  {
    preset OnTrigger = OnFailedReturnEvent;
    preset Period = 5000;
    preset Enabled = true;
  }

  $rect <510,60,710,100>
  slot OnFailedReturnEvent
  {
    CountDownTimer.Enabled = false;
    postsignal OnFailed;
  }

  $rect <720,10,920,50>
  property slot OnFailed;

  // TODO: Based on CAN message, Abort signal will be delivered.
  // In this case, we show this page and go back to system settings page.
  note group Note
  {
    attr Bounds = <540,190,1120,280>;
  }
}

$rect <720,380,920,420>
$output false
class Reset : Components::BaseComponent
{
  $rect <520,10,720,50>
  inherited method Init()
  {
    var Settings::AllReset all_reset = new Settings::AllReset;

    all_reset.OnYes = OnAllResetYesSlot;
    all_reset.OnNo = OnAllResetNoSlot;
    PresentDialog( all_reset, null, null, null, null, null, null, null, null, false );
  }

  $rect <10,290,210,330>
  inherited property Bounds = <0,0,480,272>;

  $rect <520,60,720,100>
  slot OnAllResetYesSlot
  {
    if( !DeviceInterface::SystemDevice.IsHopperTestMode )
    {
      StartFactoryReset();
    }
    else
    {
      Owner.DismissDialog( this, null, null, null, null, null, false );
    }
  }

  $rect <520,110,720,150>
  slot OnAllResetNoSlot
  {
    Owner.DismissDialog( this, null, null, null, null, null, false );
  }

  $rect <520,160,720,200>
  slot OnAllResetPairingDeviceOK
  {
    StartFactoryReset();
  }

  $rect <520,210,720,250>
  slot OnAllResetFailed
  {
    var Core::Group dialog = (Core::Group)sender;
    DismissDialog( dialog, null, null, null, null, null, false );
    SlideOutDialog( this );
  }

  $rect <520,260,720,300>
  slot OnAllResetFinished
  {
    var Settings::AllResetCompleted all_reset_completed = new Settings::AllResetCompleted;
    var Core::Group dialog = (Core::Group)sender;

    DismissDialog( dialog, null, null, null, null, null, false );
    PresentDialog( all_reset_completed, null, null, null, null, null, null, null, null, false );
  }

  $rect <520,520,790,560>
  object Core::Timer SystemRebootCountDownTimer
  {
    preset OnTrigger = OnSystemRebootTriggeredSlot;
    preset Period = 2000;
  }

  $rect <520,570,790,610>
  slot OnSystemRebootTriggeredSlot
  {
    trace "OnSystemRebootTriggered";
    SystemRebootCountDownTimer.Enabled = false;
    DeviceInterface::SystemDevice.RebootSystem();
  }

  $rect <520,460,790,500>
  method void ShowResetCompleteDialog()
  {
    if( null != BusyDialog )
    {
      DismissDialog( BusyDialog, null, null, null, null, null, false );
      BusyDialog = null;
    }
    var Settings::AllResetCompleted AllResetCompletedDialog = new Settings::AllResetCompleted;
    PresentDialog( AllResetCompletedDialog, null, null, null, null, null, null, null, null, false );
    SystemRebootCountDownTimer.Enabled = true;
  }

  $rect <810,310,1010,350>
  var Settings::InProgress BusyDialog;

  $rect <520,310,720,350>
  method void StartFactoryReset()
  {
    trace "StartFactoryReset";
    BusyDialog = new Settings::InProgress;
    PresentDialog( BusyDialog, null, null, null, null, null, null, null, null, false );
    DeviceInterface::SystemDevice.ResetToFactoryDefault();
  }

  $rect <520,360,720,400>
  object Core::PropertyObserver ResetResultObserver
  {
    preset OnEvent = OnResetCompleteSlot;
    preset Outlet = ^DeviceInterface::SystemDevice.FactoryResetComplete;
  }

  // This slot method is executed when the associated property observer 'PropertyObserver' \
  // is notified.
  $rect <520,410,720,450>
  slot OnResetCompleteSlot
  {
    ShowResetCompleteDialog();
  }
}

$rect <20,210,260,250>
$output false
class SET06_BtcDiscovarable : Components::BaseMainBG
{
  $rect <0,290,180,330>
  inherited method Init()
  {
    trace "init SET06";
    DeviceInterface::BluetoothDevice.Discoverable = true;
    NameText.String += DeviceInterface::BluetoothDevice.LocalDeviceName;
    CountDownTimer.Enabled = true;
  }

  $rect <200,340,430,380>
  inherited method OnShortHomeKeyActivated()
  {
    DeviceInterface::BluetoothDevice.Discoverable = false;
    super();
  }

  $rect <0,340,180,380>
  inherited property DDModeEnabled = true;

  $rect <20,20,160,60>
  object Views::Text DiscoverableText
  {
    preset Bounds = <10,46,470,108>;
    preset WrapText = true;
    preset Alignment = Views::TextAlignment[AlignHorzCenter, AlignVertTop];
    preset String = Strings::SET06_DISCOVERABLE;
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <200,290,400,330>
  slot OnCancelSlot
  {
    CountDownTimer.Enabled = false;
    DeviceInterface::BluetoothDevice.Discoverable = false;
    Owner.DismissDialog( this, null, null, null, null, null, false );
  }

  $rect <20,20,160,60>
  object Views::Text TimeLeftText
  {
    preset Bounds = <10,170,470,201>;
    preset WrapText = true;
    preset Alignment = Views::TextAlignment[AlignHorzCenter, AlignVertCenter];
    preset String = Strings::SET06_TIME_LEFT + "3:00";
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <20,20,160,60>
  object Views::Text NameText
  {
    preset Bounds = <10,108,470,170>;
    preset Ellipsis = true;
    preset WrapText = true;
    preset Alignment = Views::TextAlignment[AlignHorzCenter, AlignVertTop];
    preset String = "Name:";
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <500,50,720,90>
  object Core::Timer CountDownTimer
  {
    preset OnTrigger = UpdateCountDownTimeSlot;
    preset Period = 1000;
    preset Enabled = false;
  }

  $rect <500,100,740,140>
  slot UpdateCountDownTimeSlot
  {
    if( CountDownTimeSec > 0)
    {
      CountDownTimeSec = CountDownTimeSec - 1;
      var int32 Second = CountDownTimeSec % 60;
      var string SecondStr;
      if( Second < 10 )
      {
        SecondStr = "0" + string( Second );
      }
      else
      {
        SecondStr = string( Second );
      }
      TimeLeftText.String = Strings::SET06_TIME_LEFT + string( CountDownTimeSec / 60 ) + ":" + SecondStr;
    }
    else
    {
      postsignal OnCancelSlot;
    }
  }

  $rect <500,0,720,40>
  var int32 CountDownTimeSec = 180;

  $rect <20,20,160,60>
  object Menu::PushButton PushButton
  {
    preset Bounds = <165,219,315,259>;
    preset DDModeEnabled = true;
    preset Title = "Cancel";
    preset OnActivate = OnCancelSlot;
  }

  $rect <500,150,790,190>
  object Core::SystemEventHandler BtcPairingStateChangeEventHandler
  {
    preset OnEvent = OnBtcPairingStateChangeSlot;
    preset Event = DeviceInterface::BluetoothDevice.BtcPairingChangedSystemEvent;
  }

  // This slot method is executed when the associated system event handler 'SystemEventHandler' \
  // receives an event.
  $rect <500,200,760,240>
  slot OnBtcPairingStateChangeSlot
  {
    if( null != Owner )
    {
      switch( DeviceInterface::BluetoothDevice.BtcPairingState )
      {
        case Enum::BtcPairingState.FAIL:
        {
          var Settings::TimeoutDialog PairingFailDialog = new Settings::TimeoutDialog;
          PairingFailDialog.Message = Strings::SET07_PAIRING_FAILED;
          PairingFailDialog.DismissAfterTimeout = true;
          DeviceInterface::BluetoothDevice.Discoverable = false;
          Owner.SwitchToDialog( PairingFailDialog, null, null, null, null, null, null, null, null, null, false );
        }
        case Enum::BtcPairingState.PASSKEY_GENERATED:
        {
          DeviceInterface::BluetoothDevice.Discoverable = false;
          Owner.SwitchToDialog( new Settings::SET08_BtcPairDevice, null, null, null, null, null, null, null, null, null, false );
        }
        default:;
      }
    }
  }
}

$rect <20,460,260,500>
$output false
class SET9_10_11_BtConnectionResult : Components::BaseMainBG
{
  $rect <0,290,200,330>
  inherited property DDModeEnabled = true;

  $rect <20,20,160,60>
  object Views::Text Message
  {
    preset Bounds = <10,50,470,236>;
    preset Ellipsis = true;
    preset WrapText = true;
    preset Alignment = Views::TextAlignment[AlignHorzCenter, AlignVertTop];
    preset String = "";
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <0,340,200,380>
  property string DeviceName;

  $rect <210,290,490,330>
  object Core::SystemEventHandler ConnectPairedDeviceResultHandler
  {
    preset OnEvent = OnConnectPairedDeviceResultSlot;
    preset Event = DeviceInterface::BluetoothDevice.BtcConnectionResultSystemEvent;
  }

  // This slot method is executed when the associated system event handler 'SystemEventHandler' \
  // receives an event.
  $rect <210,340,490,380>
  slot OnConnectPairedDeviceResultSlot
  {
    var Enum::BtDeviceConnectionResult ConnectionResult = DeviceInterface::BluetoothDevice.ConnectPairedDeviceResult;
    switch( ConnectionResult )
    {
      case Enum::BtDeviceConnectionResult.SUCCESS:
      {
        // replase %s with the connected BLE deivce name
        var string ProcessString = Strings::SET09_BT_CONNECTED;
        var int32 LeftIdx = ProcessString.find( Strings::ARGUMENT_STR, 0 );
        var int32 RightIdx = ProcessString.length - LeftIdx - Strings::ARGUMENT_STR.length;
        Message.String = ProcessString.left( LeftIdx ) + DeviceName + ProcessString.right( RightIdx );
      }
      case Enum::BtDeviceConnectionResult.FAIL:
      {
        // replase %s with the connected BLE deivce name
        var string ProcessString = Strings::SET10_CONNECTION_FAILED;
        var int32 LeftIdx = ProcessString.find( Strings::ARGUMENT_STR, 0 );
        trace "ProcessString.length ", ProcessString.length;
        trace "Strings::ARGUMENT_STR.length: ", Strings::ARGUMENT_STR.length;
        var int32 RightIdx = ProcessString.length - LeftIdx - Strings::ARGUMENT_STR.length;
        trace "DeviceName: ", DeviceName;
        Message.String = ProcessString.left( LeftIdx ) + DeviceName + ProcessString.right( RightIdx );
        trace "Message.String: ", Message.String;
      }
      case Enum::BtDeviceConnectionResult.AUTHENTICATION_ERR:
      {
        // replase %s with the connected BLE deivce name
        var string ProcessString = Strings::SET11_NO_LONGER_PAIRED;
        var int32 LeftIdx = ProcessString.find( Strings::ARGUMENT_STR, 0 );
        var int32 RightIdx = ProcessString.length - LeftIdx - Strings::ARGUMENT_STR.length;
        Message.String = ProcessString.left( LeftIdx ) + DeviceName + ProcessString.right( RightIdx );
      }
      default: Message.String = "";
    }
    DismissTimer.Enabled = true;
  }

  $rect <510,290,710,330>
  object Core::Timer DismissTimer
  {
    preset OnTrigger = OnDismissSlot;
    preset Period = 0;
    preset Begin = 2000;
  }

  $rect <510,340,710,380>
  slot OnDismissSlot
  {
    Owner.DismissDialog( this, null, null, null, null, null, false );
    DeviceInterface::BluetoothDevice.RefreshPairedDeviceList = true;
  }

  $rect <20,20,160,60>
  object Views::Image Divider
  {
    preset Bounds = <0,36,480,38>;
    preset Alignment = Views::ImageAlignment[AlignVertBottom, ScaleToFit];
    preset Bitmap = Resource::StatusBarDivider;
  }

  $reorder UpdateDDModeMask 1
  $reorder DismissThisDialog 1
  $reorder SlideInDialog 1
  $reorder HideFocusFrameTimer 1
  $reorder OnHideFocusFrameTimeoutSlot 1
  $reorder ChildDialog 1
  $reorder OnDialogSlideInCompletedSlot 1
  $reorder PresentDialogWithSlideInEffect 1
  $reorder SlideOutEffectEnabled 1
  $reorder OnDialogSlideOutCompletedSlot 1
  $reorder OwnerDialog 1
  $reorder SlideOutDialog 1
  $reorder DismissMenuWithSlideOutEffect 1
  $reorder SlideDirection 1
  $reorder Message 1
  $reorder DeviceName 1
  $reorder ConnectPairedDeviceResultHandler 1
  $reorder OnConnectPairedDeviceResultSlot 1
  $reorder DismissTimer 1
  $reorder OnDismissSlot 1
  $reorder Divider 1
}

$rect <20,160,260,200>
$output false
class SET05_BtcMaxPairedDevice : Components::BaseMainBG
{
  $rect <0,290,170,330>
  inherited method Init()
  {
    trace "Init SET05";
  }

  $rect <0,330,170,370>
  inherited property DDModeEnabled = true;

  $rect <20,20,160,60>
  object Views::Text Text
  {
    preset Bounds = <10,45,470,169>;
    preset WrapText = true;
    preset Alignment = Views::TextAlignment[AlignHorzCenter, AlignVertCenter];
    preset String = Strings::SET05_MAX_DEVICES;
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <20,20,160,60>
  object Menu::UpDownPushButtonSet UpDownPushButtonSet
  {
    preset Bounds = <165,176,315,259>;
    preset PassHomeKey = true;
    preset OnUpButtonActivated = OnYesActivatedSlot;
    preset OnDownButtonActivated = OnNoActivatedSlot;
    preset UpButtonTitle = "Yes";
    preset DownButtonTitle = "No";
  }

  $rect <210,290,410,330>
  slot OnYesActivatedSlot
  {
    if( null != Owner )
    {
      Owner.SwitchToDialog( new Settings::SET17_BtcPairedDeviceList, null, null, null, null, null, null, null, null, null, false );
    }
  }

  $rect <210,330,410,370>
  slot OnNoActivatedSlot
  {
    if( null != Owner )
    {
      Owner.DismissDialog( this, null, null, null, null, null, false );
    }
  }
}

$rect <20,260,260,300>
$output false
class SET08_BtcPairDevice : Components::BaseMainBG
{
  $rect <0,290,180,330>
  inherited method Init()
  {
    trace "Init SET08";
    var string ProcessString = Strings::SET08_PAIR_WITH;
    var int32 LeftIdx = ProcessString.find( Strings::ARGUMENT_STR, 0 );
    var int32 RightIdx = ProcessString.length - LeftIdx - Strings::ARGUMENT_STR.length;
    PairText.String = ProcessString.left( LeftIdx ) + DeviceInterface::BluetoothDevice.GetBtcPairingDeviceName() + ProcessString.right( RightIdx );

    PasskeyText.String = Strings::SET08_PASSKEY + "\n" + string( DeviceInterface::BluetoothDevice.GetBtcPasskey() );
  }

  $rect <0,340,170,380>
  inherited property DDModeEnabled = true;

  $rect <190,340,390,380>
  slot OnNoActivatedSlot
  {
    trace "SET08 no";
    $if !$prototyper
      native
      {
        BTM_btc_confirm_passkey( false );
      }
    $endif

    // back to SET03
    var Settings::SET04_BtSettingMenu BtSettingMenu = ( Settings::SET04_BtSettingMenu )Owner;
    if( null != BtSettingMenu )
    {
      if( null != BtSettingMenu.Owner )
      {
        BtSettingMenu.SlideOutEffectEnabled = false;
        BtSettingMenu.DismissThisDialog();
      }
    }
  }

  $rect <20,20,160,60>
  object Views::Text PairText
  {
    preset Bounds = <10,45,470,107>;
    preset WrapText = true;
    preset Alignment = Views::TextAlignment[AlignHorzCenter, AlignVertTop];
    preset String = Strings::SET08_PAIR_WITH;
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <20,20,160,60>
  object Views::Text PasskeyText
  {
    preset Bounds = <10,107,470,169>;
    preset WrapText = true;
    preset Alignment = Views::TextAlignment[AlignHorzCenter, AlignVertCenter];
    preset String = Strings::SET08_PASSKEY;
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <20,20,160,60>
  object Menu::UpDownPushButtonSet UpDownPushButtonSet
  {
    preset Bounds = <165,176,315,259>;
    preset PassHomeKey = true;
    preset OnUpButtonActivated = OnYesActivatedSlot;
    preset OnDownButtonActivated = OnNoActivatedSlot;
    preset UpButtonTitle = Strings::GEN_yes;
    preset DownButtonTitle = Strings::GEN_no;
  }

  $rect <190,290,390,330>
  slot OnYesActivatedSlot
  {
    trace "SET08 yes";
    $if !$prototyper
      native
      {
        BTM_btc_confirm_passkey( true );
      }
    $endif
  }

  $rect <400,290,690,330>
  object Core::SystemEventHandler BtcPairingStateChangeEventHandler
  {
    preset OnEvent = OnBtcPairingStateChangeSlot;
    preset Event = DeviceInterface::BluetoothDevice.BtcPairingChangedSystemEvent;
  }

  // This slot method is executed when the associated system event handler 'SystemEventHandler' \
  // receives an event.
  $rect <400,340,660,380>
  slot OnBtcPairingStateChangeSlot
  {
    if( null != Owner )
    {
      switch( DeviceInterface::BluetoothDevice.BtcPairingState )
      {
        case Enum::BtcPairingState.FAIL:
        {
          var Settings::TimeoutDialog PairingFailDialog = new Settings::TimeoutDialog;
          PairingFailDialog.Message = Strings::SET07_PAIRING_FAILED;
          PairingFailDialog.DismissAfterTimeout = true;
          Owner.SwitchToDialog( PairingFailDialog, null, null, null, null, null, null, null, null, null, false );
        }
        case Enum::BtcPairingState.SUCCESSFUL:
        {
          Owner.SwitchToDialog( new Settings::SET17_BtcPairedDeviceList, null, null, null, null, null, null, null, null, null, false );
          DeviceInterface::BluetoothDevice.RefreshPairedDeviceList = true;
        }
        default:;
      }
    }
  }
}

$rect <20,310,260,350>
$output false
class SET17_BtcPairedDeviceList : Menu::BaseMenuView
{
  $rect <0,290,180,330>
  inherited method Init()
  {
    trace "Init SET17";
    UpdatePairedDeviceNum();
  }

  $rect <0,340,200,380>
  inherited property DDModeEnabled = true;

  $rect <0,390,200,430>
  inherited var SlideOutEffectEnabled = true;

  $rect <520,20,720,60>
  inherited method LoadItemClass()
  {
    //to suppress warning
    if( aItemNo >= 0 )
    {
      // empty body
    }
    return Menu::ItemCheckMark;
  }

  $rect <520,70,720,110>
  inherited method LoadItemTitle()
  {
    // suppress warning
    if( aItemNo > 0 )
    {
      // empty body
    }

    var string Title;
    if( PairedDeviceNum > 0 )
    {
      DeviceInterface::BluetoothDevice.GetPairedDeviceAtItem( aItemNo );
      Title = DeviceInterface::BluetoothDevice.PairedDeviceObj.DeviceName;
    }

    return Title;
  }

  $rect <520,170,720,210>
  inherited method OnItemActivate()
  {
    // suppress warning
    if( aItemNo >= 0 )
    {
      // empty body
    }

    var Menu::ItemCheckMark BtDeviceItem = ( Menu::ItemCheckMark )aMenuItem;
    if( null != BtDeviceItem )
    {
      var Settings::SET19_BtcPairedDeviceOperation Dialog = new Settings::SET19_BtcPairedDeviceOperation;
      Dialog.PairedDeviceIndex = aItemNo;
      Dialog.DeviceName = BtDeviceItem.Title.String;
      Dialog.IsConnected = BtDeviceItem.Checked;
      SlideInDialog( Dialog );
    }
  }

  $rect <517,118,717,158>
  inherited method LoadItemChecked()
  {
    // suppress warning
    if( aItemNo > 0 )
    {
      // empty body
    }

    var bool result = false;
    if( PairedDeviceNum > 0 )
    {
      result = DeviceInterface::BluetoothDevice.PairedDeviceObj.IsConnected;
    }
    return result;
  }

  $rect <20,20,160,60>
  inherited object Menu
  {
    preset DDModeEnabled = true;
    preset NoOfItems = 0;
    preset ItemHeight = Menu::ItemHeightSmall;
    preset ItemNumPerPage = 4;
    preset ArrowScrollBarVisible = true;
  }

  $rect <220,290,440,330>
  var int32 PairedDeviceNum = 0;

  $rect <220,340,440,380>
  method void UpdatePairedDeviceNum()
  {
    PairedDeviceNum = DeviceInterface::BluetoothDevice.PairedDeviceNum;
    Menu.NoOfItems = PairedDeviceNum;

    trace "SET17 ", PairedDeviceNum;

    if( PairedDeviceNum > 0 )
    {
      NoDataTimeoutTimer.Enabled = false;
      Menu.Focusable = true;
      Menu.InvalidateItems( 0, PairedDeviceNum - 1 );
      NoDataText.Visible = false;
    }
    else
    {
      NoDataTimeoutTimer.Enabled = true;
      Menu.Focusable = false;
      Menu.InvalidateItems( 0, 0 );
      NoDataText.Visible = true;
    }
  }

  $rect <460,290,660,330>
  object Core::PropertyObserver RefreshListObserver
  {
    preset OnEvent = OnRefreshListSlot;
    preset Outlet = ^DeviceInterface::BluetoothDevice.RefreshPairedDeviceList;
  }

  // This slot method is executed when the associated property observer 'PropertyObserver' \
  // is notified.
  $rect <460,340,660,380>
  slot OnRefreshListSlot
  {
    trace "OnRefreshListSlot";
    UpdatePairedDeviceNum();
  }

  $rect <20,20,160,60>
  object Views::Text NoDataText
  {
    preset Bounds = <10,50,470,236>;
    preset String = "No data";
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <680,290,880,330>
  object Core::Timer NoDataTimeoutTimer
  {
    preset OnTrigger = OnNoDataTimeoutSlot;
    preset Begin = 2000;
  }

  $rect <683,339,883,379>
  slot OnNoDataTimeoutSlot
  {
    if( null != Owner )
    {
      SlideOutDialog();
    }
  }
}

$rect <20,410,260,450>
$output false
class SET19_BtcPairedDeviceOperation : Menu::BaseMenuView
{
  $rect <10,300,190,340>
  inherited method Init()
  {
    trace "Init SET19";
  }

  $rect <230,350,430,390>
  inherited property DDModeEnabled = true;

  $rect <230,300,430,340>
  inherited var SlideOutEffectEnabled = true;

  $rect <510,20,710,60>
  inherited method LoadItemClass()
  {
    // to suppress warning
    if( aItemNo >= 0 )
    {
      // empty body
    }
    return Menu::ItemBase;

  }

  $rect <510,70,710,110>
  inherited method LoadItemTitle()
  {
    var string title = "";

    switch( aItemNo )
    {
      case 0: title = Strings::SET19_DELETE_PAIRING;
      case 1: title = Strings::SET19_CONNECT;
      case 2: title = Strings::SET19_DISCONNECT;
      default:;
    }

    return title;
  }

  $rect <510,170,710,210>
  inherited method OnItemActivate()
  {
    switch( aItemNo )
    {
      case 0:
      {
        DeviceInterface::BluetoothDevice.UnpairDevice( PairedDeviceIndex );
        if( DeviceInterface::BluetoothDevice.IsBlePairedDevice( PairedDeviceIndex ) )
        {
          var Settings::SET18_DeleteBleDevice Dialog = new Settings::SET18_DeleteBleDevice;
          Dialog.DeviceName = DeviceName;
          var Menu::BaseMenuView OwnerMenu = ( Menu::BaseMenuView )Owner;
          if( null != OwnerMenu )
          {
            OwnerMenu.Menu.FocusFrame.Visible = true;
          }
          Owner.SwitchToDialog( Dialog, null, null, null, null, null, null, null, null, null, false );
        }
        else
        {
          DeviceInterface::BluetoothDevice.RefreshPairedDeviceList = true;
          SlideOutDialog();
        }
      }
      case 1:
      {
        var Settings::SET9_10_11_BtConnectionResult Dialog = new Settings::SET9_10_11_BtConnectionResult;
        Dialog.DeviceName = DeviceName;
        var Menu::BaseMenuView OwnerMenu = ( Menu::BaseMenuView )Owner;
        if( null != OwnerMenu )
        {
          OwnerMenu.Menu.FocusFrame.Visible = true;
        }
        Owner.SwitchToDialog( Dialog, null, null, null, null, null, null, null, null, null, false );
        DeviceInterface::BluetoothDevice.ConnectPairedDevice( PairedDeviceIndex );
      }
      case 2:
      {
        DeviceInterface::BluetoothDevice.DisconnectPairedDevice( PairedDeviceIndex );
        SlideOutDialog();
        DeviceInterface::BluetoothDevice.RefreshPairedDeviceList = true;
      }
      default: trace "", aMenuItem; // suppress warning;
    }
  }

  $rect <510,120,710,160>
  inherited method LoadItemEnabled()
  {
    var bool OptionEnabled = false;

    switch( aItemNo )
    {
      case 0: OptionEnabled = true;
      case 1: OptionEnabled = !IsConnected;
      case 2: OptionEnabled = IsConnected;
      default:;
    }

    return OptionEnabled;
  }

  $rect <20,20,160,60>
  inherited object Menu
  {
    preset DDModeEnabled = true;
    preset NoOfItems = 3;
  }

  $rect <10,350,210,390>
  property int32 PairedDeviceIndex;

  $rect <10,400,210,440>
  property string DeviceName;

  $rect <10,450,210,490>
  property bool IsConnected = false;
}

$rect <20,360,260,400>
$output false
class SET18_DeleteBleDevice : Components::BaseMainBG
{
  $rect <10,290,190,330>
  inherited method Init()
  {
    trace "Init SET18";

    var string ProcessString = Strings::SET18_DELETE_PAIRING_RECORD;
    var int32 LeftIdx = ProcessString.find( Strings::ARGUMENT_STR, 0 );
    var int32 RightIdx = ProcessString.length - LeftIdx - Strings::ARGUMENT_STR.length;
    Text.String = ProcessString.left( LeftIdx ) + DeviceName + ProcessString.right( RightIdx );
  }

  $rect <10,340,190,380>
  inherited property DDModeEnabled = true;

  $rect <20,20,160,60>
  object Views::Text Text
  {
    preset Bounds = <10,50,470,236>;
    preset WrapText = true;
    preset Alignment = Views::TextAlignment[AlignHorzCenter, AlignVertCenter];
    preset String = Strings::SET18_DELETE_PAIRING_RECORD;
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <210,290,410,330>
  property string DeviceName;
}

$rect <310,310,510,350>
$output false
class BtFwUpdateDialog : Core::Group
{
  $rect <10,300,230,340>
  inherited property Bounds = <0,0,480,272>;

  $rect <20,20,160,60>
  object Views::Rectangle Rectangle
  {
    preset Bounds = <0,0,480,272>;
    preset Color = #000000FF;
  }

  $rect <20,20,160,60>
  object Views::Text StatusText
  {
    preset Bounds = <80,60,380,210>;
    preset WrapText = true;
    preset String = "Updating BT firmware, please wait...";
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
    preset Color = #FFFFFFFF;
  }

  $rect <10,350,240,390>
  object Core::PropertyObserver BtFwStatusObserver
  {
    preset OnEvent = OnBtFwStatusUpdateSlot;
    preset Outlet = ^DeviceInterface::BluetoothDevice.BtFwStatus;
  }

  // This slot method is executed when the associated property observer 'PropertyObserver' \
  // is notified.
  $rect <10,400,240,440>
  slot OnBtFwStatusUpdateSlot
  {
    switch( DeviceInterface::BluetoothDevice.BtFwStatus )
    {
      case Enum::BtFwStatus.UPDATE_FINISH:
      {
        StatusText.String = "Update BT firmware complete";
        RemoveDialogTimer.Enabled = true;
      }
      case Enum::BtFwStatus.UPDATE_ABORT:
      {
        StatusText.String = "Update BT firmware fail";
        RemoveDialogTimer.Enabled = true;
      }
      default:;
    }
  }

  $rect <260,300,460,340>
  object Core::Timer RemoveDialogTimer
  {
    preset OnTrigger = OnRemoveDialogSlot;
    preset Period = 2000;
  }

  $rect <260,352,460,392>
  slot OnRemoveDialogSlot
  {
    GetRoot().EndModal( this );
    GetRoot().Remove( this );
  }
}

$rect <310,10,550,50>
$output false
class TimeoutDialog : Components::BaseMainBG
{
  $rect <20,290,200,330>
  inherited property DDModeEnabled = true;

  $rect <20,20,160,60>
  object Views::Text MessageText
  {
    preset Bounds = <10,50,470,236>;
    preset Ellipsis = true;
    preset WrapText = true;
    preset String = "";
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <230,290,430,330>
  property string Message;

  $rect <230,330,430,370>
  onset Message
  {
    if( pure Message != value )
    {
      pure Message = value;
      MessageText.String = value;
    }
  }

  $rect <460,290,660,330>
  object Core::Timer TimeoutTimer
  {
    preset OnTrigger = OnTimeoutSlot;
    preset Period = 0;
    preset Begin = 2000;
    preset Enabled = true;
  }

  $rect <460,330,660,370>
  slot OnTimeoutSlot
  {
    if( DismissAfterTimeout )
    {
      if( null != Owner )
      {
        Owner.DismissDialog( this, null, null, null, null, null, false );
      }
    }
    else
    {
      postsignal OnTimeout;
    }
  }

  $rect <460,370,660,410>
  property slot OnTimeout;

  $rect <230,380,430,420>
  property bool DismissAfterTimeout = false;
}

$rect <710,130,910,170>
$output false
class SET30_QRCode : Components::BaseMainBG
{
  $rect <550,20,750,60>
  inherited method Init()
  {
    DeviceInterface::SystemDevice.GetQrCode( PixelPerModule );
  }

  $rect <10,290,210,330>
  inherited property Bounds = <0,0,480,272>;

  $rect <550,180,750,220>
  inherited method OnShortDownKeyActivated()
  {
    if( PixelPerModule > 1 )
    {
      PixelPerModule--;
      DeviceInterface::SystemDevice.GetQrCode( PixelPerModule );
    }
    else
    {
      trace "please press up";
    }
  }

  $rect <550,130,750,170>
  inherited method OnShortUpKeyActivated()
  {
    if( PixelPerModule < 4 )
    {
      PixelPerModule++;
      DeviceInterface::SystemDevice.GetQrCode( PixelPerModule );
    }
    else
    {
      trace "please press down";
    }
  }

  $rect <10,340,210,380>
  inherited property DDModeEnabled = true;

  $rect <550,70,750,110>
  object Core::SystemEventHandler QrCodeUpdateEventHandler
  {
    preset OnEvent = OnQrCodeUpdateSlot;
    preset Event = DeviceInterface::SystemDevice.QrCodeSystemEvent;
  }

  // This slot method is executed when the associated system event handler 'SystemEventHandler' \
  // receives an event.
  $rect <750,70,950,110>
  slot OnQrCodeUpdateSlot
  {
    Resource::QrCodeExternBitmap.Name = "QRCode" + string( PixelPerModule );
    PixelText.String = string( PixelPerModule ) + " Pixel";
    var float QrCodeWidth = 33 * PixelPerModule * 0.01935;
    QrCodeWidthText.String = "Width: " + string( QrCodeWidth ) + " cm";
    QrCodeContent.String = "QR Code content:\n" + DeviceInterface::SystemDevice.QrCodeText;
  }

  $rect <20,20,160,60>
  object Views::Image QrCode
  {
    preset Bounds = <20,98,207,227>;
    preset Alignment = Views::ImageAlignment[AlignHorzCenter, AlignVertCenter];
    preset Bitmap = Resource::QrCodeExternBitmap;
  }

  $rect <550,240,750,280>
  var int32 PixelPerModule = 1;

  $rect <20,20,160,60>
  object Views::Text PixelText
  {
    preset Bounds = <210,48,398,98>;
    preset Alignment = Views::TextAlignment[AlignHorzLeft, AlignVertCenter];
    preset String = "";
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <20,20,160,60>
  object Views::Text QrCodeWidthText
  {
    preset Bounds = <210,192,442,240>;
    preset Alignment = Views::TextAlignment[AlignHorzLeft, AlignVertCenter];
    preset String = "";
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <20,20,160,60>
  object Views::Text QrCodeContent
  {
    preset Bounds = <210,98,463,192>;
    preset WrapText = true;
    preset Alignment = Views::TextAlignment[AlignHorzLeft, AlignVertCenter];
    preset String = "";
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }
}

$rect <310,60,550,100>
$output false
class SET22_BleAdvertising : Components::BaseMainBG
{
  $rect <0,280,180,320>
  inherited method Init()
  {
    trace "Init SET22";
    DeviceInterface::BluetoothDevice.SetBleAdvertisement( true );
  }

  $rect <0,380,230,420>
  inherited method OnShortHomeKeyActivated()
  {
    DeviceInterface::BluetoothDevice.SetBleAdvertisement( false );
    super();
  }

  $rect <0,330,180,370>
  inherited property DDModeEnabled = true;

  $rect <20,20,160,60>
  object Views::Text DeviceNameText
  {
    preset Bounds = <10,132,470,163>;
    preset String = Strings::SET22_DEVICE_NAME;
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <20,20,160,60>
  object Views::Text WaitText
  {
    preset Bounds = <10,194,470,256>;
    preset WrapText = true;
    preset String = Strings::SET22_WAIT_APP_CONNECTION;
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <20,20,160,60>
  object Views::Text LocalDeviceNameText
  {
    preset Bounds = <10,163,470,194>;
    preset Ellipsis = true;
    preset String = DeviceInterface::BluetoothDevice.LocalDeviceName;
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <20,20,160,60>
  object Views::Image Image
  {
    preset Bounds = <193,36,287,130>;
    preset Animated = true;
    preset Bitmap = Resource::LoadingAnimation;
  }

  $rect <250,280,510,320>
  object Core::SystemEventHandler BlePairingStateChangedEventHandler
  {
    preset OnEvent = OnBlePairingStateChangedSlot;
    preset Event = DeviceInterface::BluetoothDevice.BlePairingStateChangedEvent;
  }

  // This slot method is executed when the associated system event handler 'SystemEventHandler' \
  // receives an event.
  $rect <250,330,510,370>
  slot OnBlePairingStateChangedSlot
  {
    if( null != Owner )
    {
      switch( DeviceInterface::BluetoothDevice.BlePairingState )
      {
        case Enum::BlePairingState.TIMEOUT,
             Enum::BlePairingState.FAIL:
        {
          DeviceInterface::BluetoothDevice.SetBleAdvertisement( false );
          Owner.SwitchToDialog( new Settings::SET23_BlePairingFail, null, null, null, null, null, null, null, null, null, false );
        }
        case Enum::BlePairingState.SUCCESSFUL:
        {
          var Settings::TimeoutDialog MessageDialog = new Settings::TimeoutDialog;
          var Settings::SET03_ConnectionSettingMenu ConnectionSettingDialog = ( Settings::SET03_ConnectionSettingMenu )Owner;
          if( null != ConnectionSettingDialog )
          {
            MessageDialog.Message = Strings::SET26_PAIRING_SUCCESSFUL;
            MessageDialog.DismissAfterTimeout = true;
            DeviceInterface::BluetoothDevice.SetBleAdvertisement( false );
            ConnectionSettingDialog.SwitchToDialog( MessageDialog, null, null, null, null, null, null, null, null, null, false );
          }
        }
        case Enum::BlePairingState.PINCODE_GENERATED:
        {
          DeviceInterface::BluetoothDevice.SetBleAdvertisement( false );
          Owner.SwitchToDialog( new Settings::SET25_BlePincode, null, null, null, null, null, null, null, null, null, false );
        }
        default:;
      }
    }
  }
}

$rect <310,110,550,150>
$output false
class SET23_BlePairingFail : Settings::TimeoutDialog
{
  $rect <20,20,160,60>
  inherited object MessageText
  {
    preset String = Strings::SET23_PAIRING_FAILED;
  }

  $rect <10,290,210,330>
  inherited slot OnTimeoutSlot
  {
    if( DeviceInterface::BluetoothDevice.GetBlePairingFailCount() > 1 )
    {
      Owner.SwitchToDialog( new Settings::SET24_CheckPairingRecord, null, null, null, null, null, null, null, null, null, false );
    }
    else
    {
      Owner.DismissDialog( this, null, null, null, null, null, false );
    }
  }

  $reorder Message 1
  $reorder OnSetMessage 1
  $reorder OnTimeout 3
}

$rect <310,160,550,200>
$output false
class SET24_CheckPairingRecord : Components::BaseMainBG
{
  $rect <0,290,180,330>
  inherited method Init()
  {
    trace "Init SET24";
  }

  $rect <0,340,200,380>
  inherited property DDModeEnabled = true;

  $rect <20,20,160,60>
  object Views::Text MessageText
  {
    preset Bounds = <10,46,470,201>;
    preset WrapText = true;
    preset String = Strings::SET24_CHECK_BT_PAIRING_RECORD;
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <20,20,160,60>
  object Menu::PushButton PushButton
  {
    preset Bounds = <165,219,315,259>;
    preset Title = Strings::GEN_ok;
    preset OnActivate = OnOkActivatedSlot;
  }

  $rect <210,290,410,330>
  slot OnOkActivatedSlot
  {
    Owner.DismissDialog( this, null, null, null, null, null, false );
  }
}

$rect <310,210,550,250>
$output false
class SET25_BlePincode : Components::BaseMainBG
{
  $rect <0,290,180,330>
  inherited method Init()
  {
    var string PincodeString = string( DeviceInterface::BluetoothDevice.BlePincode );
    PincodeText.String = Strings::SET25_PIN + "\n" + PincodeString;
    trace "Init SET25 ", PincodeString;
  }

  $rect <0,340,180,380>
  inherited method UpdateViewState()
  {
    super( aState );

    // check if BLE pairing state changed
    if( aState.contains( Core::ViewState[ Dialog ] ) && null != Owner )
    {
      postsignal OnBlePairingStateChangedSlot;
    }
  }

  $rect <0,440,230,480>
  inherited method OnShortHomeKeyActivated()
  {
    DeviceInterface::BluetoothDevice.SetBleAdvertisement( false );
    super();
  }

  $rect <0,390,180,430>
  inherited property DDModeEnabled = true;

  $rect <240,290,500,330>
  object Core::SystemEventHandler BleStateChangedEventHandler
  {
    preset OnEvent = OnBlePairingStateChangedSlot;
    preset Event = DeviceInterface::BluetoothDevice.BlePairingStateChangedEvent;
  }

  // This slot method is executed when the associated system event handler 'SystemEventHandler' \
  // receives an event.
  $rect <240,340,500,380>
  slot OnBlePairingStateChangedSlot
  {
    if( null != Owner )
    {
      switch( DeviceInterface::BluetoothDevice.BlePairingState )
      {
        case Enum::BlePairingState.FAIL,
             Enum::BlePairingState.TIMEOUT:
        {
          Owner.SwitchToDialog( new Settings::SET23_BlePairingFail, null, null, null, null, null, null, null, null, null, false );
        }
        case Enum::BlePairingState.SUCCESSFUL:
        {
          var Settings::TimeoutDialog MessageDialog = new Settings::TimeoutDialog;
          MessageDialog.Message = Strings::SET26_PAIRING_SUCCESSFUL;
          MessageDialog.DismissAfterTimeout = true;
          Owner.SwitchToDialog( MessageDialog, null, null, null, null, null, null, null, null, null, false );
        }
        default:;
      }
    }
  }

  $rect <20,20,160,60>
  object Views::Text PincodeText
  {
    preset Bounds = <10,50,470,236>;
    preset String = "";
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }
}

$rect <710,70,910,110>
$output false
class SET28_SystemInfo : Components::BaseMainBG
{
  $rect <520,10,720,50>
  inherited method Init()
  {
    EsnText.String = DeviceInterface::SystemDevice.ESN;
    SoftwareVersionText.String = DeviceInterface::SystemDevice.SoftwareVersion;
    $if $prototyper
      // for screenshot
      EsnText.String = "XXXXXXXXX";
      SoftwareVersionText.String = "XX.XX.XXX";
    $endif
  }

  $rect <10,290,210,330>
  inherited property Bounds = <0,0,480,272>;

  $rect <520,110,750,150>
  inherited method OnShortMagicKeyActivated()
  {
    this.PresentDialog( new Development::DEV_Main, null, null, null, null, null, null, null, null, false );
  }

  $rect <10,340,210,380>
  inherited property DDModeEnabled = true;

  $rect <20,20,160,60>
  object Views::Text ESN
  {
    preset Bounds = <10,45,470,76>;
    preset String = Strings::SET28_esn;
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <20,20,160,60>
  object Views::Text SoftwareVersionTitle
  {
    preset Bounds = <10,107,470,138>;
    preset String = Strings::SET28_sw_version;
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <20,20,160,60>
  object Views::Text EsnText
  {
    preset Bounds = <10,76,470,107>;
    preset String = "";
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <20,20,160,60>
  object Views::Text SoftwareVersionText
  {
    preset Bounds = <10,138,470,169>;
    preset String = DeviceInterface::SystemDevice.SoftwareVersion;
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <520,260,720,300>
  object Core::PropertyObserver EsnObserver
  {
    preset OnEvent = OnEsnReceivedSlot;
    preset Outlet = ^DeviceInterface::SystemDevice.ESN;
  }

  // This slot method is executed when the associated property observer 'PropertyObserver' \
  // is notified.
  $rect <520,300,720,340>
  slot OnEsnReceivedSlot
  {
    EsnText.String = DeviceInterface::SystemDevice.ESN;
  }

  $rect <20,20,160,60>
  object Menu::UpDownPushButtonSet UpDownPushButtonSet
  {
    preset Bounds = <95,176,385,259>;
    preset PassHomeKey = true;
    preset PassMagicKey = true;
    preset DDModeEnabled = true;
    preset OnUpButtonActivated = OnUnitIdButtonActivatedSlot;
    preset UpButtonTitle = Strings::SET28_unit_id;
    preset DownButtonTitle = Strings::SET28_sw_update;
    preset DownButtonEnabled = false;
  }

  $rect <520,160,760,200>
  slot OnUnitIdButtonActivatedSlot
  {
    this.PresentDialog( new Settings::SET30_QRCode, null, null, null, null, null, null, null, null, false );
  }
}
