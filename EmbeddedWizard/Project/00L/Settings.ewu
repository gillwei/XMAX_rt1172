$version 10.00

$rect <320,380,520,420>
inline Inline
{
  #include "BTM_pub.h"
  #include "ew_priv.h"
}

$rect <20,10,260,50>
$output false
class SET01_MainSettingMenu : Menu::BaseMenuView
{
  $rect <510,10,710,50>
  inherited method Init()
  {
    var int32 i;
    var int32 NoOfItems;
    var Enum::MainSettingItem SettingItem;

    for( i = 0; i < (int32)Enum::MainSettingItem.TOTAL; i++ )
    {
      SettingItem = (Enum::MainSettingItem)i;
      switch( SettingItem )
      {
        case Enum::MainSettingItem.TRACTION_CONTROL:
        {
          if( DeviceInterface::VehicleDevice.IsVehicleFunctionSupported( Enum::VehicleSupportedFunction.TCS ) )
          {
            Settings[NoOfItems] = SettingItem;
            NoOfItems++;
          }
        }
        case Enum::MainSettingItem.GRIP_WARMER:
        {
          if( DeviceInterface::VehicleDevice.IsVehicleFunctionSupported( Enum::VehicleSupportedFunction.GRIP_WARMER ) )
          {
            Settings[NoOfItems] = SettingItem;
            NoOfItems++;
          }
        }
        case Enum::MainSettingItem.SEAT_HEATER:
        {
          if( DeviceInterface::VehicleDevice.IsVehicleFunctionSupported( Enum::VehicleSupportedFunction.SEAT_HEATER ) )
          {
            Settings[NoOfItems] = SettingItem;
            NoOfItems++;
          }
        }
        default:
        {
          Settings[NoOfItems] = SettingItem;
          NoOfItems++;
        }
      }
    }

    Menu.NoOfItems = NoOfItems;
  }

  $rect <10,290,210,330>
  inherited property DDModeEnabled = true;

  $rect <510,60,710,100>
  inherited method LoadItemClass()
  {
    var class ItemClass = null;
    if( aItemNo >= 0 )
    {
      ItemClass = Menu::ItemBase;
    }
    return ItemClass;
  }

  $rect <510,110,710,150>
  inherited method LoadItemTitle()
  {
    var string Title = "";
    switch( Settings[aItemNo] )
    {
      case Enum::MainSettingItem.TRACTION_CONTROL: Title = Strings::SET01_TRACTION_CONTROL;
      case Enum::MainSettingItem.CONNECTION: Title = Strings::SET01_CONNECTION;
      case Enum::MainSettingItem.CLOCK: Title = Strings::SET01_CLOCK;
      case Enum::MainSettingItem.BRIGHTNESS: Title = Strings::SET01_BRIGHTNESS;
      case Enum::MainSettingItem.UNIT: Title = Strings::SET01_UNIT;
      case Enum::MainSettingItem.GRIP_WARMER: Title = Strings::SET01_GRIP_WARMER_SETTINGS;
      case Enum::MainSettingItem.SEAT_HEATER: Title = Strings::SET01_SEAT_HEATER_SETTINGS;
      case Enum::MainSettingItem.SYSTEM_INFO: Title = Strings::SET01_SYSTEM_INFO;
      case Enum::MainSettingItem.LEGAL_INFO: Title = Strings::SET01_LEGAL_INFO;
      case Enum::MainSettingItem.INFORMATION_RESET: Title = Strings::SET01_INFO_RESET;
      default:;
    }
    return Title;
  }

  $rect <510,160,710,200>
  inherited method OnItemActivate()
  {
    aMenuItem; //suppress warning
    var Components::BaseComponent Dialog = null;

    switch( Settings[aItemNo] )
    {
      case Enum::MainSettingItem.TRACTION_CONTROL: Dialog = new TCS::TCS01_Main;
      case Enum::MainSettingItem.CONNECTION:
      {
        if( !DeviceInterface::SystemDevice.IsHopperTestMode )
        {
          Dialog = new Settings::SET03_ConnectionSettingMenu;
        }
      }
      case Enum::MainSettingItem.INFORMATION_RESET: Dialog = new Settings::SET43_ResetMenu;
      case Enum::MainSettingItem.CLOCK: Dialog = new Clock::CLK01_ClockSettingMenu;
      case Enum::MainSettingItem.BRIGHTNESS: Dialog = new Brightness::BRT01_BrightnessSettingMenu;
      case Enum::MainSettingItem.UNIT: Dialog = new Unit::UNT01_UnitSettingMenu;
      case Enum::MainSettingItem.GRIP_WARMER:
      {
        DeviceInterface::VehicleDevice.CurrentVehicleFunction = Enum::VehicleSupportedFunction.GRIP_WARMER;
        DeviceInterface::VehicleDevice.SetData( Enum::VehicleTxType.HEATER_SELECT, SeatHeater_GripWarmer::GRIP_WARMER );
        Dialog = new SeatHeater_GripWarmer::SHT02_GPW02_Main;
      }
      case Enum::MainSettingItem.SEAT_HEATER:
      {
        DeviceInterface::VehicleDevice.CurrentVehicleFunction = Enum::VehicleSupportedFunction.SEAT_HEATER;
        DeviceInterface::VehicleDevice.SetData( Enum::VehicleTxType.HEATER_SELECT, SeatHeater_GripWarmer::RIDER_SEAT_HEATER );
        Dialog = new SeatHeater_GripWarmer::SHT02_GPW02_Main;
      }
      case Enum::MainSettingItem.SYSTEM_INFO: Dialog = new Settings::SET28_SystemInfo;
      case Enum::MainSettingItem.LEGAL_INFO: Dialog = new Settings::SET35_LegalMenu;
      default:;
    }

    if( null != Dialog )
    {
      var Menu::BaseMenuView MenuDialog = ( Menu::BaseMenuView )Dialog;
      if( null != MenuDialog )
      {
        SlideInDialog( MenuDialog );
      }
      else
      {
        PresentDialog( Dialog, null, null, null, null, null, null, null, null, false );
      }
    }
  }

  $rect <20,20,160,60>
  inherited object Menu
  {
    preset DDModeEnabled = true;
    preset NoOfItems = 9;
    preset ArrowScrollBarVisible = true;
  }

  $rect <730,110,930,150>
  array Enum::MainSettingItem Settings[ 10 ];

  $reorder OnSetDDModeEnabled 1
  $reorder LoadItemClass 3
  $reorder LoadItemTitle 3
  $reorder OnItemActivate 2
  $reorder LoadItemChecked 2
  $reorder LoadItemEnabled 2
}

$rect <20,60,260,100>
$output false
class SET03_ConnectionSettingMenu : Menu::BaseMenuView
{
  $rect <10,290,190,330>
  inherited method Init()
  {
    trace "Init SET03";
  }

  $rect <10,340,210,380>
  inherited property DDModeEnabled = true;

  $rect <10,390,210,430>
  inherited var SlideOutEffectEnabled = true;

  $rect <510,20,710,60>
  inherited method LoadItemClass()
  {
    aItemNo; // suppress warning
    return Menu::ItemBase;
  }

  $rect <510,70,710,110>
  inherited method LoadItemTitle()
  {
    var string title = "";
    if( aItemNo < ItemTitleArray.size )
      {
      title = ItemTitleArray[aItemNo];
      }
    return title;
  }

  $rect <510,120,710,160>
  inherited method OnItemActivate()
  {
    if( null == aMenuItem )
    {
      // empty body to suppress warning
    }

    switch( aItemNo )
    {
      case 0: SlideInDialog( new Settings::SET04_BtSettingMenu );
      case 1: HandleYConnectAppPairing();
      default :;
    }
  }

  $rect <20,20,160,60>
  inherited object Menu
  {
    preset DDModeEnabled = true;
    preset NoOfItems = 2;
  }

  $rect <730,70,930,110>
  array string ItemTitleArray[ 2 ] =
  (
    Default[0] = Strings::GEN_BLUETOOTH;
    Default[1] = Strings::SET03_Y_CONNECT_APP_PAIRING;
  );

  $rect <230,290,470,330>
  method void HandleYConnectAppPairing()
  {
    if( DeviceInterface::BluetoothDevice.IsBtConnected() )
    {
      if( DeviceInterface::BluetoothDevice.IsMotoconConnected() )
      {
        // replase %s with the connected BLE deivce name
        var string ProcessString = Strings::SET21_BLE_ALREADY_CONNECTED;
        var int32 LeftIdx = ProcessString.find( Strings::ARGUMENT_STR, 0 );
        var int32 RightIdx = ProcessString.length - LeftIdx - Strings::ARGUMENT_STR.length;
        var string Message = ProcessString.left( LeftIdx ) + DeviceInterface::BluetoothDevice.GetBleConnectedDeviceName() + ProcessString.right( RightIdx );

        PresentDialogWithTimeout( Message );
      }
      else
      {
        PresentDialog( new Settings::SET22_BleAdvertising, null, null, null, null, null, null, null, null, false );
      }
    }
    else
    {
      PresentDialogWithTimeout( Strings::SET20_COMPLETE_BT_PAIRING_FIRST );
    }
  }

  $rect <230,340,470,380>
  method void PresentDialogWithTimeout( arg string aMessage )
  {
    var Settings::TimeoutDialog Dialog = new Settings::TimeoutDialog;
    Dialog.Message = aMessage;
    Dialog.DismissAfterTimeout = true;
    PresentDialog( Dialog, null, null, null, null, null, null, null, null, false );
  }
}

$rect <20,110,260,150>
$output false
class SET04_BtSettingMenu : Menu::BaseMenuView
{
  $rect <10,290,190,330>
  inherited method Init()
  {
    DeviceInterface::BluetoothDevice.GetBluetoothEnable();
  }

  $rect <10,340,210,380>
  inherited property DDModeEnabled = true;

  $rect <10,390,210,430>
  inherited var SlideOutEffectEnabled = true;

  $rect <490,30,690,70>
  inherited method LoadItemClass()
  {
    var class ClassType = null;
    if( aItemNo < ItemClassArray.size )
    {
      ClassType = ItemClassArray[aItemNo];
    }
    return ClassType;
  }

  $rect <490,80,690,120>
  inherited method LoadItemTitle()
  {
    var string title = "";
    if( aItemNo < ItemTitleArray.size )
      {
      title = ItemTitleArray[aItemNo];
      }
    return title;
  }

  $rect <490,230,690,270>
  inherited method OnItemActivate()
  {
    var bool IsChecked = false;
    var Menu::ItemCheckbox CheckBoxItem = ( Menu::ItemCheckbox )aMenuItem;
    if( null != CheckBoxItem )
    {
      IsChecked = CheckBoxItem.Checked;
    }

    switch( aItemNo )
    {
      case 0:
      {
        DeviceInterface::BluetoothDevice.BluetoothEnable = IsChecked;
        Menu.InvalidateItems( 1, 4 );
      }
      case 1:
      {
        if( DeviceInterface::BluetoothDevice.IsMaxPairedDevice )
        {
          PresentDialog( new Settings::SET05_BtcMaxPairedDevice, null, null, null, null, null, null, null, null, false );
        }
        else
        {
          PresentDialog( new Settings::SET06_BtcDiscovarable, null, null, null, null, null, null, null, null, false );
        }
      }
      case 2: SlideInDialog( new Settings::SET17_BtcPairedDeviceList );
      case 3: DeviceInterface::BluetoothDevice.AutoConnect = IsChecked;
      default:;
    }
  }

  $rect <490,130,690,170>
  inherited method LoadItemChecked()
  {
    var bool IsChecked = false;
    switch( aItemNo )
    {
      case 0: IsChecked = DeviceInterface::BluetoothDevice.BluetoothEnable;
      case 3: IsChecked = DeviceInterface::BluetoothDevice.AutoConnect;
      default:;
    }
    return IsChecked;
  }

  $rect <490,180,690,220>
  inherited method LoadItemEnabled()
  {
    var bool ItemEnabled = true;
    if( aItemNo > 0 )
    {
      ItemEnabled = DeviceInterface::BluetoothDevice.BluetoothEnable;
    }
    return ItemEnabled;
  }

  $rect <20,20,160,60>
  inherited object Menu
  {
    preset DDModeEnabled = true;
    preset NoOfItems = 4;
    preset ItemHeight = Menu::ItemHeightSmall;
    preset ItemNumPerPage = 4;
  }

  $rect <710,30,910,70>
  array class ItemClassArray[ 4 ] =
  (
    Default[0] = Menu::ItemCheckbox;
    Default[1] = Menu::ItemBase;
    Default[2] = Menu::ItemBase;
    Default[3] = Menu::ItemCheckbox;
  );

  $rect <710,80,910,120>
  array string ItemTitleArray[ 4 ] =
  (
    Default[0] = Strings::GEN_BLUETOOTH;
    Default[1] = Strings::SET04_DISCOVERY_MODE;
    Default[2] = Strings::SET04_PAIRED_DEVICES;
    Default[3] = Strings::SET04_BT_AUTO_CONNECT;
  );

  $rect <710,130,910,170>
  var bool IsBtEnabled = false;

  $rect <230,290,480,330>
  method void PresentPairedDeviceList()
  {
    var int32 i = 0;
    for( i = 0; i < CountDialogs(); i++ )
    {
      DismissDialog( GetDialogAtIndex( 0 ), null, null, null, null, null, true );
    }
    PresentDialog( new Settings::SET17_BtcPairedDeviceList, null, null, null, null, null, null, null, null, false );
  }
}

// System Settings UI
note group Note
{
  attr Bounds = <580,10,1070,680>;
}

$rect <600,160,800,200>
$output false
class SET35_LegalMenu : Menu::BaseMenuView
{
  $rect <10,360,210,400>
  inherited property DDModeEnabled = true;

  $rect <10,310,210,350>
  inherited var SlideOutEffectEnabled = true;

  $rect <520,110,720,150>
  inherited method LoadItemClass()
  {
    var class ItemClass = null;
    if( aItemNo >= 0 )
    {
    ItemClass = Menu::ItemBase;
    }
    return ItemClass;
  }

  $rect <520,60,720,100>
  inherited method LoadItemTitle()
  {
    var string Title = "";
    if( aItemNo >= 0 )
    {
      Title = Strings::SET35_LICENSE;
    }
    return Title;
  }

  $rect <520,200,720,240>
  inherited method OnItemActivate()
  {
    aItemNo;   // suppress warning
    aMenuItem; // suppress warning
    SlideInDialog( new Settings::SET37_3rdPartyLicenses );
  }

  $rect <20,20,160,60>
  inherited object Menu
  {
    preset DDModeEnabled = true;
    preset NoOfItems = 1;
  }

  $reorder LoadItemBaseValue 4
}

$rect <820,110,1020,150>
$output false
class SoftwareUpdate : Menu::BaseMenuView
{
  $rect <10,300,210,340>
  inherited property Bounds = <0,0,480,272>;

  $rect <520,140,720,180>
  inherited method OnShortDownKeyActivated()
  {
    var int32 NextFocusIdx = FocusIdx + 1;
    if( NextFocusIdx >= FocusList.size )
      {
      NextFocusIdx = FocusList.size - 1;
      }

    if( FocusIdx != NextFocusIdx )
      {
      FocusIdx = NextFocusIdx;
      Focus = FocusList[NextFocusIdx];
      }
  }

  $rect <520,80,720,120>
  inherited method OnShortUpKeyActivated()
  {
    var int32 NextFocusIdx = FocusIdx - 1;
    if( NextFocusIdx < 0 )
      {
      NextFocusIdx = 0;
      }

    if( FocusIdx != NextFocusIdx )
      {
      FocusIdx = NextFocusIdx;
      Focus = FocusList[NextFocusIdx];
      }
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton ButtonNo
  {
    preset Bounds = <290,200,440,250>;
    preset IconFrameActive = -1;
    preset IconFrame = 0;
    preset Label = "No";
    preset Appearance = UIConfig::PushButtonConfig;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton ButtonYes
  {
    preset Bounds = <40,203,190,253>;
    preset OnRelease = OnUpdate;
    preset IconFrameActive = -1;
    preset IconFrame = 0;
    preset Label = "Yes";
    preset Appearance = UIConfig::PushButtonConfig;
  }

  $rect <20,20,160,60>
  object Views::Text Text
  {
    preset Bounds = <90,80,370,150>;
    preset String = "Update system?";
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <520,200,720,240>
  slot OnUpdate
  {
    PresentDialogWithSlideInEffect( new Settings::SET41_ResetInProgress );
  }

  $rect <520,20,720,60>
  var int32 FocusIdx = 1;

  $rect <740,20,940,60>
  array Core::View FocusList[ 2 ] =
  (
    Default[0] = ButtonYes;
    Default[1] = ButtonNo;
  );
}

$rect <820,160,1020,200>
$output false
class SoftwareUpdateError : Menu::BaseMenuView
{
  $rect <10,300,210,340>
  inherited property Bounds = <0,0,480,272>;

  $rect <20,20,160,60>
  object Views::Text Text
  {
    preset Bounds = <15,70,460,220>;
    preset WrapText = true;
    preset String = "System cannot execute software update.\nSoftware update cannot be executed\nwhile driving.";
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }
}

$rect <820,60,1020,100>
$output false
class SoftwareUpdateRetry : Menu::BaseMenuView
{
  $rect <20,300,220,340>
  inherited property Bounds = <0,0,480,272>;

  $rect <20,20,160,60>
  object Views::Text Message
  {
    preset Bounds = <7,50,464,194>;
    preset WrapText = true;
    preset String = "Failed\nConfirmed USB connection.Please make sure you've inserted USB and the update file is in the USB device.";
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton RetryButton
  {
    preset Bounds = <140,200,320,250>;
    preset OnRelease = OnRetry;
    preset Label = "Retry";
    preset Appearance = UIConfig::PushButtonConfig;
  }

  $rect <520,30,720,70>
  slot OnRetry
  {
    SlideOutDialog( this );
  }
}

$rect <600,430,810,470>
$output false
class SET38_ConfirmAllReset : Components::BaseMainBG
{
  $rect <10,300,210,340>
  inherited property Bounds = <0,0,480,272>;

  $rect <10,350,210,390>
  inherited property DDModeEnabled = true;

  $rect <20,20,160,60>
  object Views::Text Text
  {
    preset Bounds = <10,46,470,170>;
    preset String = Strings::SET38_RESET_TO_FACTORY;
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <220,350,430,390>
  slot OnOkActivatedSlot
  {
    if( 0 < DeviceInterface::BluetoothDevice.PairedDeviceNum )
    {
      Owner.SwitchToDialog( new Settings::SET39_DeletePairedDevice, null, null, null, null, null, null, null, null, null, false );
    }
    else
    {
      Owner.SwitchToDialog( new Settings::SET41_ResetInProgress, null, null, null, null, null, null, null, null, null, false );
    }
  }

  $rect <220,300,430,340>
  slot OnCancelActivatedSlot
  {
    OnShortHomeKeyActivated();
  }

  $rect <20,20,160,60>
  object Menu::UpDownPushButtonSet UpDownPushButtonSet
  {
    preset Bounds = <165,176,315,259>;
    preset PassHomeKey = true;
    preset PassMagicKey = true;
    preset DDModeEnabled = true;
    preset OnUpButtonActivated = OnCancelActivatedSlot;
    preset OnDownButtonActivated = OnOkActivatedSlot;
    preset UpButtonTitle = Strings::GEN_CANCEL;
    preset DownButtonTitle = Strings::GEN_OK;
    preset DownButtonEnabled = true;
  }
}

$rect <600,480,830,520>
$output false
class SET39_DeletePairedDevice : Components::BaseMainBG
{
  $rect <10,290,210,330>
  inherited method Init()
  {
    trace "Init SET39";
  }

  $rect <10,340,210,380>
  inherited property DDModeEnabled = true;

  $rect <230,290,430,330>
  slot OnOkSelectedSlot
  {
    Owner.SwitchToDialog( new Settings::SET41_ResetInProgress, null, null, null, null, null, null, null, null, null, false );
  }

  $rect <20,20,160,60>
  object Menu::PushButton PushButton
  {
    preset Bounds = <165,219,315,259>;
    preset DDModeEnabled = true;
    preset Title = Strings::GEN_OK;
    preset OnActivate = OnOkSelectedSlot;
  }

  $rect <20,20,160,60>
  object Views::Text Text
  {
    preset Bounds = <10,46,470,201>;
    preset WrapText = true;
    preset String = Strings::SET39_DELETE_PAIRING;
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }
}

$rect <600,530,810,570>
$output false
class SET41_ResetInProgress : Components::BaseMainBG
{
  $rect <10,300,190,340>
  inherited method Init()
  {
    trace "Init SET41";
    if( DeviceInterface::VehicleDevice.DDModeActivated )
    {
      var Settings::TimeoutDialog Dialog = new Settings::TimeoutDialog;
      Dialog.Message = Strings::SET40_CANNOT_EXECUTE;
      Dialog.DismissAfterTimeout = true;
      Owner.SwitchToDialog( Dialog, null, null, null, null, null, null, null, null, null, false );
    }
    else
    {
      DeviceInterface::SystemDevice.ResetToFactoryDefault();
    }
  }

  $rect <210,300,440,340>
  inherited method OnShortHomeKeyActivated()
  {
    // neglect home key event
  }

  $rect <210,350,440,390>
  inherited method OnLongHomeKeyActivated()
  {
    // neglect home key event
  }

  $rect <10,350,190,390>
  inherited property DDModeEnabled = true;

  $rect <20,20,160,60>
  object Views::Image LoadingAnimation
  {
    preset Bounds = <193,54,287,148>;
    preset Animated = true;
    preset Bitmap = Resource::LoadingAnimation;
  }

  $rect <20,20,160,60>
  object Views::Text LoadingText
  {
    preset Bounds = <10,156,470,187>;
    preset String = Strings::GEN_PLEASE_WAIT;
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <460,300,760,340>
  object Core::SystemEventHandler FactoryResetCompletedEventHandler
  {
    preset OnEvent = OnFactoryResetCompletedSlot;
    preset Event = DeviceInterface::SystemDevice.FactoryResetCompletedSystemEvent;
  }

  // This slot method is executed when the associated system event handler 'SystemEventHandler' \
  // receives an event.
  $rect <460,350,730,390>
  slot OnFactoryResetCompletedSlot
  {
    trace "OnFactoryResetCompleted";
    PresentDialog( new Settings::SET42_ResetCompleted, null, null, null, null, null, null, null, null, false );
  }
}

$rect <600,210,800,250>
$output false
class SET37_3rdPartyLicenses : Components::BaseMainBG
{
  $rect <240,310,440,350>
  inherited method Init()
  {
    $if !$prototyper
      var int32 i;
      var string CopyRightTitle;
      var string CopyRightContent;
      var int32 NumberOfLicenses;

      native( NumberOfLicenses )
      {
        NumberOfLicenses = ew_get_num_of_licenses();
      }

      for( i = 0; i < NumberOfLicenses; i++ )
      {
        native( i, CopyRightTitle, CopyRightContent )
        {
          uint8_t* copyright_title;
          uint8_t* copyright_content;
          ew_get_copyright( i, &copyright_title, &copyright_content );
          CopyRightTitle = EwNewStringUtf8( ( const unsigned char* )copyright_title, ( int )strlen( ( char* )copyright_title ) );
          CopyRightContent = EwNewStringUtf8( ( const unsigned char* )copyright_content, ( int )strlen( ( char* )copyright_content ) );
        }

        ThirdPartyLicenseText.LicenseText.String += ( CopyRightTitle + "\n" + CopyRightContent + "\n" );
        ThirdPartyLicenseText.LicenseText.String += "\n";
      }
      ThirdPartyLicenseText.UpdateLineNum();
      ThirdPartyLicenseText.LicenseInitBounds = ThirdPartyLicenseText.LicenseText.Bounds;
    $endif
  }

  $rect <520,140,720,180>
  inherited method OnShortDownKeyActivated()
  {
    Scrollbar.ViewIdx = ThirdPartyLicenseText.ScrollDownPage();
  }

  $rect <520,90,720,130>
  inherited method OnShortUpKeyActivated()
  {
    Scrollbar.ViewIdx = ThirdPartyLicenseText.ScrollUpPage();
  }

  $rect <520,210,720,250>
  inherited method OnShortEnterKeyActivated()
  {
    OnShortHomeKeyActivated();
  }

  $rect <10,300,210,340>
  inherited property DDModeEnabled = true;

  $rect <10,350,210,390>
  inherited var SlideOutEffectEnabled = true;

  $rect <20,20,160,60>
  object Menu::Scrollbar Scrollbar
  {
    preset Bounds = <453,44,461,254>;
    preset ViewIdx = 0;
    preset PageItems = Settings::DETAIL_TOTAL_LINE_NUM;
    preset ListItems = 1;
  }

  $rect <20,20,160,60>
  object Settings::LicenseDetail ThirdPartyLicenseText
  {
    preset Bounds = <33,47,421,258>;
    preset OnLineNumUpdated = OnLineNumUpdatedSlot;
  }

  $rect <520,270,730,310>
  slot OnLineNumUpdatedSlot
  {
    Scrollbar.ListItems = ThirdPartyLicenseText.NoOfLines;
  }
}

$rect <20,210,260,250>
$output false
class SET06_BtcDiscovarable : Components::BaseMainBG
{
  $rect <0,290,180,330>
  inherited method Init()
  {
    trace "init SET06";
    DeviceInterface::BluetoothDevice.Discoverable = true;
    NameText.String += DeviceInterface::BluetoothDevice.LocalDeviceName;
    CountDownTimer.Enabled = true;
  }

  $rect <200,340,430,380>
  inherited method OnShortHomeKeyActivated()
  {
    DeviceInterface::BluetoothDevice.Discoverable = false;
    super();
  }

  $rect <200,390,430,430>
  inherited method OnLongHomeKeyActivated()
  {
    DeviceInterface::BluetoothDevice.Discoverable = false;
    super();
  }

  $rect <0,340,180,380>
  inherited property DDModeEnabled = true;

  $rect <20,20,160,60>
  object Views::Text DiscoverableText
  {
    preset Bounds = <10,46,470,108>;
    preset WrapText = true;
    preset Alignment = Views::TextAlignment[AlignHorzCenter, AlignVertTop];
    preset String = Strings::SET06_DISCOVERABLE;
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <200,290,400,330>
  slot OnCancelSlot
  {
    CountDownTimer.Enabled = false;
    DeviceInterface::BluetoothDevice.Discoverable = false;
    Owner.DismissDialog( this, null, null, null, null, null, false );
  }

  $rect <20,20,160,60>
  object Views::Text TimeLeftText
  {
    preset Bounds = <10,170,470,201>;
    preset WrapText = true;
    preset Alignment = Views::TextAlignment[AlignHorzCenter, AlignVertCenter];
    preset String = Strings::SET06_TIME_LEFT + "3:00";
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <20,20,160,60>
  object Views::Text NameText
  {
    preset Bounds = <10,108,470,170>;
    preset Ellipsis = true;
    preset WrapText = true;
    preset Alignment = Views::TextAlignment[AlignHorzCenter, AlignVertTop];
    preset String = "Name:";
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <500,50,720,90>
  object Core::Timer CountDownTimer
  {
    preset OnTrigger = UpdateCountDownTimeSlot;
    preset Period = 1000;
    preset Enabled = false;
  }

  $rect <500,100,740,140>
  slot UpdateCountDownTimeSlot
  {
    if( CountDownTimeSec > 0)
    {
      CountDownTimeSec = CountDownTimeSec - 1;
      var int32 Second = CountDownTimeSec % 60;
      var string SecondStr;
      if( Second < 10 )
      {
        SecondStr = "0" + string( Second );
      }
      else
      {
        SecondStr = string( Second );
      }
      TimeLeftText.String = Strings::SET06_TIME_LEFT + string( CountDownTimeSec / 60 ) + ":" + SecondStr;
    }
    else
    {
      var Settings::TimeoutDialog PairingFailDialog = new Settings::TimeoutDialog;
      PairingFailDialog.Message = Strings::SET07_PAIRING_FAILED;
      PairingFailDialog.DismissAfterTimeout = true;
      Owner.SwitchToDialog( PairingFailDialog, null, null, null, null, null, null, null, null, null, false );
    }
  }

  $rect <500,0,720,40>
  var int32 CountDownTimeSec = 180;

  $rect <20,20,160,60>
  object Menu::PushButton PushButton
  {
    preset Bounds = <165,219,315,259>;
    preset DDModeEnabled = true;
    preset Title = Strings::GEN_CANCEL;
    preset OnActivate = OnCancelSlot;
  }

  $rect <500,150,790,190>
  object Core::SystemEventHandler BtcPairingStateChangeEventHandler
  {
    preset OnEvent = OnBtcPairingStateChangeSlot;
    preset Event = DeviceInterface::BluetoothDevice.BtcPairingChangedSystemEvent;
  }

  // This slot method is executed when the associated system event handler 'SystemEventHandler' \
  // receives an event.
  $rect <500,200,760,240>
  slot OnBtcPairingStateChangeSlot
  {
    if( null != Owner )
    {
      switch( DeviceInterface::BluetoothDevice.BtcPairingState )
      {
        case Enum::BtcPairingState.FAIL:
        {
          var Settings::TimeoutDialog PairingFailDialog = new Settings::TimeoutDialog;
          PairingFailDialog.Message = Strings::SET07_PAIRING_FAILED;
          PairingFailDialog.DismissAfterTimeout = true;
          DeviceInterface::BluetoothDevice.Discoverable = false;
          Owner.SwitchToDialog( PairingFailDialog, null, null, null, null, null, null, null, null, null, false );
        }
        case Enum::BtcPairingState.PASSKEY_GENERATED:
        {
          DeviceInterface::BluetoothDevice.Discoverable = false;
          Owner.SwitchToDialog( new Settings::SET08_BtcPairDevice, null, null, null, null, null, null, null, null, null, false );
        }
        default:;
      }
    }
  }
}

$rect <20,460,260,500>
$output false
class SET9_10_11_BtConnectionResult : Components::BaseMainBG
{
  $rect <0,290,200,330>
  inherited property DDModeEnabled = true;

  $rect <20,20,160,60>
  object Views::Text Message
  {
    preset Bounds = <10,50,470,236>;
    preset Ellipsis = true;
    preset WrapText = true;
    preset Alignment = Views::TextAlignment[AlignHorzCenter, AlignVertTop];
    preset String = "";
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <0,340,200,380>
  property string DeviceName;

  $rect <210,290,490,330>
  object Core::SystemEventHandler ConnectPairedDeviceResultHandler
  {
    preset OnEvent = OnConnectPairedDeviceResultSlot;
    preset Event = DeviceInterface::BluetoothDevice.BtcConnectionResultSystemEvent;
  }

  // This slot method is executed when the associated system event handler 'SystemEventHandler' \
  // receives an event.
  $rect <210,340,490,380>
  slot OnConnectPairedDeviceResultSlot
  {
    var Enum::BtDeviceConnectionResult ConnectionResult = DeviceInterface::BluetoothDevice.ConnectPairedDeviceResult;
    switch( ConnectionResult )
    {
      case Enum::BtDeviceConnectionResult.SUCCESS:
      {
        // replase %s with the connected BLE deivce name
        var string ProcessString = Strings::SET09_BT_CONNECTED;
        var int32 LeftIdx = ProcessString.find( Strings::ARGUMENT_STR, 0 );
        var int32 RightIdx = ProcessString.length - LeftIdx - Strings::ARGUMENT_STR.length;
        HideLoadingUI();
        Message.String = ProcessString.left( LeftIdx ) + DeviceName + ProcessString.right( RightIdx );
      }
      case Enum::BtDeviceConnectionResult.FAIL:
      {
        // replase %s with the connected BLE deivce name
        var string ProcessString = Strings::SET10_CONNECTION_FAILED;
        var int32 LeftIdx = ProcessString.find( Strings::ARGUMENT_STR, 0 );
        var int32 RightIdx = ProcessString.length - LeftIdx - Strings::ARGUMENT_STR.length;
        HideLoadingUI();
        Message.String = ProcessString.left( LeftIdx ) + DeviceName + ProcessString.right( RightIdx );
      }
      case Enum::BtDeviceConnectionResult.AUTHENTICATION_ERR:
      {
        // replase %s with the connected BLE deivce name
        var string ProcessString = Strings::SET11_NO_LONGER_PAIRED;
        var int32 LeftIdx = ProcessString.find( Strings::ARGUMENT_STR, 0 );
        var int32 RightIdx = ProcessString.length - LeftIdx - Strings::ARGUMENT_STR.length;
        HideLoadingUI();
        Message.String = ProcessString.left( LeftIdx ) + DeviceName + ProcessString.right( RightIdx );
      }
      default: Message.String = "";
    }
    DismissTimer.Enabled = true;
  }

  $rect <510,290,710,330>
  object Core::Timer DismissTimer
  {
    preset OnTrigger = OnDismissSlot;
    preset Period = 0;
    preset Begin = 2000;
  }

  $rect <510,340,710,380>
  slot OnDismissSlot
  {
    Owner.DismissDialog( this, null, null, null, null, null, false );
    DeviceInterface::BluetoothDevice.RefreshPairedDeviceList = true;
  }

  $rect <20,20,160,60>
  object Views::Image Divider
  {
    preset Bounds = <0,36,480,38>;
    preset Alignment = Views::ImageAlignment[AlignVertBottom, ScaleToFit];
    preset Bitmap = Resource::StatusBarDivider;
  }

  $rect <20,20,160,60>
  object Views::Image LoadingAnimation
  {
    preset Bounds = <193,54,287,148>;
    preset Animated = true;
    preset Bitmap = Resource::LoadingAnimation;
  }

  $rect <20,20,160,60>
  object Views::Text LoadingText
  {
    preset Bounds = <10,156,470,187>;
    preset String = Strings::GEN_PLEASE_WAIT;
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <210,390,410,430>
  method void HideLoadingUI()
  {
    LoadingText.Visible = false;
    LoadingAnimation.Visible = false;
  }

  $reorder UpdateDDModeMask 1
  $reorder DismissThisDialog 1
  $reorder SlideInDialog 1
  $reorder HideFocusFrameTimer 1
  $reorder OnHideFocusFrameTimeoutSlot 1
  $reorder ChildDialog 1
  $reorder OnDialogSlideInCompletedSlot 1
  $reorder PresentDialogWithSlideInEffect 1
  $reorder SlideOutEffectEnabled 1
  $reorder OnDialogSlideOutCompletedSlot 1
  $reorder OwnerDialog 1
  $reorder SlideOutDialog 1
  $reorder DismissMenuWithSlideOutEffect 1
  $reorder SlideDirection 1
  $reorder Message 1
  $reorder DeviceName 1
  $reorder ConnectPairedDeviceResultHandler 1
  $reorder OnConnectPairedDeviceResultSlot 1
  $reorder DismissTimer 1
  $reorder OnDismissSlot 1
  $reorder Divider 1
}

$rect <20,160,260,200>
$output false
class SET05_BtcMaxPairedDevice : Components::BaseMainBG
{
  $rect <0,290,170,330>
  inherited method Init()
  {
    trace "Init SET05";
  }

  $rect <0,330,170,370>
  inherited property DDModeEnabled = true;

  $rect <20,20,160,60>
  object Views::Text Text
  {
    preset Bounds = <10,45,470,169>;
    preset WrapText = true;
    preset Alignment = Views::TextAlignment[AlignHorzCenter, AlignVertCenter];
    preset String = Strings::SET05_MAX_DEVICES;
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <20,20,160,60>
  object Menu::UpDownPushButtonSet UpDownPushButtonSet
  {
    preset Bounds = <165,176,315,259>;
    preset PassHomeKey = true;
    preset OnUpButtonActivated = OnYesActivatedSlot;
    preset OnDownButtonActivated = OnNoActivatedSlot;
    preset UpButtonTitle = "Yes";
    preset DownButtonTitle = "No";
  }

  $rect <210,290,410,330>
  slot OnYesActivatedSlot
  {
    if( null != Owner )
    {
      Owner.SwitchToDialog( new Settings::SET17_BtcPairedDeviceList, null, null, null, null, null, null, null, null, null, false );
    }
  }

  $rect <210,330,410,370>
  slot OnNoActivatedSlot
  {
    if( null != Owner )
    {
      Owner.DismissDialog( this, null, null, null, null, null, false );
    }
  }
}

$rect <20,260,260,300>
$output false
class SET08_BtcPairDevice : Components::BaseMainBG
{
  $rect <0,290,180,330>
  inherited method Init()
  {
    trace "Init SET08";
    var string ProcessString = Strings::SET08_PAIR_WITH;
    var int32 LeftIdx = ProcessString.find( Strings::ARGUMENT_STR, 0 );
    var int32 RightIdx = ProcessString.length - LeftIdx - Strings::ARGUMENT_STR.length;
    PairText.String = ProcessString.left( LeftIdx ) + DeviceInterface::BluetoothDevice.GetBtcPairingDeviceName() + ProcessString.right( RightIdx );

    PasskeyText.String = Strings::SET08_PASSKEY + "\n" + string( DeviceInterface::BluetoothDevice.GetBtcPasskey(), Settings::BT_PASSKEY_LEN );
  }

  $rect <0,340,170,380>
  inherited property DDModeEnabled = true;

  $rect <190,340,390,380>
  slot OnNoActivatedSlot
  {
    trace "SET08 no";
    $if !$prototyper
      native
      {
        BTM_btc_confirm_passkey( false );
      }
    $endif

    // back to SET03
    var Settings::SET04_BtSettingMenu BtSettingMenu = ( Settings::SET04_BtSettingMenu )Owner;
    if( null != BtSettingMenu )
    {
      BtSettingMenu.SlideOutEffectEnabled = false;
      BtSettingMenu.DismissThisDialog();
    }
  }

  $rect <20,20,160,60>
  object Views::Text PairText
  {
    preset Bounds = <10,45,470,107>;
    preset WrapText = true;
    preset Alignment = Views::TextAlignment[AlignHorzCenter, AlignVertTop];
    preset String = Strings::SET08_PAIR_WITH;
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <20,20,160,60>
  object Views::Text PasskeyText
  {
    preset Bounds = <10,107,470,169>;
    preset WrapText = true;
    preset Alignment = Views::TextAlignment[AlignHorzCenter, AlignVertCenter];
    preset String = Strings::SET08_PASSKEY;
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <20,20,160,60>
  object Menu::UpDownPushButtonSet UpDownPushButtonSet
  {
    preset Bounds = <165,176,315,259>;
    preset PassHomeKey = true;
    preset OnUpButtonActivated = OnYesActivatedSlot;
    preset OnDownButtonActivated = OnNoActivatedSlot;
    preset UpButtonTitle = Strings::GEN_YES;
    preset DownButtonTitle = Strings::GEN_NO;
  }

  $rect <190,290,390,330>
  slot OnYesActivatedSlot
  {
    trace "SET08 yes";
    $if !$prototyper
      native
      {
        BTM_btc_confirm_passkey( true );
      }
    $endif
  }

  $rect <400,290,690,330>
  object Core::SystemEventHandler BtcPairingStateChangeEventHandler
  {
    preset OnEvent = OnBtcPairingStateChangeSlot;
    preset Event = DeviceInterface::BluetoothDevice.BtcPairingChangedSystemEvent;
  }

  // This slot method is executed when the associated system event handler 'SystemEventHandler' \
  // receives an event.
  $rect <400,340,660,380>
  slot OnBtcPairingStateChangeSlot
  {
    if( null != Owner )
    {
      switch( DeviceInterface::BluetoothDevice.BtcPairingState )
      {
        case Enum::BtcPairingState.FAIL:
        {
          var Settings::TimeoutDialog PairingFailDialog = new Settings::TimeoutDialog;
          PairingFailDialog.Message = Strings::SET07_PAIRING_FAILED;
          PairingFailDialog.DismissAfterTimeout = true;
          Owner.SwitchToDialog( PairingFailDialog, null, null, null, null, null, null, null, null, null, false );
        }
        case Enum::BtcPairingState.SUCCESSFUL:
        {
          Owner.SwitchToDialog( new Settings::SET17_BtcPairedDeviceList, null, null, null, null, null, null, null, null, null, false );
          DeviceInterface::BluetoothDevice.RefreshPairedDeviceList = true;
        }
        default:;
      }
    }
  }
}

$rect <20,310,260,350>
$output false
class SET17_BtcPairedDeviceList : Menu::BaseMenuView
{
  $rect <0,290,180,330>
  inherited method Init()
  {
    trace "Init SET17";
    UpdatePairedDeviceNum();
  }

  $rect <0,340,200,380>
  inherited property DDModeEnabled = true;

  $rect <0,390,200,430>
  inherited var SlideOutEffectEnabled = true;

  $rect <520,20,720,60>
  inherited method LoadItemClass()
  {
    aItemNo; //to suppress warning
    return Menu::ItemCheckMark;
  }

  $rect <520,70,720,110>
  inherited method LoadItemTitle()
  {
    // suppress warning
    if( aItemNo > 0 )
    {
      // empty body
    }

    var string Title;
    if( PairedDeviceNum > 0 )
    {
      DeviceInterface::BluetoothDevice.GetPairedDeviceAtItem( aItemNo );
      Title = DeviceInterface::BluetoothDevice.PairedDeviceObj.DeviceName;
    }

    return Title;
  }

  $rect <520,170,720,210>
  inherited method OnItemActivate()
  {
    // suppress warning
    if( aItemNo >= 0 )
    {
      // empty body
    }

    var Menu::ItemCheckMark BtDeviceItem = ( Menu::ItemCheckMark )aMenuItem;
    if( null != BtDeviceItem )
    {
      var Settings::SET19_BtcPairedDeviceOperation Dialog = new Settings::SET19_BtcPairedDeviceOperation;
      Dialog.PairedDeviceIndex = aItemNo;
      Dialog.DeviceName = BtDeviceItem.Title.String;
      Dialog.IsConnected = BtDeviceItem.Checked;
      SlideInDialog( Dialog );
    }
  }

  $rect <517,118,717,158>
  inherited method LoadItemChecked()
  {
    // suppress warning
    if( aItemNo > 0 )
    {
      // empty body
    }

    var bool result = false;
    if( PairedDeviceNum > 0 )
    {
      result = DeviceInterface::BluetoothDevice.PairedDeviceObj.IsConnected;
    }
    return result;
  }

  $rect <20,20,160,60>
  inherited object Menu
  {
    preset DDModeEnabled = true;
    preset NoOfItems = 0;
    preset ItemHeight = Menu::ItemHeightSmall;
    preset ItemNumPerPage = 4;
    preset ArrowScrollBarVisible = true;
  }

  $rect <220,290,440,330>
  var int32 PairedDeviceNum = 0;

  $rect <220,340,440,380>
  method void UpdatePairedDeviceNum()
  {
    PairedDeviceNum = DeviceInterface::BluetoothDevice.PairedDeviceNum;
    Menu.NoOfItems = PairedDeviceNum;

    trace "SET17 ", PairedDeviceNum;

    if( PairedDeviceNum > 0 )
    {
      NoDataTimeoutTimer.Enabled = false;
      Menu.Focusable = true;
      Menu.InvalidateItems( 0, PairedDeviceNum - 1 );
      NoDataText.Visible = false;
    }
    else
    {
      NoDataTimeoutTimer.Enabled = true;
      Menu.Focusable = false;
      Menu.InvalidateItems( 0, 0 );
      NoDataText.Visible = true;
    }
  }

  $rect <460,290,660,330>
  object Core::PropertyObserver RefreshListObserver
  {
    preset OnEvent = OnRefreshListSlot;
    preset Outlet = ^DeviceInterface::BluetoothDevice.RefreshPairedDeviceList;
  }

  // This slot method is executed when the associated property observer 'PropertyObserver' \
  // is notified.
  $rect <460,340,660,380>
  slot OnRefreshListSlot
  {
    trace "OnRefreshListSlot";
    UpdatePairedDeviceNum();
  }

  $rect <20,20,160,60>
  object Views::Text NoDataText
  {
    preset Bounds = <10,50,470,236>;
    preset String = "No data";
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <680,290,880,330>
  object Core::Timer NoDataTimeoutTimer
  {
    preset OnTrigger = OnNoDataTimeoutSlot;
    preset Begin = 2000;
  }

  $rect <683,339,883,379>
  slot OnNoDataTimeoutSlot
  {
    if( null != Owner )
    {
      SlideOutDialog();
    }
  }

  $reorder PairedDeviceNum 1
  $reorder UpdatePairedDeviceNum 1
  $reorder RefreshListObserver 1
  $reorder OnRefreshListSlot 1
  $reorder NoDataText 1
  $reorder NoDataTimeoutTimer 1
  $reorder OnNoDataTimeoutSlot 1
}

$rect <20,410,260,450>
$output false
class SET19_BtcPairedDeviceOperation : Menu::BaseMenuView
{
  $rect <10,300,190,340>
  inherited method Init()
  {
    trace "Init SET19";
  }

  $rect <230,350,430,390>
  inherited property DDModeEnabled = true;

  $rect <230,300,430,340>
  inherited var SlideOutEffectEnabled = true;

  $rect <510,20,710,60>
  inherited method LoadItemClass()
  {
    // to suppress warning
    if( aItemNo >= 0 )
    {
      // empty body
    }
    return Menu::ItemBase;

  }

  $rect <510,70,710,110>
  inherited method LoadItemTitle()
  {
    var string title = "";

    switch( aItemNo )
    {
      case 0: title = Strings::SET19_DELETE_PAIRING;
      case 1: title = Strings::SET19_CONNECT;
      case 2: title = Strings::SET19_DISCONNECT;
      default:;
    }

    return title;
  }

  $rect <510,170,710,210>
  inherited method OnItemActivate()
  {
    switch( aItemNo )
    {
      case 0:
      {
        DeviceInterface::BluetoothDevice.UnpairDevice( PairedDeviceIndex );
        if( DeviceInterface::BluetoothDevice.IsBlePairedDevice( PairedDeviceIndex ) )
        {
          var Settings::SET18_DeleteBleDevice Dialog = new Settings::SET18_DeleteBleDevice;
          Dialog.DeviceName = DeviceName;
          var Menu::BaseMenuView OwnerMenu = ( Menu::BaseMenuView )Owner;
          if( null != OwnerMenu )
          {
            OwnerMenu.Menu.FocusFrame.Visible = true;
          }
          Owner.SwitchToDialog( Dialog, null, null, null, null, null, null, null, null, null, false );
        }
        else
        {
          DeviceInterface::BluetoothDevice.RefreshPairedDeviceList = true;
          SlideOutDialog();
        }
      }
      case 1:
      {
        var Settings::SET9_10_11_BtConnectionResult Dialog = new Settings::SET9_10_11_BtConnectionResult;
        Dialog.DeviceName = DeviceName;
        var Menu::BaseMenuView OwnerMenu = ( Menu::BaseMenuView )Owner;
        if( null != OwnerMenu )
        {
          OwnerMenu.Menu.FocusFrame.Visible = true;
        }
        Owner.SwitchToDialog( Dialog, null, null, null, null, null, null, null, null, null, false );
        DeviceInterface::BluetoothDevice.ConnectPairedDevice( PairedDeviceIndex );
      }
      case 2:
      {
        DeviceInterface::BluetoothDevice.DisconnectPairedDevice( PairedDeviceIndex );
        SlideOutDialog();
        DeviceInterface::BluetoothDevice.RefreshPairedDeviceList = true;
      }
      default: trace "", aMenuItem; // suppress warning;
    }
  }

  $rect <510,120,710,160>
  inherited method LoadItemEnabled()
  {
    var bool OptionEnabled = false;

    switch( aItemNo )
    {
      case 0: OptionEnabled = true;
      case 1: OptionEnabled = !IsConnected;
      case 2: OptionEnabled = IsConnected;
      default:;
    }

    return OptionEnabled;
  }

  $rect <20,20,160,60>
  inherited object Menu
  {
    preset DDModeEnabled = true;
    preset NoOfItems = 3;
  }

  $rect <10,350,210,390>
  property int32 PairedDeviceIndex;

  $rect <10,400,210,440>
  property string DeviceName;

  $rect <10,450,210,490>
  property bool IsConnected = false;
}

$rect <20,360,260,400>
$output false
class SET18_DeleteBleDevice : Components::BaseMainBG
{
  $rect <10,290,190,330>
  inherited method Init()
  {
    trace "Init SET18";

    var string ProcessString = Strings::SET18_DELETE_PAIRING_RECORD;
    var int32 LeftIdx = ProcessString.find( Strings::ARGUMENT_STR, 0 );
    var int32 RightIdx = ProcessString.length - LeftIdx - Strings::ARGUMENT_STR.length;
    Text.String = ProcessString.left( LeftIdx ) + DeviceName + ProcessString.right( RightIdx );
  }

  $rect <10,340,190,380>
  inherited property DDModeEnabled = true;

  $rect <20,20,160,60>
  object Views::Text Text
  {
    preset Bounds = <10,50,470,236>;
    preset WrapText = true;
    preset Alignment = Views::TextAlignment[AlignHorzCenter, AlignVertCenter];
    preset String = Strings::SET18_DELETE_PAIRING_RECORD;
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <210,290,410,330>
  property string DeviceName;
}

$rect <310,310,510,350>
$output false
class BtFwUpdateDialog : Core::Group
{
  $rect <10,300,230,340>
  inherited property Bounds = <0,0,480,272>;

  $rect <20,20,160,60>
  object Views::Rectangle Rectangle
  {
    preset Bounds = <0,0,480,272>;
    preset Color = #000000FF;
  }

  $rect <20,20,160,60>
  object Views::Text StatusText
  {
    preset Bounds = <80,60,380,210>;
    preset WrapText = true;
    preset String = "Updating BT firmware, please wait...";
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
    preset Color = #FFFFFFFF;
  }

  $rect <10,350,240,390>
  object Core::PropertyObserver BtFwStatusObserver
  {
    preset OnEvent = OnBtFwStatusUpdateSlot;
    preset Outlet = ^DeviceInterface::BluetoothDevice.BtFwStatus;
  }

  // This slot method is executed when the associated property observer 'PropertyObserver' \
  // is notified.
  $rect <10,400,240,440>
  slot OnBtFwStatusUpdateSlot
  {
    switch( DeviceInterface::BluetoothDevice.BtFwStatus )
    {
      case Enum::BtFwStatus.UPDATE_FINISH:
      {
        StatusText.String = "Update BT firmware complete";
        RemoveDialogTimer.Enabled = true;
      }
      case Enum::BtFwStatus.UPDATE_ABORT:
      {
        StatusText.String = "Update BT firmware fail";
        RemoveDialogTimer.Enabled = true;
      }
      default:;
    }
  }

  $rect <260,300,460,340>
  object Core::Timer RemoveDialogTimer
  {
    preset OnTrigger = OnRemoveDialogSlot;
    preset Period = 2000;
  }

  $rect <260,352,460,392>
  slot OnRemoveDialogSlot
  {
    GetRoot().EndModal( this );
    GetRoot().Remove( this );
  }
}

$rect <310,10,550,50>
$output false
class TimeoutDialog : Components::BaseMainBG
{
  $rect <20,290,200,330>
  inherited property DDModeEnabled = true;

  $rect <20,20,160,60>
  object Views::Text MessageText
  {
    preset Bounds = <10,50,470,236>;
    preset Ellipsis = true;
    preset WrapText = true;
    preset String = "";
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <230,290,430,330>
  property string Message;

  $rect <230,330,430,370>
  onset Message
  {
    if( pure Message != value )
    {
      pure Message = value;
      MessageText.String = value;
    }
  }

  $rect <460,290,660,330>
  object Core::Timer TimeoutTimer
  {
    preset OnTrigger = OnTimeoutSlot;
    preset Period = 0;
    preset Begin = 2000;
    preset Enabled = true;
  }

  $rect <460,330,660,370>
  slot OnTimeoutSlot
  {
    if( DismissAfterTimeout )
    {
      if( null != Owner )
      {
        Owner.DismissDialog( this, null, null, null, null, null, false );
      }
    }
    else
    {
      postsignal OnTimeout;
    }
  }

  $rect <460,370,660,410>
  property slot OnTimeout;

  $rect <230,380,430,420>
  property bool DismissAfterTimeout = false;
}

$rect <600,110,800,150>
$output false
class SET30_QRCode : Components::BaseMainBG
{
  $rect <550,20,750,60>
  inherited method Init()
  {
    DeviceInterface::SystemDevice.GetQrCode( PixelPerModule );
  }

  $rect <10,290,210,330>
  inherited property Bounds = <0,0,480,272>;

  $rect <550,180,750,220>
  inherited method OnShortDownKeyActivated()
  {
    if( PixelPerModule > 1 )
    {
      PixelPerModule--;
      DeviceInterface::SystemDevice.GetQrCode( PixelPerModule );
    }
    else
    {
      trace "please press up";
    }
  }

  $rect <550,130,750,170>
  inherited method OnShortUpKeyActivated()
  {
    if( PixelPerModule < 4 )
    {
      PixelPerModule++;
      DeviceInterface::SystemDevice.GetQrCode( PixelPerModule );
    }
    else
    {
      trace "please press down";
    }
  }

  $rect <10,340,210,380>
  inherited property DDModeEnabled = true;

  $rect <550,70,750,110>
  object Core::SystemEventHandler QrCodeUpdateEventHandler
  {
    preset OnEvent = OnQrCodeUpdateSlot;
    preset Event = DeviceInterface::SystemDevice.QrCodeSystemEvent;
  }

  // This slot method is executed when the associated system event handler 'SystemEventHandler' \
  // receives an event.
  $rect <750,70,950,110>
  slot OnQrCodeUpdateSlot
  {
    Resource::QrCodeExternBitmap.Name = "QRCode" + string( PixelPerModule );
    PixelText.String = string( PixelPerModule ) + " Pixel";
    var float QrCodeWidth = 33 * PixelPerModule * 0.01935;
    QrCodeWidthText.String = "Width: " + string( QrCodeWidth ) + " cm";
    QrCodeContent.String = "QR Code content:\n" + DeviceInterface::SystemDevice.QrCodeText;
  }

  $rect <20,20,160,60>
  object Views::Image QrCode
  {
    preset Bounds = <20,98,207,227>;
    preset Alignment = Views::ImageAlignment[AlignHorzCenter, AlignVertCenter];
    preset Bitmap = Resource::QrCodeExternBitmap;
  }

  $rect <550,240,750,280>
  var int32 PixelPerModule = 1;

  $rect <20,20,160,60>
  object Views::Text PixelText
  {
    preset Bounds = <210,48,398,98>;
    preset Alignment = Views::TextAlignment[AlignHorzLeft, AlignVertCenter];
    preset String = "";
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <20,20,160,60>
  object Views::Text QrCodeWidthText
  {
    preset Bounds = <210,192,442,240>;
    preset Alignment = Views::TextAlignment[AlignHorzLeft, AlignVertCenter];
    preset String = "";
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <20,20,160,60>
  object Views::Text QrCodeContent
  {
    preset Bounds = <210,98,463,192>;
    preset WrapText = true;
    preset Alignment = Views::TextAlignment[AlignHorzLeft, AlignVertCenter];
    preset String = "";
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }
}

$rect <310,60,550,100>
$output false
class SET22_BleAdvertising : Components::BaseMainBG
{
  $rect <0,280,180,320>
  inherited method Init()
  {
    trace "Init SET22";
    DeviceInterface::BluetoothDevice.SetBleAdvertisement( true );
  }

  $rect <0,380,230,420>
  inherited method OnShortHomeKeyActivated()
  {
    DeviceInterface::BluetoothDevice.SetBleAdvertisement( false );
    super();
  }

  $rect <0,430,230,470>
  inherited method OnLongHomeKeyActivated()
  {
    DeviceInterface::BluetoothDevice.SetBleAdvertisement( false );
    super();
  }

  $rect <0,330,180,370>
  inherited property DDModeEnabled = true;

  $rect <20,20,160,60>
  object Views::Text DeviceNameText
  {
    preset Bounds = <10,132,470,163>;
    preset String = Strings::SET22_DEVICE_NAME;
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <20,20,160,60>
  object Views::Text WaitText
  {
    preset Bounds = <10,194,470,256>;
    preset WrapText = true;
    preset String = Strings::SET22_WAIT_APP_CONNECTION;
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <20,20,160,60>
  object Views::Text LocalDeviceNameText
  {
    preset Bounds = <10,163,470,194>;
    preset Ellipsis = true;
    preset String = DeviceInterface::BluetoothDevice.LocalDeviceName;
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <20,20,160,60>
  object Views::Image Image
  {
    preset Bounds = <193,36,287,130>;
    preset Animated = true;
    preset Bitmap = Resource::LoadingAnimation;
  }

  $rect <250,280,510,320>
  object Core::SystemEventHandler BlePairingStateChangedEventHandler
  {
    preset OnEvent = OnBlePairingStateChangedSlot;
    preset Event = DeviceInterface::BluetoothDevice.BlePairingStateChangedEvent;
  }

  // This slot method is executed when the associated system event handler 'SystemEventHandler' \
  // receives an event.
  $rect <250,330,510,370>
  slot OnBlePairingStateChangedSlot
  {
    if( null != Owner )
    {
      switch( DeviceInterface::BluetoothDevice.BlePairingState )
      {
        case Enum::BlePairingState.TIMEOUT,
             Enum::BlePairingState.FAIL:
        {
          DeviceInterface::BluetoothDevice.SetBleAdvertisement( false );
          Owner.SwitchToDialog( new Settings::SET23_BlePairingFail, null, null, null, null, null, null, null, null, null, false );
        }
        case Enum::BlePairingState.SUCCESSFUL:
        {
          var Settings::TimeoutDialog MessageDialog = new Settings::TimeoutDialog;
          var Settings::SET03_ConnectionSettingMenu ConnectionSettingDialog = ( Settings::SET03_ConnectionSettingMenu )Owner;
          if( null != ConnectionSettingDialog )
          {
            MessageDialog.Message = Strings::SET26_PAIRING_SUCCESSFUL;
            MessageDialog.DismissAfterTimeout = true;
            DeviceInterface::BluetoothDevice.SetBleAdvertisement( false );
            ConnectionSettingDialog.SwitchToDialog( MessageDialog, null, null, null, null, null, null, null, null, null, false );
          }
        }
        case Enum::BlePairingState.PINCODE_GENERATED:
        {
          DeviceInterface::BluetoothDevice.SetBleAdvertisement( false );
          Owner.SwitchToDialog( new Settings::SET25_BlePincode, null, null, null, null, null, null, null, null, null, false );
        }
        default:;
      }
    }
  }
}

$rect <310,110,550,150>
$output false
class SET23_BlePairingFail : Settings::TimeoutDialog
{
  $rect <20,20,160,60>
  inherited object MessageText
  {
    preset String = Strings::SET23_PAIRING_FAILED;
  }

  $rect <10,290,210,330>
  inherited slot OnTimeoutSlot
  {
    if( DeviceInterface::BluetoothDevice.GetBlePairingFailCount() > 1 )
    {
      Owner.SwitchToDialog( new Settings::SET24_CheckPairingRecord, null, null, null, null, null, null, null, null, null, false );
    }
    else
    {
      Owner.DismissDialog( this, null, null, null, null, null, false );
    }
  }

  $reorder Message 1
  $reorder OnSetMessage 1
  $reorder OnTimeout 3
}

$rect <310,160,550,200>
$output false
class SET24_CheckPairingRecord : Components::BaseMainBG
{
  $rect <0,290,180,330>
  inherited method Init()
  {
    trace "Init SET24";
  }

  $rect <0,340,200,380>
  inherited property DDModeEnabled = true;

  $rect <20,20,160,60>
  object Views::Text MessageText
  {
    preset Bounds = <10,46,470,201>;
    preset WrapText = true;
    preset String = Strings::SET24_CHECK_BT_PAIRING_RECORD;
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <20,20,160,60>
  object Menu::PushButton PushButton
  {
    preset Bounds = <165,219,315,259>;
    preset Title = Strings::GEN_OK;
    preset OnActivate = OnOkActivatedSlot;
  }

  $rect <210,290,410,330>
  slot OnOkActivatedSlot
  {
    Owner.DismissDialog( this, null, null, null, null, null, false );
  }
}

$rect <310,210,550,250>
$output false
class SET25_BlePincode : Components::BaseMainBG
{
  $rect <0,290,180,330>
  inherited method Init()
  {
    var string PincodeString = string( DeviceInterface::BluetoothDevice.BlePincode, Settings::BT_PASSKEY_LEN );
    PincodeText.String = Strings::SET25_PIN + "\n" + PincodeString;
    trace "Init SET25 ", PincodeString;
  }

  $rect <0,340,180,380>
  inherited method UpdateViewState()
  {
    super( aState );

    // check if BLE pairing state changed
    if( aState.contains( Core::ViewState[ Dialog ] ) && null != Owner )
    {
      postsignal OnBlePairingStateChangedSlot;
    }
  }

  $rect <0,440,230,480>
  inherited method OnShortHomeKeyActivated()
  {
    DeviceInterface::BluetoothDevice.SetBleAdvertisement( false );
    super();
  }

  $rect <0,390,180,430>
  inherited property DDModeEnabled = true;

  $rect <240,290,500,330>
  object Core::SystemEventHandler BleStateChangedEventHandler
  {
    preset OnEvent = OnBlePairingStateChangedSlot;
    preset Event = DeviceInterface::BluetoothDevice.BlePairingStateChangedEvent;
  }

  // This slot method is executed when the associated system event handler 'SystemEventHandler' \
  // receives an event.
  $rect <240,340,500,380>
  slot OnBlePairingStateChangedSlot
  {
    if( null != Owner )
    {
      switch( DeviceInterface::BluetoothDevice.BlePairingState )
      {
        case Enum::BlePairingState.FAIL,
             Enum::BlePairingState.TIMEOUT:
        {
          Owner.SwitchToDialog( new Settings::SET23_BlePairingFail, null, null, null, null, null, null, null, null, null, false );
        }
        case Enum::BlePairingState.SUCCESSFUL:
        {
          var Settings::TimeoutDialog MessageDialog = new Settings::TimeoutDialog;
          MessageDialog.Message = Strings::SET26_PAIRING_SUCCESSFUL;
          MessageDialog.DismissAfterTimeout = true;
          Owner.SwitchToDialog( MessageDialog, null, null, null, null, null, null, null, null, null, false );
        }
        default:;
      }
    }
  }

  $rect <20,20,160,60>
  object Views::Text PincodeText
  {
    preset Bounds = <10,50,470,236>;
    preset String = "";
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }
}

$rect <600,60,800,100>
$output false
class SET28_SystemInfo : Components::BaseMainBG
{
  $rect <520,10,720,50>
  inherited method Init()
  {
    EsnText.String = DeviceInterface::SystemDevice.ESN;
    SoftwareVersionText.String = DeviceInterface::SystemDevice.SoftwareVersion;
    $if $prototyper
      // for screenshot
      EsnText.String = "XXXXXXXXX";
      SoftwareVersionText.String = "XX.XX.XXX";
    $endif
  }

  $rect <10,290,210,330>
  inherited property Bounds = <0,0,480,272>;

  $rect <520,110,750,150>
  inherited method OnShortMagicKeyActivated()
  {
    this.PresentDialog( new Development::DEV_Main, null, null, null, null, null, null, null, null, false );
  }

  $rect <10,340,210,380>
  inherited property DDModeEnabled = true;

  $rect <10,390,210,430>
  inherited property MagicKeyEnabled = true;

  $rect <20,20,160,60>
  object Views::Text ESN
  {
    preset Bounds = <10,45,470,76>;
    preset String = Strings::SET28_ESN;
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <20,20,160,60>
  object Views::Text SoftwareVersionTitle
  {
    preset Bounds = <10,107,470,138>;
    preset String = Strings::SET28_SW_VERSION;
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <20,20,160,60>
  object Views::Text EsnText
  {
    preset Bounds = <10,76,470,107>;
    preset String = "";
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <20,20,160,60>
  object Views::Text SoftwareVersionText
  {
    preset Bounds = <10,138,470,169>;
    preset String = DeviceInterface::SystemDevice.SoftwareVersion;
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <520,260,720,300>
  object Core::PropertyObserver EsnObserver
  {
    preset OnEvent = OnEsnReceivedSlot;
    preset Outlet = ^DeviceInterface::SystemDevice.ESN;
  }

  // This slot method is executed when the associated property observer 'PropertyObserver' \
  // is notified.
  $rect <520,300,720,340>
  slot OnEsnReceivedSlot
  {
    EsnText.String = DeviceInterface::SystemDevice.ESN;
  }

  $rect <20,20,160,60>
  object Menu::UpDownPushButtonSet UpDownPushButtonSet
  {
    preset Bounds = <95,176,385,259>;
    preset PassHomeKey = true;
    preset PassMagicKey = true;
    preset DDModeEnabled = true;
    preset OnUpButtonActivated = OnUnitIdButtonActivatedSlot;
    preset UpButtonTitle = Strings::SET28_UNIT_ID;
    preset DownButtonTitle = Strings::SET28_SW_UPDATE;
    preset DownButtonEnabled = false;
  }

  $rect <520,160,760,200>
  slot OnUnitIdButtonActivatedSlot
  {
    this.PresentDialog( new Settings::SET30_QRCode, null, null, null, null, null, null, null, null, false );
  }

  $rect <20,20,160,60>
  object Views::Image Divider
  {
    preset Bounds = <0,36,480,38>;
    preset Alignment = Views::ImageAlignment[AlignVertBottom, ScaleToFit];
    preset Bitmap = Resource::StatusBarDivider;
  }
}

$rect <20,510,220,550>
$output false
const int32 BT_PASSKEY_LEN = 6;

$rect <600,260,800,300>
$output false
class LicenseDetail : Core::Group
{
  $rect <430,10,630,50>
  inherited property Bounds = <0,0,388,211>;

  $rect <20,20,160,60>
  object Views::Text TitleText
  {
    preset Bounds = <0,0,388,31>;
    preset Alignment = Views::TextAlignment[AlignHorzLeft, AlignVertCenter];
    preset String = Strings::SET35_LICENSE;
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <20,20,160,60>
  object Views::Text LicenseText
  {
    preset Bounds = <0,61,388,1301>;
    preset RowDistance = 30;
    preset AutoSize = true;
    preset WrapText = true;
    preset Alignment = Views::TextAlignment[AlignHorzLeft, AlignVertTop];
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <430,110,630,150>
  method int32 ScrollUpPage()
  {
    if( !ScrollEffect.Enabled &&
        ScrollOffsetY < 0 )
    {
      var int32 NextScrollOffsetY = ScrollOffsetY + Bounds.h;

      if( NextScrollOffsetY > 0 )
      {
        NextScrollOffsetY = 0;
      }

      ScrollEffect.Value1 = ScrollOffsetY;
      ScrollEffect.Value2 = NextScrollOffsetY;
      ScrollEffect.Enabled = true;

      LineToScroll = NextScrollOffsetY.abs / LicenseText.RowDistance + Settings::DETAIL_TOTAL_LINE_NUM - 1;
      trace "LineToScroll ", LineToScroll;
    }

    return LineToScroll;
  }

  $rect <430,150,630,190>
  method int32 ScrollDownPage()
  {
    if( !ScrollEffect.Enabled )
    {
      var int32 NextScrollOffsetY = ScrollOffsetY - Bounds.h;
      var int32 MaxScrollOffset = NoOfLines * LicenseText.RowDistance - Bounds.h;
      if( MaxScrollOffset < 0 )
      {
        MaxScrollOffset = 0;
      }

      if( NextScrollOffsetY.abs > MaxScrollOffset )
      {
        NextScrollOffsetY = -1 * ( MaxScrollOffset );
      }

      ScrollEffect.Value1 = ScrollOffsetY;
      ScrollEffect.Value2 = NextScrollOffsetY;
      ScrollEffect.Enabled = true;

      LineToScroll = NextScrollOffsetY.abs / LicenseText.RowDistance + Settings::DETAIL_TOTAL_LINE_NUM - 1;
      trace "LineToScroll ", LineToScroll;
    }

    return LineToScroll;
  }

  $rect <650,10,850,50>
  var int32 LineToScroll;

  $rect <880,110,1080,150>
  object Effects::Int32Effect ScrollEffect
  {
    preset OnFinished = null;
    preset OnAnimate = null;
    preset Exponent = 4.19;
    preset Timing = Effects::Timing.Exp_Out;
    preset NoOfCycles = 1;
    preset CycleDuration = 200;
    preset InitialDelay = 0;
    preset Outlet = ^ScrollOffsetY;
  }

  $rect <880,150,1080,190>
  property slot OnLineNumUpdated;

  $rect <660,110,860,150>
  property int32 ScrollOffsetY = 0;

  $rect <660,150,860,190>
  onset ScrollOffsetY
  {
    if( pure ScrollOffsetY != value )
    {
      pure ScrollOffsetY = value;

      var rect NewBounds = TitleInitBounds;
      NewBounds.y1 = value;
      NewBounds.y2 = NewBounds.y1 + TitleInitBounds.h;
      TitleText.Bounds = NewBounds;

      NewBounds = LicenseInitBounds;
      NewBounds.y1 = NewBounds.y1 + value;
      NewBounds.y2 = NewBounds.y1 + LicenseInitBounds.h;
      LicenseText.Bounds = NewBounds;
    }
  }

  $rect <870,10,1070,50>
  method void UpdateLineNum()
  {
    NoOfLines = LicenseText.GetNoOfRows() + 2;
    signal OnLineNumUpdated;
  }

  $rect <870,50,1070,90>
  property int32 NoOfLines;

  $rect <1080,10,1280,50>
  var rect TitleInitBounds = <0,0,388,31>;

  $rect <1080,50,1280,90>
  var rect LicenseInitBounds = <0,61,388,1301>;
}

// Max line number per page on the license UI.
$rect <20,560,250,600>
$output false
const int32 DETAIL_TOTAL_LINE_NUM = 7;

$rect <600,380,810,420>
$output false
class SET43_ResetMenu : Menu::BaseMenuView
{
  $rect <10,290,190,330>
  inherited method Init()
  {
    trace "Init SET43";
  }

  $rect <10,340,210,380>
  inherited property DDModeEnabled = true;

  $rect <10,390,210,430>
  inherited var SlideOutEffectEnabled = true;

  $rect <510,20,710,60>
  inherited method LoadItemClass()
  {
    aItemNo; // suppress warning
    return Menu::ItemBase;
  }

  $rect <510,70,710,110>
  inherited method LoadItemTitle()
  {
    var string title = "";
    if( aItemNo < ItemTitleArray.size )
      {
      title = ItemTitleArray[aItemNo];
      }
    return title;
  }

  $rect <510,120,710,160>
  inherited method OnItemActivate()
  {
    aMenuItem; //suppress warning

    switch( aItemNo )
    {
      case 0: SlideInDialog( new Settings::SET45_TripMileageReset );
      case 1: SlideInDialog( new Maintenance::MNT01_MaintenanceReset );
      case 2: SlideInDialog( new Settings::SET46_VehicleInfoReset );
      case 3: SlideInDialog( new Settings::SET38_ConfirmAllReset );
      default :;
    }
  }

  $rect <20,20,160,60>
  inherited object Menu
  {
    preset DDModeEnabled = true;
    preset NoOfItems = 4;
    preset ArrowScrollBarVisible = true;
  }

  $rect <730,70,930,110>
  array string ItemTitleArray[ 4 ] =
  (
    Default[0] = Strings::SET43_TRIP_MILEAGE_RESET;
    Default[1] = Strings::SET43_MAINTENANCE_RESET;
    Default[2] = Strings::SET43_VEHICLE_INFO;
    Default[3] = Strings::SET43_ALL_RESET;
  );
}

$rect <600,580,810,620>
$output false
class SET42_ResetCompleted : Components::BaseMainBG
{
  $rect <10,300,190,340>
  inherited method Init()
  {
    trace "Init SET42";
  }

  $rect <210,300,440,340>
  inherited method OnShortHomeKeyActivated()
  {
    // neglect home key event
  }

  $rect <210,350,440,390>
  inherited method OnLongHomeKeyActivated()
  {
    // neglect home key event
  }

  $rect <10,350,190,390>
  inherited property DDModeEnabled = true;

  $rect <20,20,160,60>
  object Views::Text MessageText
  {
    preset Bounds = <10,50,470,236>;
    preset Ellipsis = true;
    preset WrapText = true;
    preset String = Strings::SET42_RESET_COMPLETE;
    preset Font = Fonts::NotoSansCjkJpMedium24pt;
  }

  $rect <460,300,660,340>
  object Core::Timer TimeoutTimer
  {
    preset OnTrigger = OnTimeoutSlot;
    preset Period = 0;
    preset Begin = 2000;
    preset Enabled = true;
  }

  $rect <460,350,660,390>
  slot OnTimeoutSlot
  {
    DeviceInterface::SystemDevice.RebootSystem();
  }
}

$rect <840,380,1060,420>
$output false
class SET45_TripMileageReset : Menu::BaseMenuView
{
  $rect <0,290,200,330>
  inherited method Init()
  {
    trace "Init SET45";

    SetNoOfMenuItems();
    GetMileageSetting();
  }

  $rect <230,340,430,380>
  inherited property DDModeEnabled = true;

  $rect <230,290,430,330>
  inherited var SlideOutEffectEnabled = true;

  $rect <510,20,710,60>
  inherited method LoadItemClass()
  {
    aItemNo; //suppress warning
    return Menu::ItemValueUnit;
  }

  $rect <510,70,710,110>
  inherited method LoadItemTitle()
  {
    var string Title = "";
    switch( SupportedSetting[aItemNo] )
    {
      case Enum::MeterInfo.TRIP1: Title = Strings::INF26_TRIP_1;
      case Enum::MeterInfo.TRIP2: Title = Strings::INF26_TRIP_2;
      case Enum::MeterInfo.TRIP_F: Title = Strings::INF26_TRIP_F;
      default:;
    }
    return Title;
  }

  $rect <510,220,710,260>
  inherited method OnItemActivate()
  {
    aMenuItem; // suppress warning

    var Pop::POP04_Reset ResetDialog = new Pop::POP04_Reset;
    ResetDialog.SelectedMeterInfo = SupportedSetting[aItemNo];
    PresentDialog( ResetDialog, null, null, null, null, null, null, null, null, false );
  }

  $rect <20,20,160,60>
  inherited object Menu
  {
    preset ItemHeight = Menu::ItemHeightTall;
  }

  $rect <510,170,710,210>
  inherited method LoadItemUnit()
  {
    aItemNo; // suppress warning

    var string UnitString;
    switch( MileageSetting )
    {
      case Enum::MileageSettingItem.KM: UnitString = Strings::UNT02_UNIT_MILEAGE_KILOMETER;
      case Enum::MileageSettingItem.MILE: UnitString = Strings::UNT02_UNIT_MILEAGE_MILE;
      default:;
    }

    return UnitString;
  }

  $rect <510,120,710,160>
  inherited method LoadItemValue()
  {
    var string Value;
    var DeviceInterface::VehicleDataClass VehicleData;

    switch( SupportedSetting[aItemNo] )
    {
      case Enum::MeterInfo.TRIP1: VehicleData = DeviceInterface::VehicleDevice.GetData( Enum::VehicleRxType.TRIP1_VALUE );
      case Enum::MeterInfo.TRIP2: VehicleData = DeviceInterface::VehicleDevice.GetData( Enum::VehicleRxType.TRIP2_VALUE );
      case Enum::MeterInfo.TRIP_F: VehicleData = DeviceInterface::VehicleDevice.GetData( Enum::VehicleRxType.F_TRIP );
      default: VehicleData.Valid = false;
    }

    if( VehicleData.Valid )
    {
      if( Enum::MileageSettingItem.MILE == MileageSetting )
      {
        VehicleData.DataFloat *= Unit::KM_TO_MILE_SCALE;
      }

      switch( SupportedSetting[aItemNo] )
      {
        case Enum::MeterInfo.TRIP1: VehicleData.DataFloat = DeviceInterface::VehicleDevice.ClampDataFloat( VehicleData.DataFloat, 0, Settings::MAX_METER_TRIP_1 );
        case Enum::MeterInfo.TRIP2: VehicleData.DataFloat = DeviceInterface::VehicleDevice.ClampDataFloat( VehicleData.DataFloat, 0, Settings::MAX_METER_TRIP_2 );
        case Enum::MeterInfo.TRIP_F: VehicleData.DataFloat = DeviceInterface::VehicleDevice.ClampDataFloat( VehicleData.DataFloat, 0, Settings::MAX_METER_TRIP_F );
        default:;
      }
      Value = string( VehicleData.DataFloat, 0, 1 );
    }
    else
    {
      Value = Strings::GEN_THREE_HYPHENS;
    }

    return Value;
  }

  $rect <720,70,920,110>
  array Enum::MeterInfo SupportedSetting[ 3 ];

  $rect <0,390,200,430>
  method void GetMileageSetting()
  {
    var DeviceInterface::VehicleDataClass VehicleData = DeviceInterface::VehicleDevice.GetData( Enum::VehicleRxType.MILEAGE_UNIT );
    if( Enum::MileageSettingItem.MILE == VehicleData.DataUInt32 )
    {
      MileageSetting = Enum::MileageSettingItem.MILE;
    }
    else
    {
      MileageSetting = Enum::MileageSettingItem.KM;
    }
  }

  $rect <0,440,200,480>
  var Enum::MileageSettingItem MileageSetting;

  $rect <0,340,200,380>
  method void SetNoOfMenuItems()
  {
    var int32 i;
    var int32 NoOfItems;
    var Enum::MeterInfo SettingItem;

    for( i = 0; i < (int32)AllSettings.size; i++ )
    {
      SettingItem = AllSettings[i];
      switch( SettingItem )
      {
        case Enum::MeterInfo.TRIP1:
        {
          if( DeviceInterface::VehicleDevice.IsVehicleFunctionSupported( Enum::VehicleSupportedFunction.TRIP1 ) )
          {
            SupportedSetting[NoOfItems] = SettingItem;
            NoOfItems++;
          }
        }
        case Enum::MeterInfo.TRIP2:
        {
          if( DeviceInterface::VehicleDevice.IsVehicleFunctionSupported( Enum::VehicleSupportedFunction.TRIP2 ) )
          {
            SupportedSetting[NoOfItems] = SettingItem;
            NoOfItems++;
          }
        }
        case Enum::MeterInfo.TRIP_F:
        {
          if( DeviceInterface::VehicleDevice.IsVehicleFunctionSupported( Enum::VehicleSupportedFunction.F_TRIP ) )
          {
            SupportedSetting[NoOfItems] = SettingItem;
            NoOfItems++;
          }
        }
        default:
        {
          SupportedSetting[NoOfItems] = SettingItem;
          NoOfItems++;
        }
      }
    }

    Menu.NoOfItems = NoOfItems;
  }

  $rect <940,70,1140,110>
  array Enum::MeterInfo AllSettings[ 3 ] =
  (
    Default[0] = Enum::MeterInfo.TRIP1;
    Default[1] = Enum::MeterInfo.TRIP2;
    Default[2] = Enum::MeterInfo.TRIP_F;
  );

  $rect <510,290,790,330>
  object Core::SystemEventHandler VehicleDataReceivedEventHandler
  {
    preset OnEvent = OnVehicleDataReceivedSlot;
    preset Event = DeviceInterface::VehicleDevice.VehicleDataReceivedSystemEvent;
  }

  // This slot method is executed when the associated system event handler 'SystemEventHandler' \
  // receives an event.
  $rect <510,340,750,380>
  slot OnVehicleDataReceivedSlot
  {
    var DeviceInterface::VehicleDataClass VehicleData = ( DeviceInterface::VehicleDataClass )VehicleDataReceivedEventHandler.Context;
    if( null != VehicleData )
    {
      switch( VehicleData.RxType )
      {
        case Enum::VehicleRxType.TRIP1_VALUE,
             Enum::VehicleRxType.TRIP2_VALUE,
             Enum::VehicleRxType.F_TRIP:
        {
          Menu.InvalidateItems( 0, Menu.NoOfItems - 1 );
        }
        default:;
      }
    }
  }
}

$rect <840,430,1060,470>
$output false
class SET46_VehicleInfoReset : Menu::BaseMenuView
{
  $rect <0,290,200,330>
  inherited method Init()
  {
    trace "Init SET46";

    SetNoOfMenuItems();
    GetUnitSetting();
  }

  $rect <230,340,430,380>
  inherited property DDModeEnabled = true;

  $rect <230,290,430,330>
  inherited var SlideOutEffectEnabled = true;

  $rect <510,20,710,60>
  inherited method LoadItemClass()
  {
    aItemNo; //suppress warning

    var class ItemClass = Menu::ItemValueUnit2;
    if( Enum::MeterInfo.TRIP_TIME == SupportedSetting[aItemNo] )
    {
      ItemClass = Menu::ItemTimeHourMinute;
    }
    return ItemClass;
  }

  $rect <510,70,710,110>
  inherited method LoadItemTitle()
  {
    var string Title = "";
    switch( SupportedSetting[aItemNo] )
    {
      case Enum::MeterInfo.AVG_FUEL: Title = Strings::HOM03_AVG_FUEL;
      case Enum::MeterInfo.AVG_SPEED: Title = Strings::HOM03_AVG_SPEED;
      case Enum::MeterInfo.TRIP_TIME: Title = Strings::HOM03_TRIP_TIME;
      case Enum::MeterInfo.FUEL_CONSUMPTION: Title = Strings::HOM03_FUEL_CONSUMPTION;
      default:;
    }
    return Title;
  }

  $rect <510,220,710,260>
  inherited method OnItemActivate()
  {
    aMenuItem; // suppress warning

    var Pop::POP04_Reset ResetDialog = new Pop::POP04_Reset;
    ResetDialog.SelectedMeterInfo = SupportedSetting[aItemNo];
    PresentDialog( ResetDialog, null, null, null, null, null, null, null, null, false );
  }

  $rect <20,20,160,60>
  inherited object Menu
  {
    preset ItemHeight = Menu::ItemHeightTall;
    preset ArrowScrollBarVisible = true;
  }

  $rect <510,170,710,210>
  inherited method LoadItemUnit()
  {
    aItemNo; // suppress warning

    var string UnitString;
    switch( SupportedSetting[aItemNo] )
    {
      case Enum::MeterInfo.AVG_SPEED:
      {
        if( Enum::MileageSettingItem.MILE == MileageUnit )
        {
          UnitString = Strings::GEN_SPEED_MILE_PER_HOUR;
        }
        else
        {
          UnitString = Strings::GEN_SPEED_KM_PER_HOUR;
        }
      }
      case Enum::MeterInfo.AVG_FUEL:
      {
        switch( FuelConsumptionUnit )
        {
          case Enum::MeterFuelConsumptionUnit.KM_PER_LITER: UnitString = Strings::UNT03_UNIT_FUEL_KM_PER_LITER;
          case Enum::MeterFuelConsumptionUnit.MILE_PER_US_GAL,
               Enum::MeterFuelConsumptionUnit.MILE_PER_IMPERIAL_GAL: UnitString = Strings::UNT03_UNIT_FUEL_MILE_PER_GALLON;
          case Enum::MeterFuelConsumptionUnit.L_PER_100KM: UnitString = Strings::UNT03_UNIT_FUEL_LITER_PER_HUNDRED_KM;
          default:;
        }
      }
      case Enum::MeterInfo.FUEL_CONSUMPTION:
      {
        switch( FuelConsumptionUnit )
        {
          case Enum::MeterFuelConsumptionUnit.KM_PER_LITER,
               Enum::MeterFuelConsumptionUnit.L_PER_100KM: UnitString = Strings::GEN_FUEL_UNIT_LITTER;
          case Enum::MeterFuelConsumptionUnit.MILE_PER_US_GAL,
               Enum::MeterFuelConsumptionUnit.MILE_PER_IMPERIAL_GAL: UnitString = Strings::GEN_FUEL_UNIT_GALLON;
          default:;
        }
      }
      default:;
    }

    return UnitString;
  }

  $rect <510,120,710,160>
  inherited method LoadItemValue()
  {
    var string ValueStr;

    switch( SupportedSetting[aItemNo] )
    {
      case Enum::MeterInfo.AVG_SPEED: ValueStr = DeviceInterface::VehicleDevice.AvgSpeedStr;
      case Enum::MeterInfo.AVG_FUEL: ValueStr = DeviceInterface::VehicleDevice.AvgFuelRateStr;
      case Enum::MeterInfo.FUEL_CONSUMPTION: ValueStr = DeviceInterface::VehicleDevice.FuelConStr;
      default: ValueStr = Strings::GEN_THREE_HYPHENS;
    }

    return ValueStr;
  }

  $rect <720,120,920,160>
  inherited method LoadItemHour()
  {
    aItemNo; //suppress warning

    var string HourString = Strings::GEN_THREE_HYPHENS;
    if( Enum::MeterInfo.TRIP_TIME == SupportedSetting[aItemNo] )
    {
      HourString = DeviceInterface::VehicleDevice.TripTimeHourStr;
    }
    return HourString;
  }

  $rect <723,172,923,212>
  inherited method LoadItemMinute()
  {
    aItemNo; //suppress warning

    var string MinuteString = Strings::GEN_THREE_HYPHENS;
    if( Enum::MeterInfo.TRIP_TIME == SupportedSetting[aItemNo] )
    {
      MinuteString = DeviceInterface::VehicleDevice.TripTimeMinuteStr;
    }
    return MinuteString;
  }

  $rect <720,70,920,110>
  array Enum::MeterInfo SupportedSetting[ 4 ];

  $rect <0,390,200,430>
  method void GetUnitSetting()
  {
    var DeviceInterface::VehicleDataClass VehicleData = DeviceInterface::VehicleDevice.GetData( Enum::VehicleRxType.MILEAGE_UNIT );
    if( Enum::MileageSettingItem.MILE == VehicleData.DataUInt32 )
    {
      MileageUnit = Enum::MileageSettingItem.MILE;
    }
    else
    {
      MileageUnit = Enum::MileageSettingItem.KM;
    }

    VehicleData = DeviceInterface::VehicleDevice.GetData( Enum::VehicleRxType.FUEL_CONSUMPTION_UNIT );
    if( (uint32)Enum::MeterFuelConsumptionUnit.TOTAL > VehicleData.DataUInt32 )
    {
      FuelConsumptionUnit = (Enum::MeterFuelConsumptionUnit)VehicleData.DataUInt32;
    }
  }

  $rect <0,440,200,480>
  var Enum::MileageSettingItem MileageUnit;

  $rect <0,340,200,380>
  method void SetNoOfMenuItems()
  {
    var int32 i;
    var int32 NoOfItems;
    var Enum::MeterInfo SettingItem;

    for( i = 0; i < AllSettings.size; i++ )
    {
      SettingItem = AllSettings[i];
      switch( SettingItem )
      {
        case Enum::MeterInfo.AVG_SPEED:
        {
          if( DeviceInterface::VehicleDevice.IsVehicleFunctionSupported( Enum::VehicleSupportedFunction.AVG_SPEED ) )
          {
            SupportedSetting[NoOfItems] = SettingItem;
            NoOfItems++;
          }
        }
        case Enum::MeterInfo.AVG_FUEL:
        {
          if( DeviceInterface::VehicleDevice.IsVehicleFunctionSupported( Enum::VehicleSupportedFunction.AVG_FUEL ) )
          {
            SupportedSetting[NoOfItems] = SettingItem;
            NoOfItems++;
          }
        }
        case Enum::MeterInfo.FUEL_CONSUMPTION:
        {
          if( DeviceInterface::VehicleDevice.IsVehicleFunctionSupported( Enum::VehicleSupportedFunction.FUEL_CONSUMPTION ) )
          {
            SupportedSetting[NoOfItems] = SettingItem;
            NoOfItems++;
          }
        }
        default:
        {
          SupportedSetting[NoOfItems] = SettingItem;
          NoOfItems++;
        }
      }
    }

    Menu.NoOfItems = NoOfItems;
  }

  $rect <940,70,1140,110>
  array Enum::MeterInfo AllSettings[ 4 ] =
  (
    Default[0] = Enum::MeterInfo.AVG_SPEED;
    Default[1] = Enum::MeterInfo.AVG_FUEL;
    Default[2] = Enum::MeterInfo.TRIP_TIME;
    Default[3] = Enum::MeterInfo.FUEL_CONSUMPTION;
  );

  $rect <510,290,790,330>
  object Core::SystemEventHandler VehicleDataReceivedEventHandler
  {
    preset OnEvent = OnVehicleDataReceivedSlot;
    preset Event = DeviceInterface::VehicleDevice.VehicleDataReceivedSystemEvent;
  }

  // This slot method is executed when the associated system event handler 'SystemEventHandler' \
  // receives an event.
  $rect <510,340,750,380>
  slot OnVehicleDataReceivedSlot
  {
    var DeviceInterface::VehicleDataClass VehicleData = ( DeviceInterface::VehicleDataClass )VehicleDataReceivedEventHandler.Context;
    if( null != VehicleData )
    {
      switch( VehicleData.RxType )
      {
        case Enum::VehicleRxType.AVERAGE_SPEED: ReloadItem( Enum::MeterInfo.AVG_SPEED );
        case Enum::VehicleRxType.FUEL_RATE_AVERAGE: ReloadItem( Enum::MeterInfo.AVG_FUEL );
        case Enum::VehicleRxType.TRIP_TIME: ReloadItem( Enum::MeterInfo.TRIP_TIME );
        case Enum::VehicleRxType.FUEL_CONSUMPTION: ReloadItem( Enum::MeterInfo.FUEL_CONSUMPTION );
        default:;
      }
    }
  }

  $rect <0,490,200,530>
  var Enum::MeterFuelConsumptionUnit FuelConsumptionUnit;

  $rect <510,390,710,430>
  method void ReloadItem( arg Enum::MeterInfo aMeterInfo )
  {
    var int32 i;
    for( i = 0; i < SupportedSetting.size; i++ )
    {
      if( aMeterInfo == SupportedSetting[i] )
      {
        Menu.InvalidateItems( i, i );
        break;
      }
    }
  }
}

$rect <1120,60,1360,100>
$output false
const uint32 MAX_AVERAGE_SPEED = 999;

$rect <1120,160,1360,200>
$output false
const float MAX_FUEL_CONSUMPTION = 99.9;

$rect <1120,260,1420,300>
$output false
const float MAX_FUEL_RATE_KM_PER_LITER = 99.9;

$rect <1120,210,1360,250>
$output false
const float MAX_AVERAGE_FUEL_MPG = 199.9;

$rect <1120,310,1420,350>
$output false
const float MAX_FUEL_RATE_LITER_PER_100KM = 99.9;

$rect <1120,360,1420,400>
$output false
const float MIN_FUEL_RATE_LITER_PER_100KM = 1.0;

// Range of the Vehicle Info
note group Note1
{
  attr Bounds = <1090,10,1750,730>;
}

$rect <1120,460,1390,500>
$output false
const float MAX_METER_TRIP_1 = 9999.9;

$rect <1450,410,1720,450>
$output false
const int32 MIN_TEMPERATURE_DEG_C = -30;

$rect <1450,460,1720,500>
$output false
const int32 MAX_TEMPERATURE_DEG_C = 128;

$rect <1450,510,1720,550>
$output false
const int32 MIN_TEMPERATURE_DEG_F = -22;

$rect <1450,560,1720,600>
$output false
const int32 MAX_TEMPERATURE_DEG_F = 263;

$rect <1450,60,1720,100>
$output false
const int32 MAX_RANGE = 999;

$rect <1450,110,1720,150>
$output false
const float MAX_CURRENT_FUEL_KM_L = 99.9;

$rect <1450,160,1720,200>
$output false
const float MAX_CURRENT_FUEL_MPG = 199.9;

$rect <1450,210,1720,250>
$output false
const int32 MAX_CURRENT_FUEL_L_100KM = 99.9;

$rect <1450,260,1720,300>
$output false
const float MIN_CURRENT_FUEL_L_100KM = 1.0;

$rect <1450,310,1720,350>
$output false
const float MIN_BATTERY_VOLTAGE = 9.0;

$rect <1450,360,1720,400>
$output false
const float MAX_BATTERY_VOLTAGE = 16.0;

$rect <1120,660,1390,700>
$output false
const int32 MAX_TIRE_PRESSURE = 51;

$rect <1120,610,1390,650>
$output false
const int32 MAX_MAINTENANCE_TRIP = 99999;

$rect <1120,510,1390,550>
$output false
const float MAX_METER_TRIP_2 = 9999.9;

$rect <1120,560,1390,600>
$output false
const float MAX_METER_TRIP_F = 999.9;

$rect <1120,410,1390,450>
$output false
const int32 MAX_METER_ODO = 999999;

$rect <1450,610,1720,650>
$output false
const int32 MAX_TRIP_TIME_HOUR = 99;

$rect <1450,660,1720,700>
$output false
const int32 MAX_TRIP_TIME_MINUTE = 99;

$rect <1120,110,1360,150>
$output false
const uint32 MAX_CRUISE_SPEED = 999;
